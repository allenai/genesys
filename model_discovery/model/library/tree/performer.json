{
    "acronym": "performer",
    "title": "Rethinking Attention with Performers",
    "seed_ids": [
        "lineartransformer",
        "linformer",
        "longformer",
        "routingtransformer",
        "reformer",
        "compressivetransformer",
        "sparsetransformer",
        "bert"
    ],
    "s2id": "3fbf6339273c50b04e886fa9bd4ad18c952a683d",
    "abstract": "We introduce Performers, Transformer architectures which can estimate regular (softmax) full-rank-attention Transformers with provable accuracy, but using only linear (as opposed to quadratic) space and time complexity, without relying on any priors such as sparsity or low-rankness. To approximate softmax attention-kernels, Performers use a novel Fast Attention Via positive Orthogonal Random features approach (FAVOR+), which may be of independent interest for scalable kernel methods. FAVOR+ can be also used to efficiently model kernelizable attention mechanisms beyond softmax. This representational power is crucial to accurately compare softmax with other kernels for the first time on large-scale tasks, beyond the reach of regular Transformers, and investigate optimal attention-kernels. Performers are linear architectures fully compatible with regular Transformers and with strong theoretical guarantees: unbiased or nearly-unbiased estimation of the attention matrix, uniform convergence and low estimation variance. We tested Performers on a rich set of tasks stretching from pixel-prediction through text models to protein sequence modeling. We demonstrate competitive results with other examined efficient sparse and dense attention methods, showcasing effectiveness of the novel attention-learning paradigm leveraged by Performers.",
    "authors": [
        "K. Choromanski",
        "Valerii Likhosherstov",
        "David Dohan",
        "Xingyou Song",
        "Andreea Gane",
        "Tam\u00e1s Sarl\u00f3s",
        "Peter Hawkins",
        "Jared Davis",
        "Afroz Mohiuddin",
        "Lukasz Kaiser",
        "David Belanger",
        "Lucy J. Colwell",
        "Adrian Weller"
    ],
    "venue": "International Conference on Learning Representations",
    "year": 2020,
    "tldr": "Performers, Transformer architectures which can estimate regular (softmax) full-rank-attention Transformers with provable accuracy, but using only linear space and time complexity, without relying on any priors such as sparsity or low-rankness are introduced.",
    "citationCount": 1210,
    "influentialCitationCount": 176,
    "code": "import math\nimport torch\nimport torch.nn.functional as F\nfrom torch import nn\nfrom torch.cuda.amp import autocast\nfrom einops import rearrange, repeat\n\nfrom functools import partial\nfrom contextlib import contextmanager\n\nfrom local_attention import LocalAttention\nfrom performer_pytorch.reversible import ReversibleSequence, SequentialSequence\n\nfrom distutils.version import LooseVersion\n\nTORCH_GE_1_8_0 = LooseVersion(torch.__version__) >= LooseVersion('1.8.0')\n\ntry:\n    from apex import amp\n    APEX_AVAILABLE = True\nexcept:\n    APEX_AVAILABLE = False\n\n# helpers\n\ndef exists(val):\n    return val is not None\n\ndef empty(tensor):\n    return tensor.numel() == 0\n\ndef default(val, d):\n    return val if exists(val) else d\n\n@contextmanager\ndef null_context():\n    yield\n\ndef cast_tuple(val):\n    return (val,) if not isinstance(val, tuple) else val\n\ndef get_module_device(module):\n    return next(module.parameters()).device\n\ndef find_modules(nn_module, type):\n    return [module for module in nn_module.modules() if isinstance(module, type)]\n\nclass Always(nn.Module):\n    def __init__(self, val):\n        super().__init__()\n        self.val = val\n\n    def forward(self, *args, **kwargs):\n        return self.val\n\n# token shifting helper and classes\n\ndef shift(t, amount, mask = None):\n    if amount == 0:\n        return t\n\n    if exists(mask):\n        t = t.masked_fill(~mask[..., None], 0.)\n\n    return F.pad(t, (0, 0, amount, -amount), value = 0.)\n\nclass PreShiftTokens(nn.Module):\n    def __init__(self, shifts, fn):\n        super().__init__()\n        self.fn = fn\n        self.shifts = tuple(shifts)\n\n    def forward(self, x, **kwargs):\n        mask = kwargs.get('mask', None)\n        shifts = self.shifts\n        segments = len(shifts)\n        feats_per_shift = x.shape[-1] // segments\n        splitted = x.split(feats_per_shift, dim = -1)\n        segments_to_shift, rest = splitted[:segments], splitted[segments:]\n        segments_to_shift = list(map(lambda args: shift(*args, mask = mask), zip(segments_to_shift, shifts)))\n        x = torch.cat((*segments_to_shift, *rest), dim = -1)\n        return self.fn(x, **kwargs)\n\n# kernel functions\n\n# transcribed from jax to pytorch from\n# https://github.com/google-research/google-research/blob/master/performer/fast_attention/jax/fast_attention.py\n\ndef softmax_kernel(data, *, projection_matrix, is_query, normalize_data=True, eps=1e-4, device = None):\n    b, h, *_ = data.shape\n\n    data_normalizer = (data.shape[-1] ** -0.25) if normalize_data else 1.\n\n    ratio = (projection_matrix.shape[0] ** -0.5)\n\n    projection = repeat(projection_matrix, 'j d -> b h j d', b = b, h = h)\n    projection = projection.type_as(data)\n\n    data_dash = torch.einsum('...id,...jd->...ij', (data_normalizer * data), projection)\n\n    diag_data = data ** 2\n    diag_data = torch.sum(diag_data, dim=-1)\n    diag_data = (diag_data / 2.0) * (data_normalizer ** 2)\n    diag_data = diag_data.unsqueeze(dim=-1)\n\n    if is_query:\n        data_dash = ratio * (\n            torch.exp(data_dash - diag_data -\n                    torch.amax(data_dash, dim=-1, keepdim=True).detach()) + eps)\n    else:\n        data_dash = ratio * (\n            torch.exp(data_dash - diag_data - torch.amax(data_dash, dim=(-1, -2), keepdim=True).detach()) + eps)\n\n    return data_dash.type_as(data)\n\ndef generalized_kernel(data, *, projection_matrix, kernel_fn = nn.ReLU(), kernel_epsilon = 0.001, normalize_data = True, device = None):\n    b, h, *_ = data.shape\n\n    data_normalizer = (data.shape[-1] ** -0.25) if normalize_data else 1.\n\n    if projection_matrix is None:\n        return kernel_fn(data_normalizer * data) + kernel_epsilon\n\n    projection = repeat(projection_matrix, 'j d -> b h j d', b = b, h = h)\n    projection = projection.type_as(data)\n\n    data_dash = torch.einsum('...id,...jd->...ij', (data_normalizer * data), projection)\n\n    data_prime = kernel_fn(data_dash) + kernel_epsilon\n    return data_prime.type_as(data)\n\ndef orthogonal_matrix_chunk(cols, device = None):\n    unstructured_block = torch.randn((cols, cols), device = device)\n    if TORCH_GE_1_8_0:\n        q, r = torch.linalg.qr(unstructured_block.cpu(), mode = 'reduced')\n    else:\n        q, r = torch.qr(unstructured_block.cpu(), some = True)\n    q, r = map(lambda t: t.to(device), (q, r))\n    return q.t()\n\ndef gaussian_orthogonal_random_matrix(nb_rows, nb_columns, scaling = 0, device = None):\n    nb_full_blocks = int(nb_rows / nb_columns)\n\n    block_list = []\n\n    for _ in range(nb_full_blocks):\n        q = orthogonal_matrix_chunk(nb_columns, device = device)\n        block_list.append(q)\n\n    remaining_rows = nb_rows - nb_full_blocks * nb_columns\n    if remaining_rows > 0:\n        q = orthogonal_matrix_chunk(nb_columns, device = device)\n        block_list.append(q[:remaining_rows])\n\n    final_matrix = torch.cat(block_list)\n\n    if scaling == 0:\n        multiplier = torch.randn((nb_rows, nb_columns), device = device).norm(dim = 1)\n    elif scaling == 1:\n        multiplier = math.sqrt((float(nb_columns))) * torch.ones((nb_rows,), device = device)\n    else:\n        raise ValueError(f'Invalid scaling {scaling}')\n\n    return torch.diag(multiplier) @ final_matrix\n\n# linear attention classes with softmax kernel\n\n# non-causal linear attention\ndef linear_attention(q, k, v):\n    k_cumsum = k.sum(dim = -2)\n    D_inv = 1. / torch.einsum('...nd,...d->...n', q, k_cumsum.type_as(q))\n    context = torch.einsum('...nd,...ne->...de', k, v)\n    out = torch.einsum('...de,...nd,...n->...ne', context, q, D_inv)\n    return out\n\n# efficient causal linear attention, created by EPFL\n# TODO: rewrite EPFL's CUDA kernel to do mixed precision and remove half to float conversion and back\ndef causal_linear_attention(q, k, v, eps = 1e-6):\n    from fast_transformers.causal_product import CausalDotProduct\n    autocast_enabled = torch.is_autocast_enabled()\n    is_half = isinstance(q, torch.cuda.HalfTensor)\n    assert not is_half or APEX_AVAILABLE, 'half tensors can only be used if nvidia apex is available'\n    cuda_context = null_context if not autocast_enabled else partial(autocast, enabled = False)\n\n    causal_dot_product_fn = amp.float_function(CausalDotProduct.apply) if is_half else CausalDotProduct.apply\n\n    k_cumsum = k.cumsum(dim=-2) + eps\n    D_inv = 1. / torch.einsum('...nd,...nd->...n', q, k_cumsum.type_as(q))\n\n    with cuda_context():\n        if autocast_enabled:\n            q, k, v = map(lambda t: t.float(), (q, k, v))\n\n        out = causal_dot_product_fn(q, k, v)\n\n    out = torch.einsum('...nd,...n->...nd', out, D_inv)\n    return out\n\n# inefficient causal linear attention, without cuda code, for reader's reference\n# not being used\ndef causal_linear_attention_noncuda(q, k, v, chunk_size = 128, eps = 1e-6):\n    last_k_cumsum = 0\n    last_context_cumsum = 0\n    outs = []\n\n    for q, k, v in zip(*map(lambda t: t.chunk(chunk_size, dim = -2), (q, k, v))):\n        k_cumsum = last_k_cumsum + k.cumsum(dim=-2)\n\n        D_inv = 1. / torch.einsum('...nd,...nd->...n', q, k_cumsum.type_as(q) + eps)\n        context = torch.einsum('...nd,...ne->...nde', k, v)\n        context_cumsum = last_context_cumsum + context.cumsum(dim=-3)\n        out = torch.einsum('...nde,...nd,...n->...ne', context_cumsum, q, D_inv)\n\n        last_k_cumsum = k_cumsum[:, :, -1:]\n        last_context_cumsum = context_cumsum[:, :, -1:]\n        outs.append(out)\n\n    return torch.cat(outs, dim = -2)\n\nclass FastAttention(nn.Module):\n    def __init__(self, dim_heads, nb_features = None, ortho_scaling = 0, causal = False, generalized_attention = False, kernel_fn = nn.ReLU(), no_projection = False):\n        super().__init__()\n        nb_features = default(nb_features, int(dim_heads * math.log(dim_heads)))\n\n        self.dim_heads = dim_heads\n        self.nb_features = nb_features\n        self.ortho_scaling = ortho_scaling\n\n        self.create_projection = partial(gaussian_orthogonal_random_matrix, nb_rows = self.nb_features, nb_columns = dim_heads, scaling = ortho_scaling)\n        projection_matrix = self.create_projection()\n        self.register_buffer('projection_matrix', projection_matrix)\n\n        self.generalized_attention = generalized_attention\n        self.kernel_fn = kernel_fn\n\n        # if this is turned on, no projection will be used\n        # queries and keys will be softmax-ed as in the original efficient attention paper\n        self.no_projection = no_projection\n\n        self.causal = causal\n        if causal:\n            try:\n                import fast_transformers.causal_product.causal_product_cuda\n                self.causal_linear_fn = partial(causal_linear_attention)\n            except ImportError:\n                print('unable to import cuda code for auto-regressive Performer. will default to the memory inefficient non-cuda version')\n                self.causal_linear_fn = causal_linear_attention_noncuda\n\n    @torch.no_grad()\n    def redraw_projection_matrix(self, device):\n        projections = self.create_projection(device = device)\n        self.projection_matrix.copy_(projections)\n        del projections\n\n    def forward(self, q, k, v):\n        device = q.device\n\n        if self.no_projection:\n            q = q.softmax(dim = -1)\n            k = torch.exp(k) if self.causal else k.softmax(dim = -2)\n\n        elif self.generalized_attention:\n            create_kernel = partial(generalized_kernel, kernel_fn = self.kernel_fn, projection_matrix = self.projection_matrix, device = device)\n            q, k = map(create_kernel, (q, k))\n\n        else:\n            create_kernel = partial(softmax_kernel, projection_matrix = self.projection_matrix, device = device)\n            q = create_kernel(q, is_query = True)\n            k = create_kernel(k, is_query = False)\n\n        attn_fn = linear_attention if not self.causal else self.causal_linear_fn\n        out = attn_fn(q, k, v)\n        return out\n\n# a module for keeping track of when to update the projections\n\nclass ProjectionUpdater(nn.Module):\n    def __init__(self, instance, feature_redraw_interval):\n        super().__init__()\n        self.instance = instance\n        self.feature_redraw_interval = feature_redraw_interval\n        self.register_buffer('calls_since_last_redraw', torch.tensor(0))\n\n    def fix_projections_(self):\n        self.feature_redraw_interval = None\n\n    def redraw_projections(self):\n        model = self.instance\n\n        if not self.training:\n            return\n\n        if exists(self.feature_redraw_interval) and self.calls_since_last_redraw >= self.feature_redraw_interval:\n            device = get_module_device(model)\n\n            fast_attentions = find_modules(model, FastAttention)\n            for fast_attention in fast_attentions:\n                fast_attention.redraw_projection_matrix(device)\n\n            self.calls_since_last_redraw.zero_()\n            return\n\n        self.calls_since_last_redraw += 1\n\n    def forward(self, x):\n        raise NotImplemented\n\n# classes\n\nclass ReZero(nn.Module):\n    def __init__(self, fn):\n        super().__init__()\n        self.g = nn.Parameter(torch.tensor(1e-3))\n        self.fn = fn\n\n    def forward(self, x, **kwargs):\n        return self.fn(x, **kwargs) * self.g\n\nclass PreScaleNorm(nn.Module):\n    def __init__(self, dim, fn, eps=1e-5):\n        super().__init__()\n        self.fn = fn\n        self.g = nn.Parameter(torch.ones(1))\n        self.eps = eps\n\n    def forward(self, x, **kwargs):\n        n = torch.norm(x, dim=-1, keepdim=True).clamp(min=self.eps)\n        x = x / n * self.g\n        return self.fn(x, **kwargs)\n\nclass PreLayerNorm(nn.Module):\n    def __init__(self, dim, fn):\n        super().__init__()\n        self.norm = nn.LayerNorm(dim)\n        self.fn = fn\n    def forward(self, x, **kwargs):\n        return self.fn(self.norm(x), **kwargs)\n\nclass Chunk(nn.Module):\n    def __init__(self, chunks, fn, along_dim = -1):\n        super().__init__()\n        self.dim = along_dim\n        self.chunks = chunks\n        self.fn = fn\n\n    def forward(self, x, **kwargs):\n        if self.chunks == 1:\n            return self.fn(x, **kwargs)\n        chunks = x.chunk(self.chunks, dim = self.dim)\n        return torch.cat([self.fn(c, **kwargs) for c in chunks], dim = self.dim)\n\nclass FeedForward(nn.Module):\n    def __init__(self, dim, mult = 4, dropout = 0., activation = None, glu = False):\n        super().__init__()\n        activation = default(activation, nn.GELU)\n\n        self.glu = glu\n        self.w1 = nn.Linear(dim, dim * mult * (2 if glu else 1))\n        self.act = activation()\n        self.dropout = nn.Dropout(dropout)\n        self.w2 = nn.Linear(dim * mult, dim)\n\n    def forward(self, x, **kwargs):\n        if not self.glu:\n            x = self.w1(x)\n            x = self.act(x)\n        else:\n            x, v = self.w1(x).chunk(2, dim=-1)\n            x = self.act(x) * v\n\n        x = self.dropout(x)\n        x = self.w2(x)\n        return x\n\nclass Attention(nn.Module):\n    def __init__(\n        self,\n        dim,\n        causal = False,\n        heads = 8,\n        dim_head = 64,\n        local_heads = 0,\n        local_window_size = 256,\n        nb_features = None,\n        feature_redraw_interval = 1000,\n        generalized_attention = False,\n        kernel_fn = nn.ReLU(),\n        dropout = 0.,\n        no_projection = False,\n        qkv_bias = False,\n        attn_out_bias = True\n    ):\n        super().__init__()\n        assert dim % heads == 0, 'dimension must be divisible by number of heads'\n        dim_head = default(dim_head, dim // heads)\n        inner_dim = dim_head * heads\n        self.fast_attention = FastAttention(dim_head, nb_features, causal = causal, generalized_attention = generalized_attention, kernel_fn = kernel_fn, no_projection = no_projection)\n\n        self.heads = heads\n        self.global_heads = heads - local_heads\n        self.local_attn = LocalAttention(window_size = local_window_size, causal = causal, autopad = True, dropout = dropout, look_forward = int(not causal), rel_pos_emb_config = (dim_head, local_heads)) if local_heads > 0 else None\n\n        self.to_q = nn.Linear(dim, inner_dim, bias = qkv_bias)\n        self.to_k = nn.Linear(dim, inner_dim, bias = qkv_bias)\n        self.to_v = nn.Linear(dim, inner_dim, bias = qkv_bias)\n        self.to_out = nn.Linear(inner_dim, dim, bias = attn_out_bias)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, pos_emb = None, context = None, mask = None, context_mask = None, **kwargs):\n        b, n, _, h, gh = *x.shape, self.heads, self.global_heads\n\n        cross_attend = exists(context)\n\n        context = default(context, x)\n        context_mask = default(context_mask, mask) if not cross_attend else context_mask\n\n        q, k, v = self.to_q(x), self.to_k(context), self.to_v(context)\n\n        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = h), (q, k, v))\n        (q, lq), (k, lk), (v, lv) = map(lambda t: (t[:, :gh], t[:, gh:]), (q, k, v))\n\n        attn_outs = []\n\n        if not empty(q):\n            if exists(context_mask):\n                global_mask = context_mask[:, None, :, None]\n                v.masked_fill_(~global_mask, 0.)\n\n            if exists(pos_emb) and not cross_attend:\n                q, k = apply_rotary_pos_emb(q, k, pos_emb)\n\n            out = self.fast_attention(q, k, v)\n            attn_outs.append(out)\n\n        if not empty(lq):\n            assert not cross_attend, 'local attention is not compatible with cross attention'\n            out = self.local_attn(lq, lk, lv, input_mask = mask)\n            attn_outs.append(out)\n\n        out = torch.cat(attn_outs, dim = 1)\n        out = rearrange(out, 'b h n d -> b n (h d)')\n        out =  self.to_out(out)\n        return self.dropout(out)\n\nclass SelfAttention(Attention):\n    def forward(self, *args, context = None, **kwargs):\n        assert not exists(context), 'self attention should not receive context'\n        return super().forward(*args, **kwargs)\n\nclass CrossAttention(Attention):\n    def forward(self, *args, context = None, **kwargs):\n        assert exists(context), 'cross attention should receive context'\n        return super().forward(*args, context = context, **kwargs)\n\n# positional embeddings\n\nclass AbsolutePositionalEmbedding(nn.Module):\n    def __init__(self, dim, max_seq_len):\n        super().__init__()\n        self.emb = nn.Embedding(max_seq_len, dim)\n\n    def forward(self, x):\n        t = torch.arange(x.shape[1], device=x.device)\n        return self.emb(t)\n\n# rotary positional embedding helpers\n\ndef rotate_every_two(x):\n    x = rearrange(x, '... (d j) -> ... d j', j = 2)\n    x1, x2 = x.unbind(dim = -1)\n    x = torch.stack((-x2, x1), dim = -1)\n    return rearrange(x, '... d j -> ... (d j)')\n\ndef apply_rotary_pos_emb(q, k, sinu_pos):\n    sinu_pos = rearrange(sinu_pos, '() n (j d) -> n j d', j = 2)\n    sin, cos = sinu_pos.unbind(dim = -2)\n    sin, cos = map(lambda t: repeat(t, 'b n -> b (n j)', j = 2), (sin, cos))\n    q, k = map(lambda t: (t * cos) + (rotate_every_two(t) * sin), (q, k))\n    return q, k\n\n# sinusoidal positional embeddings\n\nclass FixedPositionalEmbedding(nn.Module):\n    def __init__(self, dim, max_seq_len):\n        super().__init__()\n        inv_freq = 1. / (10000 ** (torch.arange(0, dim, 2).float() / dim))\n        position = torch.arange(0, max_seq_len, dtype=torch.float)\n        sinusoid_inp = torch.einsum(\"i,j->ij\", position, inv_freq)\n        emb = torch.cat((sinusoid_inp.sin(), sinusoid_inp.cos()), dim=-1)\n        self.register_buffer('emb', emb)\n\n    def forward(self, x):\n        return self.emb[None, :x.shape[1], :].to(x)\n\n# performer\n\nclass Performer(nn.Module):\n    def __init__(\n        self,\n        dim,\n        depth,\n        heads,\n        dim_head,\n        local_attn_heads = 0,\n        local_window_size = 256,\n        causal = False,\n        ff_mult = 4,\n        nb_features = None,\n        feature_redraw_interval = 1000,\n        reversible = False,\n        ff_chunks = 1,\n        generalized_attention = False,\n        kernel_fn = nn.ReLU(),\n        use_scalenorm = False,\n        use_rezero = False,\n        ff_glu = False,\n        ff_dropout = 0.,\n        attn_dropout = 0.,\n        cross_attend = False,\n        no_projection = False,\n        auto_check_redraw = True,\n        qkv_bias = True,\n        attn_out_bias = True,\n        shift_tokens = False\n    ):\n        super().__init__()\n        layers = nn.ModuleList([])\n        local_attn_heads = cast_tuple(local_attn_heads)\n        local_attn_heads = local_attn_heads * depth if len(local_attn_heads) == 1 else local_attn_heads\n        assert len(local_attn_heads) == depth, 'tuple specifying number of local attention heads per depth must be equal to the total depth'\n        assert all(map(lambda n: n >= 0 and n <= heads, local_attn_heads)), 'local attention head value must be less than the total number of heads'\n\n        if use_scalenorm:\n            wrapper_fn = partial(PreScaleNorm, dim)\n        elif use_rezero:\n            wrapper_fn = ReZero\n        else:\n            wrapper_fn = partial(PreLayerNorm, dim)\n\n        for _, local_heads in zip(range(depth), local_attn_heads):\n\n            attn = SelfAttention(dim, causal = causal, heads = heads, dim_head = dim_head, local_heads = local_heads, local_window_size = local_window_size, nb_features = nb_features, generalized_attention = generalized_attention, kernel_fn = kernel_fn, dropout = attn_dropout, no_projection = no_projection, qkv_bias = qkv_bias, attn_out_bias = attn_out_bias)\n            ff = Chunk(ff_chunks, FeedForward(dim, mult = ff_mult, dropout = ff_dropout, glu = ff_glu), along_dim = 1)\n\n            if shift_tokens:\n                shift = (0, 1) if causal else (-1, 0, 1)\n                attn, ff = map(lambda t: PreShiftTokens(shift, t), (attn, ff))\n\n            attn, ff = map(wrapper_fn, (attn, ff))\n            layers.append(nn.ModuleList([attn, ff]))\n\n            if not cross_attend:\n                continue\n\n            layers.append(nn.ModuleList([\n                wrapper_fn(CrossAttention(dim, heads = heads, dim_head = dim_head, nb_features = nb_features, generalized_attention = generalized_attention, kernel_fn = kernel_fn, dropout = attn_dropout, no_projection = no_projection, qkv_bias = qkv_bias, attn_out_bias = attn_out_bias)),\n                wrapper_fn(Chunk(ff_chunks, FeedForward(dim, mult = ff_mult, dropout = ff_dropout, glu = ff_glu), along_dim = 1))\n            ]))\n\n        execute_type = ReversibleSequence if reversible else SequentialSequence\n\n        route_attn = ((True, False),) * depth * (2 if cross_attend else 1)\n        route_context = ((False, False), (True, False)) * depth\n        attn_route_map = {'mask': route_attn, 'pos_emb': route_attn}\n        context_route_map = {'context': route_context, 'context_mask': route_context} if cross_attend else {}\n        self.net = execute_type(layers, args_route = {**attn_route_map, **context_route_map})\n\n        # keeping track of when to redraw projections for all attention layers\n        self.auto_check_redraw = auto_check_redraw\n        self.proj_updater = ProjectionUpdater(self.net, feature_redraw_interval)\n\n    def fix_projection_matrices_(self):\n        self.proj_updater.feature_redraw_interval = None\n\n    def forward(self, x, **kwargs):\n        if self.auto_check_redraw:\n            self.proj_updater.redraw_projections()\n        return self.net(x, **kwargs)\n",
    "description": null,
    "url": null
}