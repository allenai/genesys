{
    "title": "The Hedgehog & the Porcupine: Expressive Linear Attentions with Softmax Mimicry",
    "acronym": "hedgehog",
    "s2id": "af8a43c72e833add4cb3cff5e5427e1dbb0bacc1",
    "abstract": "N/A",
    "venue": "Asylum",
    "year": 2019,
    "tldr": "N/A",
    "citationCount": 13,
    "influentialCitationCount": 0,
    "seed_ids": [],
    "code": "# -*- coding: utf-8 -*-\n\nfrom typing import Optional\n\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom einops import rearrange, repeat\n\nfrom fla.modules import RMSNorm\nfrom fla.modules.feature_map import (DPFPFeatureMap, HadamardFeatureMap,\n                                     HedgehogFeatureMap, T2RFeatureMap)\nfrom fla.ops.linear_attn import (chunk_linear_attn, fused_chunk_linear_attn,\n                                 fused_recurrent_linear_attn)\n\n\nclass LinearAttention(nn.Module):\n    def __init__(\n        self,\n        mode: str = 'chunk',\n        hidden_size: str = 1024,\n        expand_k: int = 1.0,\n        expand_v: int = 1.0,\n        num_heads: int = 8,\n        num_kv_heads: Optional[int] = None,\n        feature_map: str = 'elementwise_product',\n        tie_feature_map_qk: bool = False,\n        output_norm: str = 'rmsnorm',\n        norm_q: bool = False,\n        norm_k: bool = False,\n        # standard linear attention normalization\n        do_feature_map_norm: bool = False,\n        elementwise_affine: bool = True,\n        norm_eps: float = 1e-5,\n        **kwargs\n    ):\n        super().__init__()\n\n        self.hidden_size = hidden_size\n        self.mode = mode\n        self.num_heads = num_heads\n        self.num_kv_heads = num_kv_heads if num_kv_heads is not None else num_heads\n        self.num_kv_groups = self.num_heads // self.num_kv_heads\n        self.key_dim = int(hidden_size * expand_k)\n        self.value_dim = int(hidden_size * expand_v)\n        self.key_dim_per_group = self.key_dim // self.num_kv_groups\n        self.value_dim_per_group = self.value_dim // self.num_kv_groups\n\n        assert mode in ['chunk', 'fused_chunk', 'fused_recurrent'], f\"Not suppoerted mode `{mode}`.\"\n        assert self.key_dim % num_heads == 0, f\"key dim must be divisible by num_heads of {num_heads}\"\n        assert self.value_dim % num_heads == 0, f\"value dim must be divisible by num_heads of {num_heads}\"\n\n        self.head_qk_dim = self.key_dim // num_heads\n        self.head_v_dim = self.value_dim // num_heads\n        self.do_feature_map_norm = do_feature_map_norm\n\n        if feature_map == 'hedgehog':\n            if tie_feature_map_qk:\n                self.feature_map_q = self.feature_map_k = HedgehogFeatureMap(head_dim=self.head_qk_dim)\n            else:\n                self.feature_map_q = HedgehogFeatureMap(head_dim=self.head_qk_dim)\n                self.feature_map_k = HedgehogFeatureMap(head_dim=self.head_qk_dim)\n\n        elif feature_map == 't2r':\n            if tie_feature_map_qk:\n                self.feature_map_q = self.feature_map_k = T2RFeatureMap(head_dim=self.head_qk_dim)\n            else:\n                self.feature_map_q = T2RFeatureMap(head_dim=self.head_qk_dim)\n                self.feature_map_k = T2RFeatureMap(head_dim=self.head_qk_dim)\n\n        elif feature_map == 'elementwise_product':\n            if tie_feature_map_qk:\n                self.feature_map_q = self.feature_map_k = HadamardFeatureMap(head_dim=self.head_qk_dim)\n            else:\n                self.feature_map_q = HadamardFeatureMap(head_dim=self.head_qk_dim)\n                self.feature_map_k = HadamardFeatureMap(head_dim=self.head_qk_dim)\n\n        elif feature_map == 'dpfp':\n            self.feature_map_q = DPFPFeatureMap(head_dim=self.head_qk_dim)\n            self.feature_map_k = DPFPFeatureMap(head_dim=self.head_qk_dim)\n\n        elif feature_map == 'elu':\n            def elu(x):\n                return F.elu(x) + 1\n            self.feature_map_q = elu\n            self.feature_map_k = elu\n\n        elif feature_map == 'relu':\n            self.feature_map_q = nn.ReLU()\n            self.feature_map_k = nn.ReLU()\n\n        elif feature_map == 'identity':\n            self.feature_map_q = nn.Identity()\n            self.feature_map_k = nn.Identity()\n        else:\n            raise NotImplementedError(f\"Not supported feature map `{feature_map}`.\")\n\n        self.q_proj = nn.Linear(hidden_size, self.key_dim, bias=False)\n        self.k_proj = nn.Linear(hidden_size, self.key_dim_per_group, bias=False)\n        self.v_proj = nn.Linear(hidden_size, self.value_dim_per_group, bias=False)\n\n        if output_norm == 'rmsnorm':\n            self.norm = RMSNorm(hidden_size=self.head_v_dim, elementwise_affine=elementwise_affine, eps=norm_eps)\n        elif output_norm == 'identity':\n            self.norm = nn.Identity()\n        else:\n            raise NotImplementedError(f\"Not supported output norm `{output_norm}`.\")\n\n        self.o_proj = nn.Linear(self.value_dim, hidden_size, bias=False)\n\n        self.norm_q = norm_q\n        self.norm_k = norm_k\n\n        self.apply(self._initialize_weights)\n\n    def _initialize_weights(self, module: nn.Module):\n        if getattr(module, \"_is_hf_initialized\", False):\n            return\n        if isinstance(module, nn.Linear):\n            nn.init.xavier_uniform_(module.weight, gain=2 ** -2.5)\n            if module.bias is not None:\n                nn.init.zeros_(module.bias)\n        module._is_hf_initialized = True\n\n    def forward(self, x):\n        mode = self.mode\n        q = self.q_proj(x)\n        k = self.k_proj(x)\n        v = self.v_proj(x)\n\n        q = rearrange(q, 'b n (h d) -> b h n d', h=self.num_heads)\n        if self.num_kv_groups > 1:\n            k, v = (repeat(x, 'b n (h d) -> b (h g) n d', h=self.num_kv_heads, g=self.num_kv_groups) for x in (k, v))\n        else:\n            k, v = (rearrange(x, 'b n (h d) -> b h n d', h=self.num_kv_heads) for x in (k, v))\n\n        q = self.feature_map_q(q)\n        k = self.feature_map_k(k)\n\n        if self.norm_q:\n            q = q / (q.sum(-1, True) + 1e-4)\n        if self.norm_k:\n            k = k / (k.sum(-1, True) + 1e-4)\n\n        if mode == 'chunk':\n            o, final_state = chunk_linear_attn(q, k, v, normalize=self.do_feature_map_norm)\n        elif mode == 'fused_chunk':\n            o, final_state = fused_chunk_linear_attn(q, k, v, normalize=self.do_feature_map_norm)\n        elif mode == 'fused_recurrent':\n            o, final_state = fused_recurrent_linear_attn(q, k, v, normalize=self.do_feature_map_norm)\n        else:\n            raise NotImplementedError\n        o = self.norm(o)\n        o = rearrange(o, 'b h n d -> b n (h d)')\n        o = self.o_proj(o)\n        return o"
}