{
    "acronym": "resurrectrnn",
    "title": "Resurrecting Recurrent Neural Networks for Long Sequences ",
    "seed_ids": [
        "sgconv",
        "s5",
        "s4d",
        "s4",
        "lssl",
        "fnet",
        "hippo",
        "transformer"
    ],
    "s2id": "f393aff1593c2d370ec0ae004910d18e40524967",
    "abstract": "Recurrent Neural Networks (RNNs) offer fast inference on long sequences but are hard to optimize and slow to train. Deep state-space models (SSMs) have recently been shown to perform remarkably well on long sequence modeling tasks, and have the added benefits of fast parallelizable training and RNN-like fast inference. However, while SSMs are superficially similar to RNNs, there are important differences that make it unclear where their performance boost over RNNs comes from. In this paper, we show that careful design of deep RNNs using standard signal propagation arguments can recover the impressive performance of deep SSMs on long-range reasoning tasks, while also matching their training speed. To achieve this, we analyze and ablate a series of changes to standard RNNs including linearizing and diagonalizing the recurrence, using better parameterizations and initializations, and ensuring proper normalization of the forward pass. Our results provide new insights on the origins of the impressive performance of deep SSMs, while also introducing an RNN block called the Linear Recurrent Unit that matches both their performance on the Long Range Arena benchmark and their computational efficiency.",
    "authors": [
        "Antonio Orvieto",
        "Samuel L. Smith",
        "Albert Gu",
        "Anushan Fernando",
        "Caglar Gulcehre",
        "Razvan Pascanu",
        "Soham De"
    ],
    "venue": "International Conference on Machine Learning",
    "year": 2023,
    "tldr": "This paper shows that careful design of deep RNNs using standard signal propagation arguments can recover the impressive performance of deep SSMs on long-range reasoning tasks, whileAlso introducing an RNN block called the Linear Recurrent Unit that matches both their performance on the Long Range Arena benchmark and their computational efficiency.",
    "citationCount": 146,
    "influentialCitationCount": 26,
    "code": "import math\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass LRU(nn.Module):\n    def __init__(self,in_features,out_features,state_features, rmin=0, rmax=1,max_phase=6.283):\n        super().__init__()\n        self.out_features=out_features\n        self.D=nn.Parameter(torch.randn([out_features,in_features])/math.sqrt(in_features))\n        u1=torch.rand(state_features)\n        u2=torch.rand(state_features)\n        self.nu_log= nn.Parameter(torch.log(-0.5*torch.log(u1*(rmax+rmin)*(rmax-rmin) + rmin**2)))\n        self.theta_log= nn.Parameter(torch.log(max_phase*u2))\n        Lambda_mod=torch.exp(-torch.exp(self.nu_log))\n        self.gamma_log=nn.Parameter(torch.log(torch.sqrt(torch.ones_like(Lambda_mod)-torch.square(Lambda_mod))))\n        B_re=torch.randn([state_features,in_features])/math.sqrt(2*in_features)\n        B_im=torch.randn([state_features,in_features])/math.sqrt(2*in_features)\n        self.B=nn.Parameter(torch.complex(B_re,B_im))\n        C_re=torch.randn([out_features,state_features])/math.sqrt(state_features)\n        C_im=torch.randn([out_features,state_features])/math.sqrt(state_features)\n        self.C=nn.Parameter(torch.complex(C_re,C_im))\n        self.state=torch.complex(torch.zeros(state_features),torch.zeros(state_features))\n\n    def forward(self, input,state=None):\n        self.state=self.state.to(self.B.device) if state==None else state\n        Lambda_mod=torch.exp(-torch.exp(self.nu_log))\n        Lambda_re=Lambda_mod*torch.cos(torch.exp(self.theta_log))\n        Lambda_im=Lambda_mod*torch.sin(torch.exp(self.theta_log))\n        Lambda=torch.complex(Lambda_re,Lambda_im)\n        Lambda=Lambda.to(self.state.device)\n        gammas=torch.exp(self.gamma_log).unsqueeze(-1).to(self.B.device)\n        gammas=gammas.to(self.state.device)\n        output=torch.empty([i for i in input.shape[:-1]] +[self.out_features],device=self.B.device)\n        #Handle input of (Batches,Seq_length, Input size)\n        if input.dim()==3:\n            for i,batch in enumerate(input):\n                out_seq=torch.empty(input.shape[1],self.out_features)\n                for j,step in enumerate(batch):\n                    self.state=(Lambda*self.state + gammas* self.B@step.to(dtype= self.B.dtype))\n                    out_step= (self.C@self.state).real + self.D@step\n                    out_seq[j]=out_step\n                self.state=torch.complex(torch.zeros_like(self.state.real),torch.zeros_like(self.state.real))\n                output[i]=out_seq\n        #Handle input of (Seq_length, Input size)\n        if input.dim()==2:\n            for i,step in enumerate(input):\n                self.state=(Lambda*self.state + gammas* self.B@step.to(dtype= self.B.dtype))\n                out_step= (self.C@self.state).real + self.D@step\n                output[i]=out_step\n            self.state=torch.complex(torch.zeros_like(self.state.real),torch.zeros_like(self.state.real))\n        return output",
    "description": null,
    "url": null
}