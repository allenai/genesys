{
    "acronym": "nystromformer",
    "title": "Nystr\u00f6mformer: A nystr\u00f6m-based algorithm for approximating self-attention",
    "seed_ids": [
        "performer",
        "bigbird",
        "clusteredattn",
        "lineartransformer",
        "linformer",
        "gpt3",
        "longformer",
        "sparsetransformer",
        "transformer",
        "bert"
    ],
    "s2id": "6fa1cfc4f97f03a8485692418c7aa1a06c574a85",
    "abstract": "Transformers have emerged as a powerful tool for a broad range of natural language processing tasks. A key component that drives the impressive performance of Transformers is the self-attention mechanism that encodes the influence or dependence of other tokens on each specific token. While beneficial, the quadratic complexity of self-attention on the input sequence length has limited its application to longer sequences - a topic being actively studied in the community. To address this limitation, we propose Nystr\u00f6mformer - a model that exhibits favorable scalability as a function of sequence length. Our idea is based on adapting the Nystr\u00f6m method to approximate standard self-attention with O(n) complexity. The scalability of Nystr\u00f6mformer enables application to longer sequences with thousands of tokens. We perform evaluations on multiple downstream tasks on the GLUE benchmark and IMDB reviews with standard sequence length, and find that our Nystr\u00f6mformer performs comparably, or in a few cases, even slightly better, than standard self-attention. On longer sequence tasks in the Long Range Arena (LRA) benchmark, Nystr\u00f6mformer performs favorably relative to other efficient self-attention methods. Our code is available at https://github.com/mlpen/Nystromformer.",
    "authors": [
        "Yunyang Xiong",
        "Zhanpeng Zeng",
        "Rudrasis Chakraborty",
        "Mingxing Tan",
        "G. Fung",
        "Yin Li",
        "Vikas Singh"
    ],
    "venue": "AAAI Conference on Artificial Intelligence",
    "year": 2021,
    "tldr": "This work proposes Nystr\u00f6mformer - a model that exhibits favorable scalability as a function of sequence length and performs favorably relative to other efficient self-attention methods.",
    "citationCount": 375,
    "influentialCitationCount": 62,
    "code": "\nimport torch\nimport torch.nn as nn\nimport math\n\nclass NystromAttention(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n\n        self.head_dim = config[\"head_dim\"]\n        self.num_head = config[\"num_head\"]\n\n        self.num_landmarks = config[\"num_landmarks\"]\n        self.seq_len = config[\"seq_len\"]\n        \n        if \"inv_coeff_init_option\" in config:\n            self.init_option = config[\"inv_init_coeff_option\"]\n        else:\n            self.init_option = \"original\"\n\n        self.use_conv = \"conv_kernel_size\" in config\n        if self.use_conv:\n            self.conv = nn.Conv2d(\n                in_channels = self.num_head, out_channels = self.num_head,\n                kernel_size = (config[\"conv_kernel_size\"], 1), padding = (config[\"conv_kernel_size\"] // 2, 0),\n                bias = False,\n                groups = self.num_head)\n\n    def forward(self, Q, K, V, mask):\n\n        Q = Q * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))\n        K = K * mask[:, None, :, None] / math.sqrt(math.sqrt(self.head_dim))\n\n        if self.num_landmarks == self.seq_len:\n            attn = torch.nn.functional.softmax(torch.matmul(Q, K.transpose(-1, -2)) - 1e9 * (1 - mask[:, None, None, :]), dim = -1)\n            X = torch.matmul(attn, V)\n        else:\n            Q_landmarks = Q.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim = -2)\n            K_landmarks = K.reshape(-1, self.num_head, self.num_landmarks, self.seq_len // self.num_landmarks, self.head_dim).mean(dim = -2)\n\n            kernel_1 = torch.nn.functional.softmax(torch.matmul(Q, K_landmarks.transpose(-1, -2)), dim = -1)\n            kernel_2 = torch.nn.functional.softmax(torch.matmul(Q_landmarks, K_landmarks.transpose(-1, -2)), dim = -1)\n            kernel_3 = torch.nn.functional.softmax(torch.matmul(Q_landmarks, K.transpose(-1, -2)) - 1e9 * (1 - mask[:, None, None, :]), dim = -1)\n            X = torch.matmul(torch.matmul(kernel_1, self.iterative_inv(kernel_2)), torch.matmul(kernel_3, V))\n\n        if self.use_conv:\n            X += self.conv(V * mask[:, None, :, None])\n\n        return X\n\n    def iterative_inv(self, mat, n_iter = 6):\n        I = torch.eye(mat.size(-1), device = mat.device)\n        K = mat\n        \n        # The entries of K are positive and ||K||_{\\infty} = 1 due to softmax\n        if self.init_option == \"original\":\n            # This original implementation is more conservative to compute coefficient of Z_0. \n            V = 1 / torch.max(torch.sum(K, dim = -2)) * K.transpose(-1, -2)\n        else:\n            # This is the exact coefficient computation, 1 / ||K||_1, of initialization of Z_0, leading to faster convergence. \n            V = 1 / torch.max(torch.sum(K, dim = -2), dim = -1).values[:, :, None, None] * K.transpose(-1, -2)\n            \n        for _ in range(n_iter):\n            KV = torch.matmul(K, V)\n            V = torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))\n        return V\n\n    def extra_repr(self):\n        return f'num_landmarks={self.num_landmarks}, seq_len={self.seq_len}'",
    "description": null,
    "url": null
}