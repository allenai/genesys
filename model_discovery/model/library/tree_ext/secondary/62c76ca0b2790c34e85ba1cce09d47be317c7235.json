{
    "paperId": "62c76ca0b2790c34e85ba1cce09d47be317c7235",
    "externalIds": {
        "ArXiv": "1308.3432",
        "DBLP": "journals/corr/BengioLC13",
        "MAG": "2242818861",
        "CorpusId": 18406556
    },
    "title": "Estimating or Propagating Gradients Through Stochastic Neurons for Conditional Computation",
    "abstract": "Stochastic neurons and hard non-linearities can be useful for a number of reasons in deep learning models, but in many cases they pose a challenging problem: how to estimate the gradient of a loss function with respect to the input of such stochastic or non-smooth neurons? I.e., can we \"back-propagate\" through these stochastic neurons? We examine this question, existing approaches, and compare four families of solutions, applicable in different settings. One of them is the minimum variance unbiased gradient estimator for stochatic binary neurons (a special case of the REINFORCE algorithm). A second approach, introduced here, decomposes the operation of a binary stochastic neuron into a stochastic binary part and a smooth differentiable part, which approximates the expected effect of the pure stochatic binary neuron to first order. A third approach involves the injection of additive or multiplicative noise in a computational graph that is otherwise differentiable. A fourth approach heuristically copies the gradient with respect to the stochastic output directly as an estimator of the gradient with respect to the sigmoid argument (we call this the straight-through estimator). To explore a context where these estimators are useful, we consider a small-scale version of {\\em conditional computation}, where sparse stochastic units form a distributed representation of gaters that can turn off in combinatorially many ways large chunks of the computation performed in the rest of the neural network. In this case, it is important that the gating units produce an actual 0 most of the time. The resulting sparsity can be potentially be exploited to greatly reduce the computational cost of large deep networks for which conditional computation would be useful.",
    "venue": "arXiv.org",
    "year": 2013,
    "referenceCount": 20,
    "citationCount": 2713,
    "influentialCitationCount": 286,
    "openAccessPdf": null,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "This work considers a small-scale version of {\\em conditional computation}, where sparse stochastic units form a distributed representation of gaters that can turn off in combinatorially many ways large chunks of the computation performed in the rest of the neural network."
    },
    "embedding": null,
    "authors": [
        {
            "authorId": "1751762",
            "name": "Yoshua Bengio"
        },
        {
            "authorId": "2065623360",
            "name": "Nicholas L\u00e9onard"
        },
        {
            "authorId": "1760871",
            "name": "Aaron C. Courville"
        }
    ],
    "references": [
        {
            "paperId": "72d32c986b47d6b880dad0c3f155fe23d2939038",
            "title": "Deep Learning of Representations: Looking Forward"
        },
        {
            "paperId": "b7b915d508987b73b61eccd2b237e7ed099a2d29",
            "title": "Maxout Networks"
        },
        {
            "paperId": "abd1c342495432171beb7ca8fd9551ef13cbd0ff",
            "title": "ImageNet classification with deep convolutional neural networks"
        },
        {
            "paperId": "0060745e006c5f14ec326904119dca19c6545e51",
            "title": "Improving neural networks by preventing co-adaptation of feature detectors"
        },
        {
            "paperId": "f8c8619ea7d68e604e40b814b40c72888a755e95",
            "title": "Unsupervised Feature Learning and Deep Learning: A Review and New Perspectives"
        },
        {
            "paperId": "67107f78a84bdb2411053cb54e94fa226eea6d8e",
            "title": "Deep Sparse Rectifier Neural Networks"
        },
        {
            "paperId": "a538b05ebb01a40323997629e171c91aa28b8e2f",
            "title": "Rectified Linear Units Improve Restricted Boltzmann Machines"
        },
        {
            "paperId": "cd5af41a81e7fc9588dc74f3831fb14daf2f8e2a",
            "title": "Semantic hashing"
        },
        {
            "paperId": "843959ffdccf31c6694d135fad07425924f785b1",
            "title": "Extracting and composing robust features with denoising autoencoders"
        },
        {
            "paperId": "0f6089fb276a8ab926b735b9043263362bf19985",
            "title": "Gradient learning in spiking neural networks by dynamic perturbation of conductances."
        },
        {
            "paperId": "4d92df4a844c94fbb31b95157488e4b562b4f681",
            "title": "The Optimal Reward Baseline for Gradient-Based Reinforcement Learning"
        },
        {
            "paperId": "b13813b49f160e1a2010c44bd4fb3d09a28446e3",
            "title": "Hierarchical Recurrent Neural Networks for Long-Term Dependencies"
        },
        {
            "paperId": "367581fb078990155a684bceb711476a4950b889",
            "title": "Acknowledgments"
        },
        {
            "paperId": "f7410cd1afeba276f4479e8b5f04f12530b48d83",
            "title": "Multivariate stochastic approximation using a simultaneous perturbation gradient approximation"
        },
        {
            "paperId": "052b1d8ce63b07fec3de9dbb583772d860b7c769",
            "title": "Learning representations by back-propagating errors"
        },
        {
            "paperId": null,
            "title": "Neural networks for machine learning. Coursera, video lectures"
        },
        {
            "paperId": "4c915c1eecb217c123a36dc6d3ce52d12c742614",
            "title": "Simple Statistical Gradient-Following Algorithms for Connectionist Reinforcement Learning"
        },
        {
            "paperId": null,
            "title": "Reinforcement comparison"
        },
        {
            "paperId": null,
            "title": "Boltzmann machines: Constraint satisfaction networks that learn"
        },
        {
            "paperId": null,
            "title": "We use momentum for STS,"
        }
    ]
}