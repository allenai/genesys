{
    "acronym": "ef1b02dc1b82f9955fc4760fcefd92c0fff9f227",
    "title": "Get More with LESS: Synthesizing Recurrence with KV Cache Compression for Efficient LLM Inference",
    "seed_ids": [
        "streamingllm",
        "e9576198e9ee767ede4b1ac6a739267aa52a9832",
        "3e8d4062ec4353ff2701c7769336dbdb97f8814c",
        "fdc53c2c10742464087c0525f77e32604827a21d",
        "240103933ffe3dac2179cc160a2bd91299357a53",
        "026b3396a63ed5772329708b7580d633bb86bec9",
        "998ac3e945857cf2676ee7efdbaf443a0c6f820a",
        "5a77b508302771fc083bf24e0bcda8553c9b5421",
        "964bd39b546f0f6625ff3b9ef1083f797807ef2e",
        "5f895e84c1fea75de07b4f90da518273c2e57291",
        "d8d2e574965fe733eb1416e03df2b5c2914fc530",
        "054e307c1edf4b28137ffcbce980fe81f0647d20",
        "9ed25f101f19ea735ca300848948ed64064b97ca",
        "3a906b77fa218adc171fecb28bb81c24c14dcc7b",
        "3fbf6339273c50b04e886fa9bd4ad18c952a683d",
        "6f68e1bb253925d8431588555d3010419f322e04",
        "f51497f463566581874c941353dd9d80069c5b77",
        "8cef9900c04d7f661c08f4b5b1ed4337ace042a3",
        "e3aa232577bb427b1f3a34acbdef84bd85734042",
        "f4d546b9cd5681430de63e7d8739dc2d50045fb4"
    ],
    "s2id": "ef1b02dc1b82f9955fc4760fcefd92c0fff9f227",
    "abstract": "Many computational factors limit broader deployment of large language models. In this paper, we focus on a memory bottleneck imposed by the key-value (KV) cache, a computational shortcut that requires storing previous KV pairs during decoding. While existing KV cache methods approach this problem by pruning or evicting large swaths of relatively less important KV pairs to dramatically reduce the memory footprint of the cache, they can have limited success in tasks that require recollecting a majority of previous tokens. To alleviate this issue, we propose LESS, a simple integration of a (nearly free) constant sized cache with eviction-based cache methods, such that all tokens can be queried at later decoding steps. Its ability to retain information throughout time shows merit on a variety of tasks where we demonstrate LESS can help reduce the performance gap from caching everything, sometimes even matching it, all while being efficient. Relevant code can be found at https://github.com/hdong920/LESS.",
    "authors": [
        "Harry Dong",
        "Xinyu Yang",
        "Zhenyu (Allen) Zhang",
        "Zhangyang Wang",
        "Yuejie Chi",
        "Beidi Chen"
    ],
    "venue": "arXiv.org",
    "year": 2024,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "LESS, a simple integration of a (nearly free) constant sized cache with eviction-based cache methods, such that all tokens can be queried at later decoding steps, shows merit on a variety of tasks where it can help reduce the performance gap from caching everything."
    },
    "citationCount": 11,
    "influentialCitationCount": 0,
    "code": null,
    "description": null,
    "url": null
}