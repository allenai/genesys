{
    "acronym": "5b94dd68c7484d828bb3ed4b065fc58ddbd3b202",
    "title": "Fast Attention Over Long Sequences With Dynamic Sparse Flash Attention",
    "seed_ids": [
        "reformer",
        "87c5b281fa43e6f27191b20a8dd694eda1126336",
        "1944cebf4e41a10ea7bd02ce30404c18c9c4e04f",
        "c49ac1f916d6d2edeb187e6619c8d23acd95eb21",
        "fd1b829261ba04bb92e0ab60c4f6e7cea0d99fbf",
        "9ed25f101f19ea735ca300848948ed64064b97ca",
        "7e9ff94476f41041c75e253e84f487db00e9c861",
        "3fbf6339273c50b04e886fa9bd4ad18c952a683d",
        "7e5709d81558d3ef4265de29ea75931afeb1f2dd",
        "6f68e1bb253925d8431588555d3010419f322e04",
        "925ad2897d1b5decbea320d07e99afa9110e09b2",
        "9405cc0d6169988371b2755e573cc28650d14dfe"
    ],
    "s2id": "5b94dd68c7484d828bb3ed4b065fc58ddbd3b202",
    "abstract": "Transformer-based language models have found many diverse applications requiring them to process sequences of increasing length. For these applications, the causal self-attention\u2014which is the only component scaling quadratically w.r.t. the sequence length\u2014becomes a central concern. While many works have proposed schemes to sparsify the attention patterns and reduce the computational overhead of self-attention, those are often limited by implementation concerns and end up imposing a simple and static structure over the attention matrix. Conversely, implementing more dynamic sparse attention often results in runtimes significantly slower than computing the full attention using the Flash implementation from Dao et al. (2022). We extend FlashAttention to accommodate a large class of attention sparsity patterns that, in particular, encompass key/query dropping and hashing-based attention. This leads to implementations with no computational complexity overhead and a multi-fold runtime speedup on top of FlashAttention. Even with relatively low degrees of sparsity, our method improves visibly upon FlashAttention as the sequence length increases. Without sacrificing perplexity, we increase the training speed of a transformer language model by 2 . 0 \u00d7 and 3 . 3 \u00d7 for sequences of respectively 8 k and 16 k tokens.",
    "authors": [
        "Matteo Pagliardini",
        "Daniele Paliotta",
        "Martin Jaggi",
        "F. Fleuret"
    ],
    "venue": "Neural Information Processing Systems",
    "year": 2023,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "This work extends FlashAttention to accommodate a large class of attention sparsity patterns that, in particular, encompass key/query dropping and hashing-based attention, leading to implementations with no computational complexity overhead and a multi-fold runtime speedup on top of FlashAttention."
    },
    "citationCount": 1,
    "influentialCitationCount": 0,
    "code": null,
    "description": null,
    "url": null
}