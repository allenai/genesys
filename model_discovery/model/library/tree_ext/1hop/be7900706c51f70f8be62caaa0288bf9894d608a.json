{
    "acronym": "be7900706c51f70f8be62caaa0288bf9894d608a",
    "title": "SparseCoder: Identifier-Aware Sparse Transformer for File- Level Code Summarization",
    "seed_ids": [
        "bigbird",
        "longformer",
        "687733531aa65ea28b8a389399d3cbce9c99cee8",
        "c39925ddfb326ead2623d4cf7c5753784ba590a5",
        "4b27f18bff43d605805c92696a979714ced0b805",
        "3dfb1f50f2a34a699c339dabaa6f9b3a977973de",
        "84daddd294fa3cc12596b5785f81c2a153d2fb1d",
        "0646bb09db4d1ba24150e69b71edcd4aff691b3c",
        "925ad2897d1b5decbea320d07e99afa9110e09b2",
        "0fe2636446cd686830da3d971b31a004d6094b3c",
        "2cf3bd0cc1382f35384e259d99e4f9744eeaed28"
    ],
    "s2id": "be7900706c51f70f8be62caaa0288bf9894d608a",
    "abstract": "Code summarization aims to generate natural language descriptions of source code, facilitating programmers to understand and maintain it rapidly. While previous code summarization efforts have predominantly focused on method-level, this paper studies file-level code summarization, which can assist programmers in understanding and maintaining large source code projects. Unlike method-level code summarization, file-level code summarization typically involves long source code within a single file, which makes it challenging for Transformer-based models to understand the code semantics for the maximum input length of these models is difficult to set to a large number that can handle long code input well, due to the quadratic scaling of computational complexity with the input sequence length. To address this challenge, we propose SparseCoder, an identifier-aware sparse transformer for effectively handling long code sequences. Specifically, the SparseCoder employs a sliding window mechanism for self-attention to model short-term dependencies and leverages the structure message of code to capture long-term dependencies among source code identifiers by introducing two types of sparse attention patterns named global and identifier attention. To evaluate the performance of SparseCoder, we construct a new dataset FILE-CS for file-level code summarization in Python. Experimental results show that our SparseCoder model achieves state-of-the-art performance compared with other pre-trained models, including full self-attention and sparse models. Additionally, our model has low memory overhead and achieves comparable performance with models using full self-attention mechanism. Furthermore, we verify the generality of SparseCoder on other code understanding tasks, i.e., code clone detection and code search, and results show that our model outperforms baseline models in both tasks, demonstrating that our model can generate better code representations for various downstream tasks. Our source code and experimental data are anonymously available at: https://github.com/DeepSoftwareAnalytics/SparseCoder.",
    "authors": [
        "Yanlin Wang",
        "Yanxian Huang",
        "Daya Guo",
        "Hongyu Zhang",
        "Zibin Zheng"
    ],
    "venue": "IEEE International Conference on Software Analysis, Evolution, and Reengineering",
    "year": 2024,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "The SparseCoder model, an identifier-aware sparse transformer for effectively handling long code sequences, employs a sliding window mechanism for self-attention to model short-term dependencies and leverages the structure message of code to capture long-term dependencies among source code identifiers."
    },
    "citationCount": 1,
    "influentialCitationCount": 0,
    "code": null,
    "description": null,
    "url": null
}