{
    "acronym": "d5c32e5370943582c5ba09550cc2a6737434b06d",
    "title": "Syntax-Aware On-the-Fly Code Completion",
    "seed_ids": [
        "gpt2",
        "26070516a42646deab6100b5c5a50c5bd9e36cb4",
        "4b27f18bff43d605805c92696a979714ced0b805",
        "c6f608a3731a1fde355835a0e10a65ac71f80643",
        "49cf6a22a5dac5bc98b653534af65ffa0bc0e76d",
        "40df572b0fbeae0f3db9b364be838c6467d189f2",
        "b47381e04739ea3f392ba6c8faaf64105493c196",
        "9405cc0d6169988371b2755e573cc28650d14dfe"
    ],
    "s2id": "d5c32e5370943582c5ba09550cc2a6737434b06d",
    "abstract": "Code completion aims to help improve developers' productivity by suggesting the next code tokens from a given context. Various approaches have been proposed to incorporate abstract syntax tree (AST) information for model training, ensuring that code completion is aware of the syntax of the programming languages. However, existing syntax-aware code completion approaches are not on-the-fly, as we found that for every two-thirds of characters that developers type, AST fails to be extracted because it requires the syntactically correct source code, limiting its practicality in real-world scenarios. On the other hand, existing on-the-fly code completion does not consider syntactic information yet. In this paper, we propose PyCoder to leverage token types, a kind of lightweight syntactic information, which is readily available and aligns with the natural order of source code. Our PyCoder is trained in a multi-task training manner so that by learning the supporting task of predicting token types during the training phase, the models achieve better performance on predicting tokens and lines of code without the need for token types in the inference phase. Comprehensive experiments show that PyCoder achieves the first rank on the CodeXGLUE leaderboard with an accuracy of 77.12% for the token-level predictions, which is 0.43%-24.25% more accurate than baselines. In addition, PyCoder achieves an exact match of 43.37% for the line-level predictions, which is 3.63%-84.73% more accurate than baselines. These results lead us to conclude that token type information (an alternative to syntactic information) that is rarely used in the past can greatly improve the performance of code completion approaches, without requiring the syntactically correct source code like AST-based approaches do. Our PyCoder is publicly available on HuggingFace and GitHub.",
    "authors": [
        "Wannita Takerngsaksiri",
        "C. Tantithamthavorn",
        "Yuankui Li"
    ],
    "venue": "Information and Software Technology",
    "year": 2022,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": null
    },
    "citationCount": 11,
    "influentialCitationCount": 0,
    "code": null,
    "description": null,
    "url": null
}