{
    "acronym": "bcaaf83946ffe764e3405799fae739582082bc6f",
    "title": "Efficient LLM inference solution on Intel GPU",
    "seed_ids": [
        "flashattn",
        "87c5b281fa43e6f27191b20a8dd694eda1126336",
        "13a0d8bb38f739990c8cd65a44061c6534f17221"
    ],
    "s2id": "bcaaf83946ffe764e3405799fae739582082bc6f",
    "abstract": "Transformer based Large Language Models (LLMs) have been widely used in many fields, and the efficiency of LLM inference becomes hot topic in real applications. However, LLMs are usually complicatedly designed in model structure with massive operations and perform inference in the auto-regressive mode, making it a challenging task to design a system with high efficiency. In this paper, we propose an efficient LLM inference solution with low latency and high throughput. Firstly, we simplify the LLM decoder layer by fusing data movement and element-wise operations to reduce the memory access frequency and lower system latency. We also propose a segment KV cache policy to keep key/value of the request and response tokens in separate physical memory for effective device memory management, helping enlarge the runtime batch size and improve system throughput. A customized Scaled-Dot-Product-Attention kernel is designed to match our fusion policy based on the segment KV cache solution. We implement our LLM inference solution on Intel GPU and publish it publicly. Compared with the standard HuggingFace implementation, the proposed solution achieves up to 7x lower token latency and 27x higher throughput for some popular LLMs on Intel GPU.",
    "authors": [
        "Hui Wu",
        "Yi Gan",
        "Feng Yuan",
        "Jing Ma",
        "Wei Zhu",
        "Yutao Xu",
        "Hong Zhu",
        "Yuhua Zhu",
        "Xiaoli Liu",
        "Jinghui Gu"
    ],
    "venue": "arXiv.org",
    "year": 2023,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "This paper simplifies the LLM decoder layer by fusing data movement and element-wise operations to reduce the memory access frequency and lower system latency, and proposes a segment KV cache policy to keep key/value of the request and response tokens in separate physical memory for effective device memory management."
    },
    "citationCount": 1,
    "influentialCitationCount": 0,
    "code": null,
    "description": null,
    "url": null
}