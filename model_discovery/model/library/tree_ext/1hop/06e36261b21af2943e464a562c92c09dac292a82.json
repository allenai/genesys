{
    "acronym": "06e36261b21af2943e464a562c92c09dac292a82",
    "title": "Augmenting Decompiler Output with Learned Variable Names and Types",
    "seed_ids": [
        "bigbird",
        "395de0bd3837fdf4b4b5e5f04835bcc69c279481"
    ],
    "s2id": "06e36261b21af2943e464a562c92c09dac292a82",
    "abstract": "A common tool used by security professionals for reverse-engineering binaries found in the wild is the decompiler. A decompiler attempts to reverse compilation, transforming a binary to a higher-level language such as C. High-level languages ease reasoning about programs by providing useful abstractions such as loops, typed variables, and comments, but these abstractions are lost during compilation. Decompilers are able to deterministically reconstruct structural properties of code, but comments, variable names, and custom variable types are technically impossible to recover. In this paper we present DIRTY (DecompIled variable ReTYper), a novel technique for improving the quality of decompiler output that automatically generates meaningful variable names and types. Empirical evaluation on a novel dataset of C code mined from GitHub shows that DIRTY outperforms prior work approaches by a sizable margin, recovering the original names written by developers 66.4% of the time and the original types 75.8% of the time.",
    "authors": [
        "Qibin Chen",
        "Jeremy Lacomis",
        "Edward J. Schwartz",
        "Claire Le Goues",
        "Graham Neubig",
        "Bogdan Vasilescu"
    ],
    "venue": "USENIX Security Symposium",
    "year": 2021,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "DIRTY (DecompIled variable ReTYper), a novel technique for improving the quality of decompiler output that automatically generates meaningful variable names and types that outperforms prior work approaches by a sizable margin."
    },
    "citationCount": 32,
    "influentialCitationCount": 5,
    "code": null,
    "description": null,
    "url": null
}