{
    "acronym": "15d4c3c7ee39c26903544e4098879dd5ca72ca52",
    "title": "Large-scale, Independent and Comprehensive study of the power of LLMs for test case generation",
    "seed_ids": [
        "gpt3",
        "eb86d25472d1852a4b78dc1bd6ad73390fde172b",
        "e7ad08848d5d7c5c47673ffe0da06af443643bda",
        "5f19ae1135a9500940978104ec15a5b8751bc7d2"
    ],
    "s2id": "15d4c3c7ee39c26903544e4098879dd5ca72ca52",
    "abstract": "Unit testing, crucial for identifying bugs in code modules like classes and methods, is often neglected by developers due to time constraints. Automated test generation techniques have emerged to address this, but often lack readability and require developer intervention. Large Language Models (LLMs), like GPT and Mistral, show promise in software engineering, including in test generation. However, their effectiveness remains unclear. This study conducts the first comprehensive investigation of LLMs, evaluating the effectiveness of four LLMs and five prompt engineering techniques, for unit test generation. We analyze 216\\,300 tests generated by the selected advanced instruct-tuned LLMs for 690 Java classes collected from diverse datasets. We assess correctness, understandability, coverage, and bug detection capabilities of LLM-generated tests, comparing them to EvoSuite, a popular automated testing tool. While LLMs show potential, improvements in test correctness are necessary. This study reveals the strengths and limitations of LLMs compared to traditional methods, paving the way for further research on LLMs in software engineering.",
    "authors": [
        "Wendkuuni C. Ou'edraogo",
        "Kader Kabor'e",
        "Haoye Tian",
        "Yewei Song",
        "Anil Koyuncu",
        "Jacques Klein",
        "David Lo",
        "Tegawend'e F. Bissyand'e"
    ],
    "venue": "",
    "year": 2024,
    "tldr": {
        "model": "tldr@v2.0.0",
        "text": "This study conducts the first comprehensive investigation of LLMs, evaluating the effectiveness of four LLMs and five prompt engineering techniques, for unit test generation, and reveals the strengths and limitations of LLMs compared to traditional methods."
    },
    "citationCount": 0,
    "influentialCitationCount": 0,
    "code": null,
    "description": null,
    "url": null
}