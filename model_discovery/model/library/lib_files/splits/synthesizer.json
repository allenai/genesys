{
    "synthesizer-0": "Synthesizer: Rethinking Self-Attention for Transformer Models\n\nYi Tay Dara Bahri Donald Metzler Da-Cheng Juan Zhe Zhao Che Zheng\n\nAbstract\n\nThe dot product self-attention is known to be central and indispensable to state-of-the-art Transformer models.",
    "synthesizer-1": "But is it really required? This paper investigates the true importance and contribution of the dot product-based self-attention mechanism on the performance of Transformer models. Via extensive experiments, we find that (1) random alignment matrices surprisingly perform quite competitively and (2) learning attention weights from token-token (query-key) interactions is useful but not that important after all. To this end, we propose Synthesizer, a model that learns synthetic attention weights without token-token interactions. In our experiments, we first show that simple Synthesizers achieve highly competitive performance when compared against vanilla Transformer models across a range of tasks, including machine translation, language modeling, text generation and GLUE/SuperGLUE benchmarks. When composed with dot product attention, we find that Synthesizers consistently outperform Transformers. Moreover, we conduct additional comparisons of Synthesizers against Dynamic Convolutions, showing that simple Random Synthesizer is not only faster but also improves perplexity by a relative . Finally, we show that simple factorized Synthesizers can outperform Linformers on encoding only tasks. Machine Learning, ICML\n\n1 introduction\n\nTransformer models (Vaswani et al., 2017) have demonstrated success across a wide range of tasks. This has resulted in Transformers largely displacing once popular auto-regressive and recurrent models in recent years. At the heart of Transformer models lies the query-key-value dot product attention. The success of Transformer models is widely attributed to this self-attention mechanism since fully connected token graphs, which are able to model long-range dependencies, provide a robust inductive bias. But is the dot product self-attention really so important? Do we need it? Is it necessary to learn attention weights via pairwise dot products? This paper seeks to develop a deeper understanding of the role that the dot product self-attention mechanism plays in Transformer models. The fundamental role of dot product self-attention is to learn self-alignment, i.e., to determine the relative importance of a single token with respect to all other tokens in the sequence. To this end, there have been memory metaphors and analogies constructed to support this claim. Indeed, the terms query, keys, and values imply that self-attention emulates a content-based retrieval process which leverages pairwise interactions at its very core. Moving against convention, this paper postulates that we cannot only do without dot product self-attention but also content-based memory-like self-attention altogether. Traditionally, attention weights are learned at the instance or sample level, where weights are produced by instance-level pairwise interactions. As a result, these instance-specific interactions often fluctuate freely across different instances as they lack a consistent global context. This paper proposes Synthesizer, a new model that learns to synthesize the self-alignment matrix instead of manually computing pairwise dot products. We propose a diverse suite of synthesizing functions and extensively evaluate them. We characterize the source information that these synthesizing functions receive, i.e., whether they receive information from individual tokens, token-token interactions, and/or global task information. Intuitively, different source inputs to the synthesizing functions should capture diverse views, which may be useful when employed in conjunction. Aside from generalizing the standard Transformer model, we show that it is possible to achieve competitive results with fully global attention weights that do not consider token-token interactions or any instance-level (local) information at all. More specifically, a random matrix Synthesizer model achieves a BLEU score on WMT 2014 English-German111The originally reported result is .. Via a set of rigorous experiments, we observe that the popular and well-established dot-product content-based attention can be approximated with simpler variants such as random matrices or dense layers without sacrificing much performance in some cases. In our experiments, we also show that our relatively simple Synthesizer models also outperform Dynamic Convolutions (Wu et al., 2019) with a +3.5 relative improvement in perplexity while being faster. On encoding tasks, our factorized Synthesizers can outperform other low-rank efficient Transformer models such as Linformers (Wang et al., 2020). While simple Synthesizer models are able to perform competitively, our experiments show that the pairwise dot product is still ultimately helpful. When composing our synthesizing functions with dot products, we find that they consistently improve the performance of Transformers. In general, we believe our findings will spur further investigation and discussion about the true role and utility of the self-attention mechanism in Transformer models. Our Contributions\n\nOur key contributions are described as follows:\n\n\u2022\n\nWe propose Synthetic Attention, a new way of learning to attend without explicitly attending (i.e., without dot product attention or content-based attention). Instead, we generate the alignment matrix independent of token-token dependencies and explore a potpourri of parameterized functions for synthesizing attention matrices. \u2022\n\nWe propose Synthesizer, a new model that leverages Synthetic Attention. The model performs competitive to state-of-the-art Transformer models on a wide range of language tasks, including machine translation and language modeling. \u2022\n\nMoreover, we show that (1) random learnable alignment matrices perform competitively and (2) token-token dependencies are not necessary to achieve good performance with Transformer models on certain tasks. \u2022\n\nOn large-scale masked language modeling on the C4 dataset (Raffel et al., 2019) and finetuning on SuperGLUE and GLUE benchmarks, we show that simple random Synthesizers can outperform/match Lightweight Dynamic convolutions (Wu et al., 2019) along with outperforming Transformers and Universal Transformers (Dehghani et al., 2018). On two encoding tasks, factorized random Synthesizers outperform low-rank Linformers (Wang et al., 2020). 2 Related Work\n\nAttention-based models are used across a wide spectrum of problem domains. Such models are especially popular, due to their effectiveness, in the language and vision domains. Attention models can be traced back to the machine translation models of (Bahdanau et al., 2014) and (Luong et al., 2015), where attention is employed to learn soft word alignments between language pairs. The intuition behind the attention mechanism is deeply-rooted in the notion of memory-based retrieval (Graves et al., 2014; Weston et al., 2014), in which soft differentiable addressing of memory was initially proposed. The paradigm of learning self-alignments, also known as self-attention, has been largely popularized by Transformer models (Vaswani et al., 2017). This technical narrative has also been explored by a number of other recent studies, including those on intra-attention (Parikh et al., 2016), self-matching networks (Wang et al., 2017), and LSTMN (Cheng et al., 2016). To this end, Transformer models, which function primarily based on self-attention and feed-forward layers, generally serve as a reliable replacement for autoregressive recurrent models. The self-attention layer itself has been the subject of many recent technical innovations. For example, recent studies have investigated improving the layer\u2019s overall efficiency via sparsification and reducing the complexity of computing the alignment matrix (Child et al., 2019; Kitaev et al., 2020; Huang et al., 2018; Tay et al., 2020; Beltagy et al., 2020). These methods are tightly coupled with the query-key-value paradigm, employing a form of memory-based content retrieval as an attention mechanism. On the other end of the spectrum, there have been studies that advocate for replacing self-attention with convolution (Wu et al., 2019). The recent surge in interest in simplifying the attention mechanism raises important questions about the role and utility of the pairwise dot products, which are one the defining characteristics of self-attention models. Meanwhile, in the image domain, (Cordonnier et al., 2019) shows connection of Transformers with CNNs. Our work is a new take on the self-attention mechanism in Transformer models. We delve deeper, starting with replacing the pairwise dot products with what we call synthesizing functions that learn attention matrices that may or may not depend on the input tokens. The most closely related work is ((Raganato et al., 2020)), in which the authors propose using fixed (i.e., not learned) attention patterns in Transformer encoders.",
    "synthesizer-2": "However, the scope of their work is limited to encoders and relies on manually defined handcrafted patterns that seem to work well. Our work takes this intuition further and expands on this narrative. MLP-Mixers are Random Synthesizers\n\nThis is an update222This paper\u2019s draft first went out a year ago, on May 2020. discussing the relationship between Random Synthesizers and recent MLP-Mixers (Tolstikhin et al., 2021). There have been recent work (April 2021) that proposed All-MLP architectures for vision. Although, this work made it\u2019s appearance first in May 2020, a year before the MLP-Mixer was proposed, we show that Random Synthesizers are a form of MLP-Mixers. Random Synthesizers apply a weight matrix on the length dimension. is a matrix and can be seen as a form of projection across the length dimension. This is equivalent to transposing the axis before linear projection in the token-mixer in the MLP-Mixer model. The key difference here is that (1) we use a softmax normalization on the kernel (weights) and (2) Random Synthesizers are a form of multi-headed MLP-Mixers. 3 The Proposed Method\n\nThis section introduces our proposed Synthesizer model. At its core, our model is essentially a Transformer model with self-attention modules replaced with our Synthetic Attention modules. Figure 1 illustrates the key ideas behind (a) Transformer (b) Dense Synthesizers and (c) Random Synthesizers. 3.1 Synthesizer Model\n\nThis section introduces Synthetic Attention, our proposed self-attention module. Our model removes the notion of query-key-values in the self-attention module and directly synthesizes the alignment matrix instead. For simplicity, we describe the per head and per layer computation, which is denoted by and respectively in most cases. Dense Synthesizer\n\nLet us consider the simplest variation of the Synthesizer model which is conditioned on each input token. Overall, our method accepts an input and produces an output of . Here, refers to the sequence length and refers to the dimensionality of the model. We first adopt , a parameterized function, for projecting input from dimensions to dimensions. B i , h , \u2113 = F h , \u2113 \u200b ( X i , h , \u2113 ) subscript \ud835\udc35 \ud835\udc56 \u210e \u2113 subscript \ud835\udc39 \u210e \u2113 subscript \ud835\udc4b \ud835\udc56 \u210e \u2113 \\displaystyle B_{i,h,\\ell}=F_{h,\\ell}(X_{i,h,\\ell}) (1)\n\nwhere is a parameterized function that maps to and is the -th token of and is applied position-wise (to each vector in the sequence of length ). Intuitively, this can be interpreted as learning a token-wise projection to the sequence length . Essentially, with this model, each token predicts weights for each token in the input sequence. In practice, we adopt a simple two layered feed-forward layer with ReLU activations for :\n\nF h , \u2113 ( X i , h , \u2113 ) = W 2 , h , \u2113 ( \u03c3 R ( W 1 , h , \u2113 ( X i , h , \u2113 ) ) \\displaystyle F_{h,\\ell}(X_{i,h,\\ell})=W_{2,h,\\ell}(\\sigma_{R}(W_{1,h,\\ell}(X_{i,h,\\ell})) (2)\n\nwhere is the ReLU activation function and and . Hence, is now of . Given , we now compute:\n\nY h , \u2113 = softmax \u2061 ( B h , \u2113 ) \u200b G h , \u2113 \u200b ( X h , \u2113 ) subscript \ud835\udc4c \u210e \u2113 softmax subscript \ud835\udc35 \u210e \u2113 subscript \ud835\udc3a \u210e \u2113 subscript \ud835\udc4b \u210e \u2113 \\displaystyle Y_{h,\\ell}=\\operatorname{softmax}(B_{h,\\ell})G_{h,\\ell}(X_{h,\\ell}) (3)\n\nwhere is another parameterized function of that is analogous to (value) in the standard Transformer model. This approach eliminates the dot product attention altogether by replacing in standard Transformers with the synthesizing function . Random Synthesizer\n\nThe previous variant learns synthetic attention by conditioning on each input of and projecting to dimensions. Hence, the Dense Synthesizer conditions on each token independently, as opposed to pairwise token interactions in the vanilla Transformer model. We consider another variation of Synthesizer where the attention weights are not conditioned on any input tokens. Instead, the attention weights are initialized to random values. These values can then either be trainable or kept fixed (denoted as Fixed). Let be a randomly initialized matrix. The Random Synthesizer is defined as:\n\nY h , \u2113 = softmax \u2061 ( R h , \u2113 ) \u200b G h , \u2113 \u200b ( X h , \u2113 ) . subscript \ud835\udc4c \u210e \u2113 softmax subscript \ud835\udc45 \u210e \u2113 subscript \ud835\udc3a \u210e \u2113 subscript \ud835\udc4b \u210e \u2113 \\displaystyle Y_{h,\\ell}=\\operatorname{softmax}(R_{h,\\ell})G_{h,\\ell}(X_{h,\\ell}). (4)\n\nwhere . Notably, each head adds parameters to the network. The basic idea333We were not expecting this variation to work at all, but it turns out to be a strong baseline. of the Random Synthesizer is to not rely on pairwise token interactions or any information from individual token but rather to learn a task-specific alignment that works well globally across many samples. This is a direct generalization of the recently proposed fixed self-attention patterns (Raganato et al., 2020). Factorized Models\n\nThe Dense Synthesizer adds parameters to the network. On the other hand, the Random Synthesizer adds parameters. Here, note that we omit the projections in the standard Transformer which results in further parameter savings. Despite these savings, synthesized models can be cumbersome to learn when is large. Hence, we propose factorized variations of the Synthesizer models and show that these variants perform comparably in practice. Factorized Dense Synthesizer\n\nFactorized outputs not only slightly reduce the parameter cost of the Synthesizer but also aid in preventing overfitting. The factorized variant of the dense synthesizer can be expressed as follows:\n\nA h , \u2113 , B h , \u2113 = F A , h , \u2113 \u200b ( X i , h , \u2113 ) , F B , h , \u2113 \u200b ( X i , h , \u2113 ) formulae-sequence subscript \ud835\udc34 \u210e \u2113 subscript \ud835\udc35 \u210e \u2113 subscript \ud835\udc39 \ud835\udc34 \u210e \u2113 subscript \ud835\udc4b \ud835\udc56 \u210e \u2113 subscript \ud835\udc39 \ud835\udc35 \u210e \u2113 subscript \ud835\udc4b \ud835\udc56 \u210e \u2113 \\displaystyle A_{h,\\ell},B_{h,\\ell}=F_{A,h,\\ell}(X_{i,h,\\ell}),F_{B,h,\\ell}(X_{i,h,\\ell}) (5)\n\nwhere projects input into dimensions, projects to dimensions, and . The output of the factorized module is now written as:\n\nY h , \u2113 = softmax \u2061 ( C h , \u2113 ) \u200b G h , \u2113 \u200b ( X h , \u2113 ) . subscript \ud835\udc4c \u210e \u2113 softmax subscript \ud835\udc36 \u210e \u2113 subscript \ud835\udc3a \u210e \u2113 subscript \ud835\udc4b \u210e \u2113 \\displaystyle Y_{h,\\ell}=\\operatorname{softmax}(C_{h,\\ell})G_{h,\\ell}(X_{h,\\ell}). (6)\n\nwhere where are tiling functions and . The tiling function simply duplicates the vector times, i.e., . In this case, is a projection of and is a projection of . To avoid having similar values within the same block, we compose the outputs of and . Factorized Random Synthesizer\n\nSimilar to Factorized Synthesizers, we are also able to factorize into low rank matrices . Y h , \u2113 = softmax \u2061 ( R 1 , h , \u2113 \u200b R 2 , h , \u2113 \u22a4 ) \u200b G h , \u2113 \u200b ( X h , \u2113 ) . subscript \ud835\udc4c \u210e \u2113 softmax subscript \ud835\udc45 1 \u210e \u2113 superscript subscript \ud835\udc45 2 \u210e \u2113 top subscript \ud835\udc3a \u210e \u2113 subscript \ud835\udc4b \u210e \u2113 \\displaystyle Y_{h,\\ell}=\\operatorname{softmax}(R_{1,h,\\ell}R_{2,h,\\ell}^{\\top})G_{h,\\ell}(X_{h,\\ell}). (7)\n\nTherefore, it is easy to see that, for each head, this reduces the parameter costs from to where and hence helps prevent overfitting. In practice, we use a small value of . Mixture of Synthesizers\n\nFinally, we note that all of the proposed synthetic attention variants can be mixed in an additive fashion. This can be expressed as:\n\nY h , \u2113 = softmax ( \u03b1 1 , h , \u2113 S 1 , h , \u2113 ( X h , \u2113 ) + \\displaystyle Y_{h,\\ell}=\\operatorname{softmax}(\\alpha_{1,h,\\ell}S_{1,h,\\ell}(X_{h,\\ell})+ \u22ef \u03b1 N , h , \u2113 S N , h , e \u200b l \u200b l ( X h , \u2113 ) ) G h , \u2113 ( X h , \u2113 ) . \\displaystyle\\cdots\\alpha_{N,h,\\ell}S_{N,h,ell}(X_{h,\\ell}))G_{h,\\ell}(X_{h,\\ell}). where is a parameterized synthesizing function and the (where ) are learnable weights. In the case of mixing Random Factorized with standard Dense Synthesizers, this is expressed as:\n\nY h , \u2113 = softmax ( \u03b1 1 , h , \u2113 R 1 , h , \u2113 R 2 , h , \u2113 \u22a4 + \\displaystyle Y_{h,\\ell}=\\operatorname{softmax}(\\alpha_{1,h,\\ell}R_{1,h,\\ell}R_{2,h,\\ell}^{\\top}+ \u03b1 2 , h , \u2113 F h , \u2113 ( X h , \u2113 ) ) G h , \u2113 ( X ) . \\displaystyle\\alpha_{2,h,\\ell}F_{h,\\ell}(X_{h,\\ell}))G_{h,\\ell}(X). We investigate several Mixture of Synthesizers variants in our experiments. On Parameters Depending on Sequence Length\n\nRandom and dense Synthesizers both rely on parameters that depend on length . In general, we define a maximum length and dynamically truncate to the actual length of each batch. We note that this is in similar spirit to trainable positional encodings which have been common practice in Transformer models. Hence, we do not forsee any issue here. In the case that this is really a problem, one potential solution is to project to a smaller value and tile to the maximum sequence length. We leave this exploration to future work. 3.2 Discussion\n\nThis paper asks fundamental questions about the attention matrix and whether it is possible to synthesize by alternate means other than pairwise attention. It is worth noting that the regular dot product attention can also be subsumed by our Synthesizer framework, i.e., Synthesizer generalizes the Transformer model. In the case of the Transformer, the synthesizing function in question is . Table 1 lists the different model variants explored within our Synthesizer framework. The \u2019condition on\u2019 column refers to whether the synthesized output is produced as a function of or every pair. The \u2018sample\u2018 column indicates whether a given variant leverages local or global context. Random Synthesizers are global because they share the same global alignment patterns across all samples. Dense Synthesizers are considered to be local as they are conditioned on , which makes the alignment pattern dependent on each individual sample. To this end, it is imperative for synthesized models to have multiple heads to be effective. 4 Experiments\n\nThis section outlines our experimental setup and results. We first conduct experiments on five tasks to evaluate the effectiveness444Note that we are primarily interested in making controlled comparisons instead of going for the state-of-the-art result on each task. of different Synthesizer variants along with how they compare to the vanilla Transformer. Specifically, we conduct experiments on (1) machine translation (EnDe, EnFr) (2) autoregressive language modeling (LM1B) (3) text generation (summarization and dialogue modeling and (4) multi-task natural language processing (GLUE/SuperGLUE). Details of each experiments can be found in the appendix. Notation of Variants\n\nWe use R to denote Random, D to denote Dense and V to denote vanilla dot product attention. Fix to represent Fixed Random, FR to represent Factorized Random and FD to represent Factorized random. For Mixture Synthesizers, we use + to denote that two methods are mixed. 4.1 Comparing Synthesizer Variants and Transformer Models\n\nThis section dives into a detailed study of multiple Synthesizer variants and the base Transformer model. Experimental Results on MT/LM\n\nFirst, we observe that our Random Synthesizer baseline achieves on EnDe and on EnFr. The non-trainable (i.e., fixed) variant performs substantially worse, but still yields surprisingly strong BLEU with fixed random attention weights. Most other Synthesizer variants achieve competitive performance, although with slight performance degradation compared to Transformers. An interesting finding is that the Mixture model of Random + Dense synthesizer performs comparably to vanilla Transformers on EnDe. When mixing the standard dot product attention, performance further increases by BLEU points (EnDe). In general, the performance of Synthesizer variants are competitive with Transformers for this task. On LM1b, We find that the Random Synthesizers perform within - PPL points away from the vanilla Transformer model. The best performing model is the Synthesizer (D+V), which achieves the best performance on this setting. Results on Text Generation\n\nFor summarization, we find that the (R) and (D) variants do not outperform Transformers. The performance of the (D) model is Rouge-L points below Transformers. Hence, we postulate that the local sample-wise pairwise interactions are important for the summarization task. On the other hand, the utility of synthesized attention can also be observed, i.e., the (R+V) and (R+D) models both outperform Transformers. On the dialogue task, Synthesizers (R) and (D) both outperform vanilla Transformers by a reasonable margin ( 1-3) points across most/all metrics. The best performing model here is the (D) variant. Surprisingly, unlike most other tasks, the (+V) variants do not perform well, signifying that dot product self-attention may actually be harmful for this task. Comparing Synthesizers with Dynamic Convolutions\n\nTo ascertain the competitiveness of Synthesizers, we also compare them with Dynamic convolutions (Wu et al., 2019). We compare them on (1) pretraining perplexity using the masked language modeling objective on C4 and (2) downtream finetuning results on GLUE and SuperGLUE. Results on Masked Language Modeling\n\nWe also benchmark the speed of these models. In order to do so, we conduct additional experiments on the T5 adaptation of masked language modeling on the C4 dataset (Raffel et al., 2019) by comparing against lightweight dynamic convolutions (Wu et al., 2019) on a masked language modeling task. We also take this chance to benchmark the speed of Synthesizers compared with Transformers. Experiments are conducted on Mesh Tensorflow (Shazeer et al., 2018) and ran on 2x2 TPU V3 Chips for approximately steps. Results on MLM\n\nTable 4 reports the validation set log perplexity on masked language modeling555Note that this follows the sequence transduction style in T5.. We observe that Synthesizers (R) can outperform Dynamic Convolutions by a relative +3.5% while being faster. Against Lightweight Dynamic Convolutions, we match the performance while being faster. Given that this is the simple random Synthesizer baseline, we find this extremely interesting how it is able to outperform dynamic convolutions, a relatively complex model. The Random Synthesizer also has less FLOPS compared to both convolution models. On the other hand, the Mixture Synthesizer models that use the dot product attention improves the performance of the base Transformer model with relatively an equal model speed. Finally, similar to the earlier results, we see a consistent performance gain of Synthesizer (D+V) and Synthesizer (R+V) outperforming the base Transformer model. Results on GLUE and SuperGLUE\n\nTables 6 and 6 report results on the GLUE and SuperGLUE benchmarks. We note that the (R) and (D) variants of Synthesizer do not achieve reasonable performance. This can be largely attributed to the fact that the encoder self-attention in the T5 setting also functions as a cross-sentence attention. For example, in the entailment or reading comprehension tasks, the premise and hypothesis are concatenated together and self-attention effectively acts as cross-sentence attention666On a related note, the perceived success of pairwise self-attention might also be attributed to the fact that these public benchmarks are bias towards pairwise matching tasks. In reality, this is computationally prohibitive for many practical real-world applications (Seo et al., 2018). . On datasets like SST, a straightforward sentiment classification task, this cross sentence attention is not necessary and therefore Syn (R) and Syn (D) both perform competitively. To this end, Dynamic Convolutions (Wu et al., 2019) also do not have this encoder \u201dcross-attention\u201d and therefore also suffer on many of these pairwise matching tasks. Notably, in this \u2018no cross attention\u2019 setting, the Random Synthesizers are are 4 to 5 percentage points higher in GLUE/SuperGLUE score compared to Dynamic Convolutions. Optimistically, we observe that the mixture model Syn (R+V) outperforms the T5 model by a substantial margin (+1.9 points on SuperGLUE and +0.6 points on GLUE). Naturally, the hybrid mixture model also very substantially outperforms Dynamic Convolution. Finally to ensure that the Syn (+V) variations are not outperforming Transformers due to simply having more parameters, we also compared with T5 (Base+) which has equal number of parameters to Syn (+V) variants (approximately more parameters). Our results show that Synthesizers (+V) still outperform T5 (Base+). 4.2 Comparing Synthesizers with Linformers\n\nWe conduct more experiments comparing factorized random Synthesizers with Linformers. Since Linformer cannot be used to decode, we compare them on two encoding tasks from tensorflow datasets (AGnews (Zhang et al., 2015) and movie reviews (Maas et al., 2011)).",
    "synthesizer-3": "We use = for both factorized models. We also benchmark Transformers on this task. Note we do not use contextualized embeddings so results are not comparable with other work. Results\n\nWe notice that factorized Synthesizers (FR) are competitive with Linformers and Transformers on this task. The accuracy of Syn (FR) is competitive with Linformers while Syn (FR+V) outperforms both Transformers and Linformers. 5 Qualitative Analysis\n\nDistribution of Weights\n\nWe are interested in investigating how the synthetically generated attention weights differ from the dot product attention weights. Figure 3 shows the attention histograms on trained Transformer and Synthesizer models. We report histograms at layers , , and of a 6 layered (Transformer or Synthesizer) model at steps. We found that the weight distributions remain relatively identical thereafter. Figure 2 shows the initialization state. We observe that there are distinct differences in the weight distribution of Synthesizer and Transformer models. The variance of the Synthesizer weights tends to be higher. On the other hand, the weights on the Transformer model tends to gravitate near and have smaller variance. There are also notable differences across the (R) and (D) Synthesizer variants. Specifically, the (D) model in general has greater max values with more values in the - range while the values of the model tends to stay closer to . 5.1 What patterns do Synthesizers learn? In this section, we perform a deeper analysis of the Synthesizer model. Analysis\n\nFinally, we are interested to understand what these Synthesizer models are learning. We inspect the random synthetic attention weights for language modeling task LM1B and visualise the differences compared to the vanilla attention. We find that, for the LM task, Synthesizers are capable of learning a local window, emulating the vanilla Transformer quite closely despite starting from completely random. The weights, however, seem smoother and less coarse as compared to the Transformer. This seems to reflect what we expect since the Synthesizer does not benefit from token specific information. We provide additional analysis and visualisation of weights for the Machine Translation task in the supplementary material. 5.2 Overall Summary of Quantitative Results\n\nThis section summarizes our overall findings. Synthetic Attention is competitive even without Dot Product Attention\n\nOn all evaluated tasks, we showed that synthesized attention functions competitively, i.e., it achieves performance reasonably close to the dot product self-attention. On one task (dialogue generation), the dot product self-attention is found to actually degrade performance. Amongst the other tasks, machine translation is the least affected by the removal of the vanilla dot product. These findings allow us to introspect about whether pairwise comparisons for self-attention are even necessary. On the multi-task language understanding benchmark, the self-attention functions as a form of cross-attention by concatenating sentence pairs. Hence, synthesize attention performance is considerably worse than vanilla Transformers. Synthetic Attention and Dot Product Attention are highly complementary\n\nOverall, we also observe that the dot product attention is very helpful. To this end, synthetic attention is highly complementary to the pairwise dot product attention. While Synthetic Attention can usually achieve competitive and fast performance on its own, synthetic attention boosts performs, composing multiple synthetic attention (and dot product attention) together shows gains on almost all tasks that we have investigated. Hence, we believe this to be a robust finding. The simplest Synthesizers such as Random Synthesizers are fast competitive baselines\n\nFinally, we note that simple random Synthesizers are competitive with dynamic convolutions and Linformers, which are recently proposed models. On two encoding task and a large-scale masked language modeling task, we show that random (or factorized random) Synthesizers remain competitive to other fast or efficient Transformer models. 6 Conclusion\n\nThis paper proposed Synthesizer, a new Transformer model that employs Synthetic Attention. We conducted a principled study to better understand and evaluate the utility of global alignment and local, instance-wise alignment (e.g., independent token and token-token based) in self-attention. We show that, on multiple tasks such as machine translation, language modeling, dialogue generation, masked language modeling and document classification, synthetic attention demonstrates competitive performance compared to vanilla self-attention. Moreover, for the dialogue generation task, pairwise interactions actually hurt performance. Notably, we reemphasize that this study refers to self-attention. We found that we are not able to replace cross-attention with simpler variants in most cases. Via a set of additional large-scale experiments, also find that Synthesizers can outperform or match Dynamic Convolutions and Factorized Synthesizers can outperform other low rank Linformer models.",
    "synthesizer-4": "References\n\nBahdanau et al. (2014) Bahdanau, D., Cho, K., and Bengio, Y. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473, 2014. Beltagy et al. (2020) Beltagy, I., Peters, M. E., and Cohan, A. Longformer: The long-document transformer. arXiv:2004.05150, 2020. Cheng et al. (2016) Cheng, J., Dong, L., and Lapata, M. Long short-term memory-networks for machine reading. arXiv preprint arXiv:1601.06733, 2016. Child et al. (2019) Child, R., Gray, S., Radford, A., and Sutskever, I. Generating long sequences with sparse transformers.",
    "synthesizer-5": "arXiv preprint arXiv:1904.10509, 2019. Cordonnier et al. (2019) Cordonnier, J.-B., Loukas, A., and Jaggi, M. On the relationship between self-attention and convolutional layers.",
    "synthesizer-6": "arXiv preprint arXiv:1911.03584, 2019. Dehghani et al. (2018) Dehghani, M., Gouws, S., Vinyals, O., Uszkoreit, J., and Kaiser, \u0141. Universal transformers. arXiv preprint arXiv:1807.03819, 2018. Graves et al. (2014) Graves, A., Wayne, G., and Danihelka, I. Neural turing machines.",
    "synthesizer-7": "arXiv preprint arXiv:1410.5401, 2014. Huang et al. (2018) Huang, C.-Z. A., Vaswani, A., Uszkoreit, J., Shazeer, N., Simon, I., Hawthorne, C., Dai, A.",
    "synthesizer-8": "M., Hoffman, M. D., Dinculescu, M., and Eck, D. Music transformer. arXiv preprint arXiv:1809.04281, 2018. Kitaev et al. (2020) Kitaev, N., Kaiser, \u0141., and Levskaya, A. Reformer: The efficient transformer.",
    "synthesizer-9": "arXiv preprint arXiv:2001.04451, 2020. Luong et al. (2015) Luong, M.-T., Pham, H., and Manning, C. D. Effective approaches to attention-based neural machine translation. arXiv preprint arXiv:1508.04025, 2015. Maas et al. (2011) Maas, A. L., Daly, R. E., Pham, P. T., Huang, D., Ng, A. Y., and Potts, C. Learning word vectors for sentiment analysis. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies, pp. 142\u2013150, Portland, Oregon, USA, June 2011. Association for Computational Linguistics. URL http://www.aclweb.org/anthology/P11-1015. Parikh et al. (2016) Parikh, A. P., T\u00e4ckstr\u00f6m, O., Das, D., and Uszkoreit, J. A decomposable attention model for natural language inference.",
    "synthesizer-10": "arXiv preprint arXiv:1606.01933, 2016. Raffel et al. (2019) Raffel, C., Shazeer, N., Roberts, A., Lee, K., Narang, S., Matena, M., Zhou, Y., Li, W., and Liu, P. J. Exploring the limits of transfer learning with a unified text-to-text transformer. arXiv preprint arXiv:1910.10683, 2019. Raganato et al. (2020) Raganato, A., Scherrer, Y., and Tiedemann, J. Fixed encoder self-attention patterns in transformer-based machine translation.",
    "synthesizer-11": "arXiv preprint arXiv:2002.10260, 2020. Seo et al. (2018) Seo, M., Kwiatkowski, T., Parikh, A. P., Farhadi, A., and Hajishirzi, H. Phrase-indexed question answering: A new challenge for scalable document comprehension. arXiv preprint arXiv:1804.07726, 2018. Shazeer et al. (2018) Shazeer, N., Cheng, Y., Parmar, N., Tran, D., Vaswani, A., Koanantakool, P., Hawkins, P., Lee, H., Hong, M., Young, C., et al. Mesh-tensorflow: Deep learning for supercomputers.",
    "synthesizer-12": "In Advances in Neural Information Processing Systems, pp. 10414\u201310423, 2018. Tay et al. (2020) Tay, Y., Bahri, D., Yang, L., Metzler, D., and Juan, D.-C. Sparse sinkhorn attention. arXiv preprint arXiv:2002.11296, 2020. Tolstikhin et al. (2021) Tolstikhin, I., Houlsby, N., Kolesnikov, A., Beyer, L., Zhai, X., Unterthiner, T., Yung, J., Keysers, D., Uszkoreit, J., Lucic, M., et al. Mlp-mixer: An all-mlp architecture for vision.",
    "synthesizer-13": "arXiv preprint arXiv:2105.01601, 2021. Vaswani et al. (2017) Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, \u0141., and Polosukhin, I. Attention is all you need. In Advances in neural information processing systems, pp. 5998\u20136008, 2017. Wang et al. (2020) Wang, S., Li, B., Khabsa, M., Fang, H., and Ma, H. Linformer: Self-attention with linear complexity.",
    "synthesizer-14": "arXiv preprint arXiv:2006.04768, 2020.",
    "synthesizer-15": "Wang et al. (2017) Wang, W., Yang, N., Wei, F., Chang, B., and Zhou, M. Gated self-matching networks for reading comprehension and question answering.",
    "synthesizer-16": "In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pp. 189\u2013198, 2017. Weston et al. (2014) Weston, J., Chopra, S., and Bordes, A. Memory networks.",
    "synthesizer-17": "arXiv preprint arXiv:1410.3916, 2014. Wu et al. (2019) Wu, F., Fan, A., Baevski, A., Dauphin, Y. N., and Auli, M. Pay less attention with lightweight and dynamic convolutions. arXiv preprint arXiv:1901.10430, 2019. Zhang et al. (2015) Zhang, X., Zhao, J., and LeCun, Y. Character-level convolutional networks for text classification.",
    "synthesizer-18": "In Advances in neural information processing systems, pp. 649\u2013657, 2015. \u25c4 Feeling lucky? Conversion report Report an issue View original on arXiv\u25ba\n\nCopyright Privacy Policy\n\nGenerated on Thu Mar 7 07:41:29 2024 by LaTeXML"
}