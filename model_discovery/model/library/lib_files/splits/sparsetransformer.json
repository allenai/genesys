{
    "sparsetransformer-0": "Generating Long Sequences with Sparse Transformers\n\nRewon Child Scott Gray Alec Radford Ilya Sutskever\n\nAbstract\n\nTransformers are powerful sequence models, but require time and memory that grows quadratically with the sequence length.",
    "sparsetransformer-1": "In this paper we introduce sparse factorizations of the attention matrix which reduce this to . We also introduce a) a variation on architecture and initialization to train deeper networks, b) the recomputation of attention matrices to save memory, and c) fast attention kernels for training. We call networks with these changes Sparse Transformers, and show they can model sequences tens of thousands of timesteps long using hundreds of layers. We use the same architecture to model images, audio, and text from raw bytes, setting a new state of the art for density modeling of Enwik8, CIFAR-10, and ImageNet-64. We generate unconditional samples that demonstrate global coherence and great diversity, and show it is possible in principle to use self-attention to model sequences of length one million or more. Machine Learning, self-attention, attention, generative modeling\n\n1 Introduction\n\nEstimating complex, high-dimensional data distributions is a central problem in unsupervised learning, as many downstream applications of interest involve generation of text, images, audio, and other data. Additionally, it is believed to be a key component of unsupervised representation learning. Recently, neural autoregressive models have achieved impressive results in this domain, achieving state-of-the-art in modeling natural language (Jozefowicz et al., 2016) (Radford et al., 2018) (Dai et al., 2018), raw audio (Van Den Oord et al., 2016) (Mehri et al., 2016), and images (Oord et al., 2016) (Menick & Kalchbrenner, 2018) (Salimans et al., 2017) (Reed et al., 2017) (Chen et al., 2017). These methods decompose a joint probability distribution into a product of conditional ones. Modeling these conditional distributions is extremely challenging, however, as they contain many complex, long-range dependencies and require a suitably expressive model architecture to learn them. Architectures based off CNNs (Oord et al., 2016) have made great progress in this direction, but require significant depth to expand their receptive field. To address this, WaveNet (Van Den Oord et al., 2016) introduced dilated convolutions, which allowed the network to model long-range dependencies in a logarithmic number of layers. Separately, the Transformer (Vaswani et al., 2017) has been shown to excel on many natural language tasks, which may be in part due to its ability to model arbitrary dependencies in a constant number of layers. As each self-attention layer has a global receptive field, the network can allocate representational capacity to the input regions for which it is most useful. Thus the architecture may be more flexible at generating diverse data types than networks with fixed connectivity patterns. However, the memory and computational requirements of such networks grows quadratically with sequence length, which excludes their use on long sequences. The main contribution of this work is to introduce several sparse factorizations of the attention matrix, which scale as with the sequence length without sacrificing performance. These work by separating the full attention computation into several faster attention operations which, when combined, can approximate the dense attention operation. We use this to apply self-attention to sequences of unprecedented length. Additionally, we introduce several other changes to the Transformer, including:\n\n\u2022\n\nA restructured residual block and weight initialization to improve training of very deep networks\n\n\u2022\n\nA set of sparse attention kernels which efficiently compute subsets of the attention matrix\n\n\u2022\n\nRecomputation of attention weights during the backwards pass to reduce memory usage\n\nWe empirically validate that models augmented in this manner can achieve state-of-the-art compression and generation of natural language, raw audio, and natural images. The simplicity of the architecture leads us to believe it may be useful for many problems of interest. 2 Related Work\n\nThe most related work involves other techniques for scaling up autoregressive generative models. For images, (Reed et al., 2017) models conditional independence between the pixels in order to generate many locations in parallel, and (Menick & Kalchbrenner, 2018) imposes an ordering and multi-scale upsampling procedure to generate high fidelity samples. (Parmar et al., 2018) uses blocks of local attention to apply Transformers to images. For text, (Dai et al., 2018) introduces a state reuse \u201dmemory\u201d for modeling long-term dependencies. And for audio, in addition to (Van Den Oord et al., 2016), (Mehri et al., 2016) used a hierarchical structure and RNNs of varying clock-rates to use long contexts during inference, similar to (Koutnik et al., 2014). (Huang et al., 2018) apply Transformers to MIDI generation with an efficient relative attention. Our work is simpler than many of the techniques above and can be applied equally across images, text, and audio. Many of the above techniques are orthogonal to ours, moreover, and could be used in conjunction with ours. Outside of generative modeling, there are several works relevant to improving the efficiency of attention based off chunking (Chiu & Raffel, 2017) or using fixed length representations (Britz et al., 2017). Other works have investigated attention with multiple \u201dhops\u201d, such as (Sukhbaatar et al., 2015) and (Gehring et al., 2017). It is worth noting that the Gated Pixel CNN (Oord et al., 2016) and WaveNet (Van Den Oord et al., 2016) use multiplicative interactions in their networks, which are related to self-attention. 3 Background\n\nWe consider the task of autoregressive sequence generation, where the joint probability of a sequence is modeled as the product of conditional probability distributions and parameterized by a network . p \u200b ( \ud835\udc31 ) = \u220f i = 1 n p \u200b ( x i | x 1 , \u2026 , x i \u2212 1 ; \u03b8 ) \ud835\udc5d \ud835\udc31 superscript subscript product \ud835\udc56 1 \ud835\udc5b \ud835\udc5d conditional subscript \ud835\udc65 \ud835\udc56 subscript \ud835\udc65 1 \u2026 subscript \ud835\udc65 \ud835\udc56 1 \ud835\udf03 p(\\mathbf{x})=\\prod_{i=1}^{n}p(x_{i}|x_{1},...,x_{i-1};\\theta) (1)\n\nWe treat images, text, and audio as a sequence of discrete tokens, typically raw bytes. The network takes in the sequence of tokens and outputs a categorical distribution over the possible values of the next token using the function, where is the size of the vocabulary. The training objective is to maximize the log-probability of the data with respect to . A simple and powerful choice for model is a Transformer (Vaswani et al., 2017) in decoder-only mode, as demonstrated by (Radford et al., 2018) and (Liu et al., 2018). These models transform the input sequence with blocks of multihead self-attention over the entire sequence, followed by dense transformations over each sequence element. The self-attention portion of the network must compute weightings for each of elements, however, which can quickly become intractable as the sequence length grows. In the following sections, we describe our modifications to the Transformer architecture which make it more suitable for modeling long sequences. 4 Factorized Self-Attention\n\nSparse Transformers separate the full self-attention operation across several steps of attention, as visualized in Figure 3(b) and 3(c). To motivate our approach, we first perform a qualitative assessment of attention patterns learned by a standard Transformer on an image dataset. 4.1 Qualitative assessment of learned attention patterns\n\nWe visualized the attention patterns learned by a 128-layer self-attention network on CIFAR-10, and present several examples in Figure 2. Visual inspection showed that most layers had sparse attention patterns across most data points, suggesting that some form of sparsity could be introduced without significantly affecting performance. Several layers (Figure 2c) clearly exhibited global patterns, however, and others exhibited data-dependent sparsity (Figure 2d), both of which would be impacted by introducing a predetermined sparsity pattern into all of the attention matrices. In this paper, we restricted our investigation to a class of sparse attention patterns that have connectivity between all positions over several steps of attention. These methods can be more efficient than full attention while still providing global context to any given position. We aimed to empirically validate the performance of these factorized patterns on a range of tasks, given that they are unable to learn the exact same mappings as those in Figure 2. We present the formulation of factorized attention below. 4.2 Factorized self-attention\n\nA self-attention layer maps a matrix of input embeddings to an output matrix and is parameterized by a connectivity pattern , where denotes the set of indices of the input vectors to which the th output vector attends. The output vector is a weighted sum of transformations of the input vectors:\n\nAttend \u200b ( X , S ) = ( a \u200b ( \ud835\udc31 i , S i ) ) i \u2208 { 1 , \u2026 , n } Attend \ud835\udc4b \ud835\udc46 subscript \ud835\udc4e subscript \ud835\udc31 \ud835\udc56 subscript \ud835\udc46 \ud835\udc56 \ud835\udc56 1 \u2026 \ud835\udc5b \\mathrm{Attend}(X,S)=\\Bigl{(}\\,a(\\mathbf{x}_{i},S_{i})\\,\\Bigr{)}_{i\\in\\{1,...,n\\}} (2)\n\na \u200b ( \ud835\udc31 i , S i ) = softmax \u200b ( ( W q \u200b \ud835\udc31 i ) \u200b K S i T d ) \u200b V S i \ud835\udc4e subscript \ud835\udc31 \ud835\udc56 subscript \ud835\udc46 \ud835\udc56 softmax subscript \ud835\udc4a \ud835\udc5e subscript \ud835\udc31 \ud835\udc56 superscript subscript \ud835\udc3e subscript \ud835\udc46 \ud835\udc56 \ud835\udc47 \ud835\udc51 subscript \ud835\udc49 subscript \ud835\udc46 \ud835\udc56 a(\\mathbf{x}_{i},S_{i})=\\mathrm{softmax}\\left(\\frac{(W_{q}\\mathbf{x}_{i})K_{S_{i}}^{T}}{\\sqrt{d}}\\right)V_{S_{i}} (3)\n\nK S i = ( W k \u200b \ud835\udc31 j ) j \u2208 S i V S i = ( W v \u200b \ud835\udc31 j ) j \u2208 S i formulae-sequence subscript \ud835\udc3e subscript \ud835\udc46 \ud835\udc56 subscript subscript \ud835\udc4a \ud835\udc58 subscript \ud835\udc31 \ud835\udc57 \ud835\udc57 subscript \ud835\udc46 \ud835\udc56 subscript \ud835\udc49 subscript \ud835\udc46 \ud835\udc56 subscript subscript \ud835\udc4a \ud835\udc63 subscript \ud835\udc31 \ud835\udc57 \ud835\udc57 subscript \ud835\udc46 \ud835\udc56 K_{S_{i}}=\\Bigl{(}\\,W_{k}\\mathbf{x}_{j}\\,\\Bigr{)}_{j\\in S_{i}}\\quad V_{S_{i}}=\\Bigl{(}\\,W_{v}\\mathbf{x}_{j}\\,\\Bigr{)}_{j\\in S_{i}} (4)\n\nHere , , and represent the weight matrices which transform a given into a query, key, or value, and is the inner dimension of the queries and keys. The output at each position is a sum of the values weighted by the scaled dot-product similarity of the keys and queries. Full self-attention for autoregressive models defines , allowing every element to attend to all previous positions and its own position. Factorized self-attention instead has separate attention heads, where the th head defines a subset of the indices and lets . We are chiefly interested in efficient choices for the subset , where . Additionally, for the time being we consider valid choices of , where all input positions are connected to all future output positions across the steps of attention. For every pair, we set every such that can attend to through a path of locations with maximum length . Specifically, if is the path of indices, then , , , and so forth. These two criteria allow us keep the ability of Transformers to propagate signals from arbitrary input positions to arbitrary output positions in a constant number of steps, while reducing the total effective computation to . We also note that softening the validity criterion (for instance, having a series of only locally connected layers) may be a useful inductive bias for certain domains. In this work, we explore two factorizations for , which we describe in the following section, though we note that the same techniques can be easily extended to higher dimensions. 4.3 Two-dimensional factorized attention\n\nA natural approach to defining a factorized attention pattern in two dimensions is to have one head attend to the previous locations, and the other head attend to every th location, where is the stride and chosen to be close to , a method we call strided attention.",
    "sparsetransformer-2": "Formally, for and . This pattern can be visualized in Figure 3(b). This formulation is convenient if the data naturally has a structure that aligns with the stride, like images or some types of music. For data without a periodic structure, like text, however, we find that the network can fail to properly route information with the strided pattern, as spatial coordinates for an element do not necessarily correlate with the positions where the element may be most relevant in the future. In those cases, we instead use a fixed attention pattern (Figure 3(c)), where specific cells summarize previous locations and propagate that information to all future cells. Formally, , where the brackets denote the floor operation, and , where and is a hyperparameter. Concretely, if the stride is 128 and , then all future positions greater than 128 can attend to positions 120-128, all positions greater than 256 can attend to 248-256, and so forth. A fixed-attention pattern with limits the expressivity of the network significantly, as many representations in the network are only used for one block whereas a small number of locations are used by all blocks. We instead found choosing for typical values of to perform well, although it should be noted that this increases the computational cost of this method by in comparison to the strided attention. Additionally, we found that when using multiple heads, having them attend to distinct subblocks of length within the block of size was preferable to having them attend to the same subblock. In the subsequent section, we describe how to incorporate factorized attention into the Sparse Transformer architecture. 5 Sparse Transformer\n\nHere we fully describe the Sparse Transformer architecture, which is a modified version of the Transformer (Vaswani et al., 2017). 5.1 Factorized attention heads\n\nStandard dense attention simply performs a linear transformation of the function defined in Equation 2:\n\nattention \u200b ( X ) = W p \u22c5 attend \u200b ( X , S ) attention \ud835\udc4b \u22c5 subscript \ud835\udc4a \ud835\udc5d attend \ud835\udc4b \ud835\udc46 \\mathrm{attention}(X)=W_{p}\\cdot\\mathrm{attend}(X,S) (5)\n\nwhere denotes the post-attention weight matrix. The simplest technique for integrating factorized self-attention is to use one attention type per residual block, and interleave them sequentially or at a ratio determined as a hyperparameter:\n\nattention \u200b ( X ) = W p \u22c5 attend \u200b ( X , A ( r mod p ) ) attention \ud835\udc4b \u22c5 subscript \ud835\udc4a \ud835\udc5d attend \ud835\udc4b superscript \ud835\udc34 modulo \ud835\udc5f \ud835\udc5d \\mathrm{attention}(X)=W_{p}\\cdot\\mathrm{attend}(X,A^{(r\\bmod p)}) (6)\n\nHere is the index of the current residual block and is the number of factorized attention heads. A second approach is to have a single head attend to the locations of the pixels that both factorized heads would attend to, which we call a merged head:\n\nattention \u200b ( X ) = W p \u22c5 attend \u200b ( X , \u22c3 m = 1 p A ( m ) ) attention \ud835\udc4b \u22c5 subscript \ud835\udc4a \ud835\udc5d attend \ud835\udc4b superscript subscript \ud835\udc5a 1 \ud835\udc5d superscript \ud835\udc34 \ud835\udc5a \\mathrm{attention}(X)=W_{p}\\cdot\\mathrm{attend}(X,\\bigcup_{m=1}^{p}A^{(m)}) (7)\n\nThis is slightly more computationally intensive, but only by a constant factor. A third approach is to use multi-head attention (Vaswani et al., 2017), where attention products are computed in parallel, then concatenated along the feature dimension:\n\nattention \u200b ( X ) = W p \u200b ( attend \u200b ( X , A ) ( i ) ) i \u2208 { 1 , \u2026 , n h } attention \ud835\udc4b subscript \ud835\udc4a \ud835\udc5d subscript attend superscript \ud835\udc4b \ud835\udc34 \ud835\udc56 \ud835\udc56 1 \u2026 subscript \ud835\udc5b \u210e \\mathrm{attention}(X)=W_{p}\\Bigl{(}\\mathrm{attend}(X,A)^{(i)}\\Bigr{)}_{i\\in\\{1,...,n_{h}\\}} (8)\n\nHere, the can be the separate attention patterns, the merged patterns, or interleaved as in Eq. 2. Also, the dimensions of the weight matrices inside the function are reduced by a factor of , such that the number of parameters are invariant across values of . We typically find multiple heads to work well, though for extremely long sequences where the attention dominates the computation time, it is more worthwhile to perform them one at a time and sequentially. 5.2 Scaling to hundreds of layers\n\nWe found that Transformers were difficult to train with many layers, as noted by (Al-Rfou et al., 2018). Instead of incorporating auxillary losses, we adopted the following architectural changes. First, we use the pre-activation residual block of (He et al., 2016), defining a network of layers in the following way:\n\nH 0 = embed \u200b ( X , W e ) subscript \ud835\udc3b 0 embed \ud835\udc4b subscript \ud835\udc4a \ud835\udc52 H_{0}=\\mathrm{embed}(X,W_{e}) (9)\n\nH k = H k \u2212 1 + resblock \u200b ( H k \u2212 1 ) subscript \ud835\udc3b \ud835\udc58 subscript \ud835\udc3b \ud835\udc58 1 resblock subscript \ud835\udc3b \ud835\udc58 1 H_{k}=H_{k-1}+\\mathrm{resblock}(H_{k-1}) (10)\n\ny = softmax \u200b ( norm \u200b ( H N ) \u200b W o \u200b u \u200b t ) \ud835\udc66 softmax norm subscript \ud835\udc3b \ud835\udc41 subscript \ud835\udc4a \ud835\udc5c \ud835\udc62 \ud835\udc61 y=\\mathrm{softmax}(\\mathrm{norm}(H_{N})W_{out}) (11)\n\nwhere is a function we describe in the next section, is a weight matrix, and normalizes the input to the attention block and a positionwise feedforward network in the following way:\n\na \u200b ( H ) = dropout \u200b ( attention \u200b ( norm \u200b ( H ) ) ) \ud835\udc4e \ud835\udc3b dropout attention norm \ud835\udc3b a(H)=\\mathrm{dropout}(\\mathrm{attention}(\\mathrm{norm}(H))) (12)\n\nb \u200b ( H ) = dropout \u200b ( ff \u200b ( norm \u200b ( H + a \u200b ( H ) ) ) ) \ud835\udc4f \ud835\udc3b dropout ff norm \ud835\udc3b \ud835\udc4e \ud835\udc3b b(H)=\\mathrm{dropout}(\\mathrm{ff}(\\mathrm{norm}(H+a(H)))) (13)\n\nresblock \u200b ( H ) = a \u200b ( H ) + b \u200b ( H ) resblock \ud835\udc3b \ud835\udc4e \ud835\udc3b \ud835\udc4f \ud835\udc3b \\mathrm{resblock}(H)=a(H)+b(H) (14)\n\nThe function denotes Layer Normalization (Ba et al., 2016), and . Our choice of is the Gaussian Error Linear Unit (Hendrycks & Gimpel, 2016), , as used in (Radford et al., 2018). The output dimension of is 4.0 times the input dimension, unless otherwise noted. Observe that is the sum of applications of functions and , and thus each function block receives a gradient directly from the output layer . We scale the initialization of and in Eq. 5 by to keep the ratio of input embedding scale to residual block scale invariant across values of . 5.3 Modeling diverse data types\n\nIn addition to the embedding of input symbols, positional embeddings are typically used in Transformers and other location-agnostic architectures to encode the spatial relationships of data (Gehring et al., 2017), (Parmar et al., 2018). We found using learned embeddings which either encoded the structure of the data or the factorized attention patterns were important for performance of our models. We added either or embeddings to each input location, where refers to the number of dimensions of the data, and is the number of dimensions of the factorized attention. If is the one-hot encoded th element in the sequence, and represents the one-hot encoded position of in the th dimension (), then:\n\nembed \u200b ( X , W e ) = ( \ud835\udc31 i \u200b W e + \u2211 j = 1 n e \u200b m \u200b b \ud835\udc28 i ( j ) \u200b W j ) \ud835\udc31 i \u2208 X embed \ud835\udc4b subscript \ud835\udc4a \ud835\udc52 subscript subscript \ud835\udc31 \ud835\udc56 subscript \ud835\udc4a \ud835\udc52 superscript subscript \ud835\udc57 1 subscript \ud835\udc5b \ud835\udc52 \ud835\udc5a \ud835\udc4f superscript subscript \ud835\udc28 \ud835\udc56 \ud835\udc57 subscript \ud835\udc4a \ud835\udc57 subscript \ud835\udc31 \ud835\udc56 \ud835\udc4b \\mathrm{embed}(X,W_{e})=\\left(\\mathbf{x}_{i}W_{e}+\\sum_{j=1}^{n_{emb}}\\mathbf{o}_{i}^{(j)}W_{j}\\right)_{\\mathbf{x}_{i}\\in X} (15)\n\nFor images, we used data embeddings, where for the row, column, and channel location of each input byte. For text and audio, we used two-dimensional attention embeddings, where and the index corresponds to each position\u2019s row and column index in a matrix of width equal to the stride. 5.4 Saving memory by recomputing attention weights\n\nGradient checkpointing has been shown to be effective in reducing the memory requirements of training deep neural networks (Chen et al., 2016), (Gruslys et al., 2016). It is worth noting, however, that this technique is particularly effective for self-attention layers when long sequences are processed, as memory usage is high for these layers relative to the cost of computing them. Using recomputation alone, we are able to train dense attention networks with hundreds of layers on sequence lengths of 16,384, which would be infeasible on modern hardware otherwise. In our experiments, we recompute the attention and feed-forward blocks during the backwards pass. To simplify our implementation, we do not apply dropout within the attention blocks, as in (Vaswani et al., 2017), and instead only apply it at the end of each residual addition, as seen in Figure 4. 5.5 Efficient block-sparse attention kernels\n\nThe sparse attention masks in 3(b) and 3(c) can be efficiently computed by slicing out sub-blocks from the query, key, and value matrices and computing the product in blocks. Attention over a local window can be computed as-is, whereas attention with a stride of can be computed by transposing the matrix and computing a local window. Fixed attention positions can be aggregated and computed in blocks. In order to ease experimentation, we implemented a set of GPU kernels which efficiently perform these operations. The softmax operation is fused into a single kernel and also uses registers to eliminate loading the input data more than once, allowing it to run at the same speed as a simple nonlinearity. The upper triangle of the attention matrix is never computed, moreover, removing the need for the negative bias term of (Vaswani et al., 2017) and halving the number of operations to be performed. 5.6 Mixed-precision training\n\nWe store network weights in single-precision floating-point, but otherwise compute network activations and gradients in half-precision, as in (Micikevicius et al., 2017). This accelerates our training due to the usage of Tensor Core operations on the V100 GPU. During the gradient calculation, we use dynamic loss scaling to reduce numerical underflow, and we communicate half-precision gradients when averaging across multiple GPUs. When sampling, we cast the queries and keys to single-precision, as the query-key product can sometimes overflow the max value of half-precision. 6 Training\n\nWe use the Adam optimizer with a linear warmup of 5000 iterations and a gradient clipping of 1.0, both of which we found important for model stability. We use a weight decay penalty of 0.01. We annealed the learning rate according to a cosine decay as in (Radford et al., 2018). We train on 8 V100 GPUs unless otherwise noted. All embeddings are of a constant dimension , usually one of . By default, all linear transforms are to the same dimension, with the exception of the feed-forward network, which projects the input to , unless we use \u201chalf-size\u201d transformations, where it is . Additionally, sometimes we halve the size of the query and key transformations. We initialize the token embedding from and the position embeddings from . Within the attention and feedforward components, all biases are initialized to 0 and all weights are initialized from where is the fan-in dimension. The weight matrix for the output logits was initialized to 0. 7 Experiments\n\nWe empirically test our architecture on density modeling tasks including natural images, text, and raw audio. A summary of the results is available in Table 1. We found that, in addition to running significantly faster than full attention, sparse patterns also converged to lower error, as shown in Table 2. This may point to a useful inductive bias from the sparsity patterns we introduced, or an underlying optimization issue with full attention. 7.1 CIFAR-10\n\nWe train strided Sparse Transformers on CIFAR-10 images represented as sequences of 3072 bytes. Models have 2 heads, 128 layers, = 256, half-size feedforward network and query-key projections, and are trained for 120 epochs with a learning rate of 0.00035 and a dropout rate of 0.25 until validation error stops decreasing. We use 48000 examples for training and 2000 examples for validation, evaluating the performance of our best models on the test set. The model achieves 2.80 bits per dim ( over seeds 1, 2, 3) versus the previous state of the art (Chen et al., 2017). We also compare performance of different attention patterns in Table 2. The strided attention reaches the lowest error in the shortest amount of time, surpassing the error of dense attention at 2.82 bits per dim. 7.2 Text\n\nIn order to assess Sparse Transformers on datasets without a strong two-dimensional structure, we trained models on the EnWik8 dataset, which represents the first bytes of Wikipedia and contains a great degree of variability in periodic structure. We trained with a context length of 12,288, which is longer than previous approaches. We trained on the first 90 million tokens and reserved the last 10 million for validation and test. We used 30-layer fixed Sparse Transformers with 8 heads, = 512, and a dropout rate of . We trained for 80 epochs until validation loss stopped decreasing. We used a stride of 128, , and merged the factorized attention heads. Our best model reached 0.99 bits per dim ( over seeds 1, 2, 3), surpassing the 1.03 state-of-the-art for a similarly-sized Transformer-XL (Dai et al., 2018) and matching the 0.99 of a model trained with more than double the number of parameters. Strided attention failed to do well on this dataset, whereas fixed patterns were able to recover and surpass the performance of dense attention, as listed in Table 2. Additionally, during evaluation of the test set, we modified the minimum context length the network could use by evaluating fewer tokens in parallel. We saw monotonic increases in performance with more tokens used, up to 12,160 out of the 12,288 tokens used for training (see Table 3), which suggests the network is effectively incorporating long-term dependencies. 7.3 ImageNet 64x64\n\nIn order to test the ability of the model to learn long range dependencies and scale to a large dataset, we train on the version of downsampled ImageNet released by (Oord et al., 2016) and evaluate on the validation set. We used a 48 layer strided Sparse Transformer with 16 attention heads and = 512, totaling 152 million parameters. We used a stride of 128, a dropout of 0.01, and trained for 70 epochs, which took 7 days on 64 V100 GPUs. Our model achieves a loss of 3.44 bits per dim (3.437 across 1 run), in comparison to the previous 3.52 (Menick & Kalchbrenner, 2018). Additionally, we generate unconditional samples (Figure 5) at an unmodified softmax temperature of 1.0, from the model and from one trained with twice the layers (300M parameters total).",
    "sparsetransformer-3": "We include here samples from the 300M parameter model. On visual assessment we find no artifacts from the sparsity patterns and see evidence of long-term structure in most images. 7.4 Classical music from raw audio\n\nTo test the extent to which Sparse Transformers are able to scale to very long contexts, we trained models on the classical music dataset released by (Dieleman et al., 2018). As details of the dataset processing are unavailable, we omit any direct comparison to other work and instead study what size of Sparse Transformer we can train with increasing context size. For each sequence length, we attempted to train the largest model which could entirely fit into 16GB V100 accelerators without model parallelism. Overall, we found that increasing the sequence length by a factor of 4 requires a reduction in model capacity of approximately . Thus we found we could use factorized self-attention on sequences over 1 million timesteps long, albeit with extremely few parameters (3 million). Samples are available for sequences of length 65,536, which correspond to around 5 seconds of generated audio at 12kHz. The samples clearly demonstrate global coherence over the sampled period, and exhibit a variety of play styles and tones, swapping from rhythmic playing to forceful. To listen to samples, visit https://openai.com/blog/sparse-transformer. Sample quality quickly degrades for greater sequence lengths due to reduced model capacity. 8 Conclusion\n\nWe introduced Sparse Transformers and showed they attain equivalent or better performance on density modeling of long sequences than standard Transformers while requiring significantly fewer operations. This performance is state-of-the-art in images and text and is easily adaptable to raw audio. The model demonstrates usage of long-term context and generates globally coherent samples. 9 Acknowledgements\n\nWe would like to thank Ashish Vaswani for insightful discussions during the genesis of the project. We also thank Joshua Meier and Mark Chen for helpful discussions, and Johannes Otterbach, Prafulla Dhariwal, and David Luan for feedback on drafts of this paper. References\n\nAl-Rfou et al. (2018) Al-Rfou, R., Choe, D., Constant, N., Guo, M., and Jones, L. Character-level language modeling with deeper self-attention. arXiv preprint arXiv:1808.04444, 2018. Ba et al. (2016) Ba, J. L., Kiros, J. R., and Hinton, G. E. Layer normalization. arXiv preprint arXiv:1607.06450, 2016. Britz et al. (2017) Britz, D., Guan, M. Y., and Luong, M.-T. Efficient attention using a fixed-size memory representation. arXiv preprint arXiv:1707.00110, 2017. Chen et al. (2016) Chen, T., Xu, B., Zhang, C., and Guestrin, C. Training deep nets with sublinear memory cost.",
    "sparsetransformer-4": "arXiv preprint arXiv:1604.06174, 2016. Chen et al. (2017) Chen, X., Mishra, N., Rohaninejad, M., and Abbeel, P. Pixelsnail: An improved autoregressive generative model.",
    "sparsetransformer-5": "arXiv preprint arXiv:1712.09763, 2017. Chiu & Raffel (2017) Chiu, C.-C. and Raffel, C. Monotonic chunkwise attention. arXiv preprint arXiv:1712.05382, 2017. Dai et al. (2018) Dai, Z., Yang, Z., Yang, Y., Cohen, W. W., Carbonell, J., Le, Q. V., and Salakhutdinov, R. Transformer-xl: Language modeling with longer-term dependency.",
    "sparsetransformer-6": "2018. Dieleman et al. (2018) Dieleman, S., van den Oord, A., and Simonyan, K. The challenge of realistic music generation: modelling raw audio at scale.",
    "sparsetransformer-7": "In Advances in Neural Information Processing Systems, pp. 8000\u20138010, 2018. Gehring et al. (2017) Gehring, J., Auli, M., Grangier, D., Yarats, D., and Dauphin, Y. N. Convolutional sequence to sequence learning. arXiv preprint arXiv:1705.03122, 2017. Gruslys et al. (2016) Gruslys, A., Munos, R., Danihelka, I., Lanctot, M., and Graves, A. Memory-efficient backpropagation through time.",
    "sparsetransformer-8": "In Advances in Neural Information Processing Systems, pp. 4125\u20134133, 2016. He et al. (2016) He, K., Zhang, X., Ren, S., and Sun, J. Identity mappings in deep residual networks. arXiv preprint arXiv:1603.05027, 2016. Hendrycks & Gimpel (2016) Hendrycks, D. and Gimpel, K. Bridging nonlinearities and stochastic regularizers with gaussian error linear units.",
    "sparsetransformer-9": "arXiv preprint arXiv:1606.08415, 2016. Huang et al. (2018) Huang, C.-Z. A., Vaswani, A., Uszkoreit, J., Shazeer, N., Hawthorne, C., Dai, A.",
    "sparsetransformer-10": "M., Hoffman, M. D., and Eck, D. An improved relative self-attention mechanism for transformer with application to music generation. arXiv preprint arXiv:1809.04281, 2018. Jozefowicz et al. (2016) Jozefowicz, R., Vinyals, O., Schuster, M., Shazeer, N., and Wu, Y. Exploring the limits of language modeling. arXiv preprint arXiv:1602.02410, 2016. Kingma & Dhariwal (2018) Kingma, D. P. and Dhariwal, P. Glow: Generative flow with invertible 1x1 convolutions.",
    "sparsetransformer-11": "In Advances in Neural Information Processing Systems, pp. 10236\u201310245, 2018. Koutnik et al. (2014) Koutnik, J., Greff, K., Gomez, F., and Schmidhuber, J. A clockwork rnn.",
    "sparsetransformer-12": "arXiv preprint arXiv:1402.3511, 2014. Liu et al. (2018) Liu, P. J., Saleh, M., Pot, E., Goodrich, B., Sepassi, R., Kaiser, L., and Shazeer, N. Generating wikipedia by summarizing long sequences.",
    "sparsetransformer-13": "arXiv preprint arXiv:1801.10198, 2018. Mehri et al. (2016) Mehri, S., Kumar, K., Gulrajani, I., Kumar, R., Jain, S., Sotelo, J., Courville, A., and Bengio, Y. Samplernn: An unconditional end-to-end neural audio generation model. arXiv preprint arXiv:1612.07837, 2016. Menick & Kalchbrenner (2018) Menick, J. and Kalchbrenner, N. Generating high fidelity images with subscale pixel networks and multidimensional upscaling. arXiv preprint arXiv:1812.01608, 2018. Micikevicius et al. (2017) Micikevicius, P., Narang, S., Alben, J., Diamos, G., Elsen, E., Garcia, D., Ginsburg, B., Houston, M., Kuchaev, O., Venkatesh, G., et al. Mixed precision training. arXiv preprint arXiv:1710.03740, 2017. Oord et al. (2016) Oord, A. v. d., Kalchbrenner, N., and Kavukcuoglu, K. Pixel recurrent neural networks. arXiv preprint arXiv:1601.06759, 2016. Parmar et al. (2018) Parmar, N., Vaswani, A., Uszkoreit, J., Kaiser, \u0141., Shazeer, N., and Ku, A. Image transformer. arXiv preprint arXiv:1802.05751, 2018. Radford et al. (2018) Radford, A., Narasimhan, K., Salimans, T., and Sutskever, I. Improving language understanding by generative pre-training. URL https://s3-us-west-2. amazonaws. com/openai-assets/research-covers/language-unsupervised/language_ understanding_paper. pdf, 2018. Reed et al. (2017) Reed, S., Oord, A. v. d., Kalchbrenner, N., Colmenarejo, S. G., Wang, Z., Belov, D., and de Freitas, N. Parallel multiscale autoregressive density estimation. arXiv preprint arXiv:1703.03664, 2017. Salimans et al. (2017) Salimans, T., Karpathy, A., Chen, X., and Kingma, D. P. Pixelcnn++: Improving the pixelcnn with discretized logistic mixture likelihood and other modifications. arXiv preprint arXiv:1701.05517, 2017. Sukhbaatar et al. (2015) Sukhbaatar, S., Weston, J., Fergus, R., et al. End-to-end memory networks.",
    "sparsetransformer-14": "In Advances in neural information processing systems, pp. 2440\u20132448, 2015. Van Den Oord et al. (2016) Van Den Oord, A., Dieleman, S., Zen, H., Simonyan, K., Vinyals, O., Graves, A., Kalchbrenner, N., Senior, A., and Kavukcuoglu, K. Wavenet: A generative model for raw audio.",
    "sparsetransformer-15": "CoRR abs/1609.03499, 2016. Vaswani et al. (2017) Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, \u0141., and Polosukhin, I. Attention is all you need. In Advances in Neural Information Processing Systems, pp. 5998\u20136008, 2017. \u25c4 Feeling lucky? Conversion report Report an issue View original on arXiv\u25ba\n\nCopyright Privacy Policy\n\nGenerated on Tue Mar 19 04:22:00 2024 by LaTeXML"
}