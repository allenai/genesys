{
    "hopfield-0": "# Hopfield NETWORKS IS All You NeEd \n\nHubert Ramsauer* Bernhard Sch\u00e4f** Johannes Lehner* Philipp Seidl*<br>Michael Widrich* Thomas Adler* Lukas Gruber* Markus Holzleitner*<br>Milena Pavlovi\u0107 ${ }^{\\ddagger} \\S$ Geir Kjetil Sandve ${ }^{\\S}$ Victor Greiff ${ }^{\\ddagger}$ David Kreil ${ }^{\\dagger}$<br>Michael Kopp ${ }^{\\dagger}$ G\u00fcnter Klambauer ${ }^{*}$ Johannes Brandstetter* ${ }^{*}$ Sepp Hochreiter* ${ }^{*}$<br>*ELLIS Unit Linz, LIT AI Lab, Institute for Machine Learning,<br>Johannes Kepler University Linz, Austria<br>${ }^{\\dagger}$ Institute of Advanced Research in Artificial Intelligence (IARAI)<br>${ }^{\\ddagger}$ Department of Immunology, University of Oslo, Norway<br>${ }^{\\S}$ Department of Informatics, University of Oslo, Norway\n\n\n#### Abstract\n\nWe introduce a modern Hopfield network with continuous states and a corresponding update rule.",
    "hopfield-1": "The new Hopfield network can store exponentially (with the dimension of the associative space) many patterns, retrieves the pattern with one update, and has exponentially small retrieval errors. It has three types of energy minima (fixed points of the update): (1) global fixed point averaging over all patterns, (2) metastable states averaging over a subset of patterns, and (3) fixed points which store a single pattern. The new update rule is equivalent to the attention mechanism used in transformers. This equivalence enables a characterization of the heads of transformer models. These heads perform in the first layers preferably global averaging and in higher layers partial averaging via metastable states. The new modern Hopfield network can be integrated into deep learning architectures as layers to allow the storage of and access to raw input data, intermediate results, or learned prototypes. These Hopfield layers enable new ways of deep learning, beyond fully-connected, convolutional, or recurrent networks, and provide pooling, memory, association, and attention mechanisms. We demonstrate the broad applicability of the Hopfield layers across various domains. Hopfield layers improved state-of-the-art on three out of four considered multiple instance learning problems as well as on immune repertoire classification with several hundreds of thousands of instances. On the UCI benchmark collections of small classification tasks, where deep learning methods typically struggle, Hopfield layers yielded a new state-ofthe-art when compared to different machine learning methods. Finally, Hopfield layers achieved state-of-the-art on two drug design datasets. The implementation is available at: https://github.com/ml-jku/hopfield-layers\n\n\n## 1 INTRODUCTION\n\nThe deep learning community has been looking for alternatives to recurrent neural networks (RNNs) for storing information. For example, linear memory networks use a linear autoencoder for sequences as a memory (Carta et al., 2020). Additional memories for RNNs like holographic reduced representations (Danihelka et al., 2016), tensor product representations (Schlag \\& Schmidhuber, 2018; Schlag et al., 2019) and classical associative memories (extended to fast weight approaches) (Schmidhuber, 1992; Ba et al., 2016a;b; Zhang \\& Zhou, 2017; Schlag et al., 2021) have been suggested. Most approaches to new memories are based on attention. The neural Turing machine (NTM) is equipped with an external memory and an attention process (Graves et al., 2014). Memory networks (Weston et al., 2014) use an arg max attention by first mapping a query and patterns into a space and then retrieving the pattern with the largest dot product. End to end memory networks (EMN) make this attention scheme differentiable by replacing arg max through a softmax (Sukhbaatar et al., 2015a;b). EMN with dot products became very popular and implement a key-value attention (Daniluk et al., 2017) for self-attention. An enhancement of EMN is the transformer (Vaswani et al., 2017a;b) and its\nextensions (Dehghani et al., 2018). The transformer has had a great impact on the natural language processing (NLP) community, in particular via the BERT models (Devlin et al., 2018; 2019). Contribution of this work: (i) introducing novel deep learning layers that are equipped with a memory via modern Hopfield networks, (ii) introducing a novel energy function and a novel update rule for continuous modern Hopfield networks that are differentiable and typically retrieve patterns after one update. Differentiability is required for gradient descent parameter updates and retrieval with one update is compatible with activating the layers of deep networks. We suggest using modern Hopfield networks to store information or learned prototypes in different layers of neural networks. Binary Hopfield networks were introduced as associative memories that can store and retrieve patterns (Hopfield, 1982). A query pattern can retrieve the pattern to which it is most similar or an average over similar patterns. Hopfield networks seem to be an ancient technique, however, new energy functions improved their properties. The stability of spurious states or metastable states was sensibly reduced (Barra et al., 2018). The largest and most impactful successes are reported on increasing the storage capacity of Hopfield networks. In a $d$-dimensional space, the standard Hopfield model can store $d$ uncorrelated patterns without errors but only $C d / \\log (d)$ random patterns with $C<1 / 2$ for a fixed stable pattern or $C<1 / 4$ if all patterns are stable (McEliece et al., 1987). The same bound holds for nonlinear learning rules (Mazza, 1997). Using tricks-of-trade and allowing small retrieval errors, the storage capacity is about $0.138 d$ (Crisanti et al., 1986; Hertz et al., 1991; Torres et al., 2002). If the learning rule is not related to the Hebb rule, then up to $d$ patterns can be stored (Abu-Mostafa \\& StJacques, 1985). For Hopfield networks with non-zero diagonal matrices, the storage can be increased to $C d \\log (d)$ (Folli et al., 2017). In contrast to the storage capacity, the number of energy minima (spurious states, stable states) of Hopfield networks is exponential in $d$ (Tanaka \\& Edwards, 1980; Bruck \\& Roychowdhury, 1990; Wainrib \\& Touboul, 2013). The standard binary Hopfield network has an energy function that can be expressed as the sum of interaction functions $F$ with $F(x)=x^{2}$. Modern Hopfield networks, also called \"dense associative memory\" (DAM) models, use an energy function with interaction functions of the form $F(x)=x^{n}$ and, thereby, achieve a storage capacity proportional to $d^{n-1}$ (Krotov \\& Hopfield, 2016; 2018). The energy function of modern Hopfield networks makes them robust against adversarial attacks (Krotov \\& Hopfield, 2018). Modern binary Hopfield networks with energy functions based on interaction functions of the form $F(x)=\\exp (x)$ even lead to storage capacity of $2^{d / 2}$, where all stored binary patterns are fixed points but the radius of attraction vanishes (Demircigil et al., 2017). However, in order to integrate Hopfield networks into deep learning architectures, it is necessary to make them differentiable, that is, we require continuous Hopfield networks (Hopfield, 1984; Koiran, 1994). Therefore, we generalize the energy function of Demircigil et al. (2017) that builds on exponential interaction functions to continuous patterns and states and obtain a new modern Hopfield network. We also propose a new update rule which ensures global convergence to stationary points of the energy (local minima or saddle points). We prove that our new modern Hopfield network typically retrieves patterns in one update step ( $\\epsilon$-close to the fixed point) with an exponentially low error and has a storage capacity proportional to $c^{\\frac{d-1}{4}}$ (reasonable settings for $c=1.37$ and $c=3.15$ are given in Theorem 3). The retrieval of patterns with one update is important to integrate Hopfield networks in deep learning architectures, where layers are activated only once. Surprisingly, our new update rule is also the key-value attention as used in transformer and BERT models (see Fig. 1). Our modern Hopfield networks can be integrated as a new layer in deep learning architectures for pooling, memory, prototype learning, and attention. We test these new layers on different benchmark datasets and tasks like immune repertoire classification. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-02.jpg?height=209&width=1389&top_left_y=2129&top_left_x=368)\n\nFigure 1: We generalize the energy of binary modern Hopfield networks to continuous states while keeping fast convergence and storage capacity properties. We also propose a new update rule that minimizes the energy. The new update rule is the attention mechanism of the transformer. Formulae are modified to express softmax as row vector. \" $=$ \"-sign means \"keeps the properties\". ## 2 Modern Hopfield Nets with Continuous States\n\nNew energy function for continuous state Hopfield networks. In order to integrate modern Hopfield networks into deep learning architectures, we have to make them continuous. To allow for continuous states, we propose a new energy function that is a modification of the energy of modern Hopfield networks (Demircigil et al., 2017). We also propose a new update rule which can be proven to converge to stationary points of the energy (local minima or saddle points). We have $N$ stored (key) patterns $\\boldsymbol{x}_{i} \\in \\mathbb{R}^{d}$ represented by the matrix $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ with the largest pattern $M=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|$. The state (query) pattern is $\\boldsymbol{\\xi} \\in \\mathbb{R}^{d}$. For exponential interaction functions, we need the $\\log$-sum-exp function (lse) for $0<\\beta$\n\n$$\n\\operatorname{lse}(\\beta, \\boldsymbol{x})=\\beta^{-1} \\log \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta x_{i}\\right)\\right)\n$$\n\nwhich is convex (see appendix Eq. (461), and Lemma A22). The energy function E of the modern Hopfield networks for binary patterns $\\boldsymbol{x}_{i}$ and a binary state pattern $\\boldsymbol{\\xi}$ is $\\mathrm{E}=-\\sum_{i=1}^{N} F\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\\right)$ (Krotov \\& Hopfield, 2016). Here, $F(x)=x^{n}$ is the interaction function, where $n=2$ gives the classical Hopfield network. The storage capacity is proportional to $d^{n-1}$ (Krotov \\& Hopfield, 2016). This model was generalized by Demircigil et al. (2017) to exponential interaction functions $F(x)=$ $\\exp (x)$ which gives the energy $\\mathrm{E}=-\\exp \\left(\\operatorname{lse}\\left(1, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)$. This energy leads to an exponential storage capacity of $N=2^{d / 2}$ for binary patterns. Furthermore, with a single update, the fixed point is recovered with high probability for random patterns. However, still this modern Hopfield network has binary states. We generalize this energy function to continuous-valued patterns while keeping the properties of the modern Hopfield networks like the exponential storage capacity and the extremely fast convergence (see Fig. 1). For the new energy we take the logarithm of the negative energy of modern Hopfield networks and add a quadratic term of the current state. The quadratic term ensures that the norm of the state vector $\\boldsymbol{\\xi}$ remains finite and the energy is bounded. Classical Hopfield networks do not require to bound the norm of their state vector, since it is binary and has fixed length. We define the novel energy function $E$ as\n\n$$\n\\mathrm{E}=-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\log N+\\frac{1}{2} M^{2}\n$$\n\nWe have $0 \\leqslant \\mathrm{E} \\leqslant 2 M^{2}$ (see appendix Lemma A1). Using $\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$, we define a novel update rule (see Fig. 1):\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=f(\\boldsymbol{\\xi})=\\boldsymbol{X} \\boldsymbol{p}=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nThe next theorem states that the update rule Eq. (3) converges globally. The proof uses the ConcaveConvex Procedure (CCCP) (Yuille \\& Rangarajan, 2002; 2003), which is equivalent to Legendre minimization (Rangarajan et al., 1996; 1999) algorithms (Yuille \\& Rangarajan, 2003). Theorem 1. The update rule Eq. (3) converges globally: For $\\boldsymbol{\\xi}^{t+1}=f\\left(\\boldsymbol{\\xi}^{t}\\right)$, the energy $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right) \\rightarrow$ $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{*}\\right)$ for $t \\rightarrow \\infty$ and a fixed point $\\boldsymbol{\\xi}^{*}$.",
    "hopfield-2": "Proof. The update rule in Eq. (3) is the CCCP for minimizing the energy E, which is the sum of the convex $1 / 2 \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}$ and concave -lse (see details in appendix Theorem 1). Theorem 2 in Yuille \\& Rangarajan (2002) yields the global convergence property. Also, in Theorem 2 in Sriperumbudur \\& Lanckriet (2009) the global convergence of CCCP is proven via a rigorous analysis using Zangwill's global convergence theory of iterative algorithms. The global convergence theorem only assures that for the energy $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right) \\rightarrow \\mathrm{E}\\left(\\boldsymbol{\\xi}^{*}\\right)$ for $t \\rightarrow \\infty$ but not $\\boldsymbol{\\xi}^{t} \\rightarrow \\boldsymbol{\\xi}^{*}$. The next theorem strengthens Zangwill's global convergence theorem (Meyer, 1976) and gives convergence results similar to those known for expectation maximization (Wu, 1983). Theorem 2. For the iteration Eq. (3) we have $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right) \\rightarrow \\mathrm{E}\\left(\\boldsymbol{\\xi}^{*}\\right)=\\mathrm{E}^{*}$ as $t \\rightarrow \\infty$, for some stationary point $\\boldsymbol{\\xi}^{*}$. Furthermore, $\\left\\|\\boldsymbol{\\xi}^{t+1}-\\boldsymbol{\\xi}^{t}\\right\\| \\rightarrow 0$ and either $\\left\\{\\boldsymbol{\\xi}^{t}\\right\\}_{t=0}^{\\infty}$ converges or, in the other case, the set of limit points of $\\left\\{\\boldsymbol{\\xi}^{t}\\right\\}_{t=0}^{\\infty}$ is a connected and compact subset of $\\mathcal{L}\\left(\\mathrm{E}^{*}\\right)$, where $\\mathcal{L}(a)=\\{\\boldsymbol{\\xi} \\in \\mathcal{L} \\mid \\mathrm{E}(\\boldsymbol{\\xi})=a\\}$ and $\\mathcal{L}$ is the set of stationary points of the iteration Eq. (3). If $\\mathcal{L}\\left(\\mathrm{E}^{*}\\right)$ is finite, then any sequence $\\left\\{\\boldsymbol{\\xi}^{t}\\right\\}_{t=0}^{\\infty}$ generated by the iteration Eq. (3) converges to some $\\boldsymbol{\\xi}^{*} \\in \\mathcal{L}\\left(\\mathrm{E}^{*}\\right)$. For a proof, see appendix Theorem 2. Therefore, all the limit points of any sequence generated by the iteration Eq. (3) are stationary points (local minima or saddle points) of the energy function E. Either the iteration converges or, otherwise, the set of limit points is a connected and compact set. The next theorem gives the results on the storage capacity of our new continuous state modern Hopfield network. We first define what we mean by storing and retrieving patterns using a modern Hopfield network with continuous states. Definition 1 (Pattern Stored and Retrieved). We assume that around every pattern $\\boldsymbol{x}_{i}$ a sphere $\\mathrm{S}_{i}$ is given. We say $\\boldsymbol{x}_{i}$ is stored if there is a single fixed point $\\boldsymbol{x}_{i}^{*} \\in \\mathrm{S}_{i}$ to which all points $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$ converge, and $\\mathrm{S}_{i} \\cap \\mathrm{S}_{j}=\\emptyset$ for $i \\neq j$. We say $\\boldsymbol{x}_{i}$ is retrieved for a given $\\epsilon$ if iteration (update rule) Eq. (3) gives a point $\\tilde{\\boldsymbol{x}}_{i}$ that is at least $\\epsilon$-close to the single fixed point $\\boldsymbol{x}_{i}^{*} \\in \\mathrm{S}_{i}$. The retrieval error is $\\left\\|\\tilde{\\boldsymbol{x}}_{i}-\\boldsymbol{x}_{i}\\right\\|$. As with classical Hopfield networks, we consider patterns on the sphere, i.e. patterns with a fixed norm. For randomly chosen patterns, the number of patterns that can be stored is exponential in the dimension $d$ of the space of the patterns $\\left(\\boldsymbol{x}_{i} \\in \\mathbb{R}^{d}\\right)$. Theorem 3. We assume a failure probability $0<p \\leqslant 1$ and randomly chosen patterns on the sphere with radius $M:=K \\sqrt{d-1}$. We define $a:=\\frac{2}{d-1}\\left(1+\\ln \\left(2 \\beta K^{2} p(d-1)\\right)\\right), b:=\\frac{2 K^{2} \\beta}{5}$, and $c:=\\frac{b}{W_{0}(\\exp (a+\\ln (b))}$, where $W_{0}$ is the upper branch of the Lambert $W$ function (Olver et al., 2010, (4.13)), and ensure $c \\geq\\left(\\frac{2}{\\sqrt{p}}\\right)^{\\frac{4}{d-1}}$. Then with probability $1-p$, the number of random patterns that can be stored is\n\n$$\nN \\geq \\sqrt{p} c^{\\frac{d-1}{4}}\n$$\n\nTherefore it is proven for $c \\geq 3.1546$ with $\\beta=1, K=3, d=20$ and $p=0.001(a+\\ln (b)>1.27)$ and proven for $c \\geq 1.3718$ with $\\beta=1, K=1, d=75$, and $p=0.001(a+\\ln (b)<-0.94)$. For a proof, see appendix Theorem A5. The next theorem states that the update rule typically retrieves patterns after one update. Retrieval of a pattern $\\boldsymbol{x}_{i}$ for fixed point $\\boldsymbol{x}_{i}^{*}$ and query $\\boldsymbol{\\xi}$ is defined via an $\\epsilon$ by $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|<\\epsilon$, that is, the update is $\\epsilon$-close to the fixed point. Retrieval with one update is crucial to integrate modern Hopfield networks into deep learning architectures, where layers are activated only once. First we need the concept of separation of a pattern. For pattern $\\boldsymbol{x}_{i}$ we define its separation $\\Delta_{i}$ to other patterns by:\n\n$$\n\\Delta_{i}:=\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\max _{j, j \\neq i} \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\n$$\n\nThe update rule retrieves patterns with one update for well separated patterns, that is, patterns with large $\\Delta_{i}$. Theorem 4. With query $\\boldsymbol{\\xi}$, after one update the distance of the new point $f(\\boldsymbol{\\xi})$ to the fixed point $\\boldsymbol{x}_{i}^{*}$ is exponentially small in the separation $\\Delta_{i}$. The precise bounds using the Jacobian $\\mathrm{J}=\\frac{\\partial f(\\boldsymbol{\\xi})}{\\partial \\boldsymbol{\\xi}}$ and its value $\\mathrm{J}^{m}$ in the mean value theorem are:\n\n$$\n\\begin{aligned}\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\| & \\leqslant\\left\\|J^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\| \\\\\n\\left\\|J^{m}\\right\\|_{2} & \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n\\end{aligned}\n$$\n\nFor given $\\epsilon$ and sufficient large $\\Delta_{i}$, we have $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|<\\epsilon$, that is, retrieval with one update. See proof in appendix Theorem A8. At the same time, the retrieval error decreases exponentially with the separation $\\Delta_{i}$. Theorem 5 (Exponentially Small Retrieval Error). The retrieval error $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}\\right\\|$ of pattern $\\boldsymbol{x}_{i}$ is bounded by\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}\\right\\| \\leqslant 2(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right) M\n$$\n\nand for $\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant \\frac{1}{2 \\beta M}$ together with $\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{\\xi}\\right\\| \\leqslant \\frac{1}{2 \\beta M}$ by\n\n$$\n\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant 2 e(N-1) M \\exp \\left(-\\beta \\Delta_{i}\\right)\n$$\n\nSee proof in appendix Theorem A9. Metastable states and one global fixed point. So far, we considered patterns $\\boldsymbol{x}_{i}$ that are well separated and the iteration converges to a fixed point which is near a pattern $\\boldsymbol{x}_{i}$. If no pattern $\\boldsymbol{x}_{i}$ is well separated from the others, then the iteration converges to a global fixed point close to the arithmetic mean of the vectors. In this case the softmax vector $\\boldsymbol{p}$ is close to uniform, that is, $p_{i}=1 / N$. If some vectors are similar to each other and well separated from all other vectors, then a metastable state near the similar vectors exists. Iterations that start near the metastable state converge to this metastable state, also if initialized by one of the similar patterns. For convergence proofs to one global fixed point and to metastable states see appendix Lemma A7 and Lemma A12, respectively. Hopfield update rule is attention of the transformer. The Hopfield network update rule is the attention mechanism used in transformer and BERT models (see Fig. 1). To see this, we assume $N$ stored (key) patterns $\\boldsymbol{y}_{i}$ and $S$ state (query) patterns $\\boldsymbol{r}_{i}$ that are mapped to the Hopfield space of dimension $d_{k}$. We set $\\boldsymbol{x}_{i}=\\boldsymbol{W}_{K}^{T} \\boldsymbol{y}_{i}, \\boldsymbol{\\xi}_{i}=\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}_{i}$, and multiply the result of our update rule with $\\boldsymbol{W}_{V}$. The matrices $\\boldsymbol{Y}=\\left(\\boldsymbol{y}_{1}, \\ldots, \\boldsymbol{y}_{N}\\right)^{T}$ and $\\boldsymbol{R}=\\left(\\boldsymbol{r}_{1}, \\ldots, \\boldsymbol{r}_{S}\\right)^{T}$ combine the $\\boldsymbol{y}_{i}$ and $\\boldsymbol{r}_{i}$ as row vectors. We define the matrices $\\boldsymbol{X}^{T}=\\boldsymbol{K}=\\boldsymbol{Y} \\boldsymbol{W}_{K}, \\boldsymbol{\\Xi}^{T}=\\boldsymbol{Q}=\\boldsymbol{R} \\boldsymbol{W}_{Q}$, and $\\boldsymbol{V}=\\boldsymbol{Y} \\boldsymbol{W}_{K} \\boldsymbol{W}_{V}=\\boldsymbol{X}^{T} \\boldsymbol{W}_{V}$, where $\\boldsymbol{W}_{K} \\in \\mathbb{R}^{d_{y} \\times d_{k}}, \\boldsymbol{W}_{Q} \\in \\mathbb{R}^{d_{r} \\times d_{k}}, \\boldsymbol{W}_{V} \\in \\mathbb{R}^{d_{k} \\times d_{v}}$. If $\\beta=1 / \\sqrt{d_{k}}$ and softmax $\\in \\mathbb{R}^{N}$ is changed to a row vector, we obtain for the update rule Eq. (3) multiplied by $\\boldsymbol{W}_{V}$ :\n\n$$\n\\boldsymbol{Z}=\\operatorname{softmax}\\left(1 / \\sqrt{d_{k}} \\boldsymbol{Q} \\boldsymbol{K}^{T}\\right) \\boldsymbol{V}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{R} \\boldsymbol{W}_{\\boldsymbol{Q}} \\boldsymbol{W}_{\\boldsymbol{K}}^{T} \\boldsymbol{Y}^{T}\\right) \\boldsymbol{Y} \\boldsymbol{W}_{\\boldsymbol{K}} \\boldsymbol{W}_{\\boldsymbol{V}}\n$$\n\nThe left part of Eq. (10) is the transformer attention. In the transformer self-attention $\\boldsymbol{R}=\\boldsymbol{Y}$, and $\\boldsymbol{W}_{\\boldsymbol{K}} \\boldsymbol{W}_{\\boldsymbol{V}}$ replaced by just $\\boldsymbol{W}_{\\boldsymbol{V}}$. Besides the attention mechanism, Hopfield networks allow for other functionalities in deep network architectures, which we introduce via specific layers in the next section. The right part of Eq. (10) serves to explain these specific layers. ## 3 NEW HopfieLD LAYERS FOR DEEP LEARNING\n\nModern Hopfield networks with continuous states can be integrated into deep learning architectures, because they are continuous and differentiable with respect to their parameters. Furthermore, they typically retrieve patterns with one update, which is conform to deep learning layers that are activated only once. For these two reasons, modern Hopfield networks can serve as specialized layers in deep networks to equip them with memories. Below, we introduce three types of Hopfield layers: Hopfield, HopfieldPooling, and HopfieldLayer. Possible applications of Hopfield layers in deep network architectures comprise:\n\n- multiple instance learning (MIL) (Dietterich et al., 1997),\n- processing of and learning with point sets (Qi et al., 2017a;b; Xu et al., 2018),\n- set-based and permutation invariant learning (Guttenberg et al., 2016; Ravanbakhsh et al., 2016; Zaheer et al., 2017; Korshunova et al., 2018; Ilse et al., 2018; Zhai et al., 2020),\n- attention-based learning (Vaswani et al., 2017a),\n- deep learning with associative memories (Graves et al., 2014; Weston et al., 2014; Ba et al., 2016a;b; Schlag \\& Schmidhuber, 2018; Schlag et al., 2019),\n- natural language processing (Devlin et al., 2018; 2019),\n- sequence analysis and time series prediction (Hochreiter, 1991; Hochreiter \\& Schmidhuber, 1997; Cho et al., 2014), and\n- storing and retrieving reference data, e.g. the training data, outliers, high error data points, prototypes or cluster centers, support vectors \\& border cases. Hopfield network layers can substitute existing layers like pooling layers, permutation equivariant layers (Guttenberg et al., 2016; Ravanbakhsh et al., 2016), GRU (Cho et al., 2014) \\& LSTM (Hochreiter, 1991; Hochreiter \\& Schmidhuber, 1997) layers, and attention layers (Vaswani et al., 2017a;b; Bahdanau et al., 2014). Types of neural networks. We consider two types of feedforward neural networks: (I) Neural networks that propagate an activation vector from the input layer to the output layer. Examples are fully-connected or convolutional neural networks. (II) Neural networks that propagate a set of vectors from the input layer to the output layer, where each layer applies the same operation to each element of the set and the output layer may summarize the set via a vector. An example is the transformer. Recurrent neural networks are networks of type (I), which are iteratively applied to a set or a sequence, where intermediate results are stored in a memory and can be reused. Modern Hopfield networks can be integrated into both types of neural network architectures and enable to equip each of their layers with associative memories. See Fig. 2. Types of new Hopfield layers. We introduce three types of Hopfield layers: Hopfield, HopfieldPooling, and HopfieldLayer. The continuous modern Hopfield network results in a plethora of new deep learning architectures, since we can (a) propagate sets or single vectors, (b) propagate queries, stored patterns, or both, (c) learn static queries or stored patterns, (d) fill the memory by training sets, prototypes, or external data. Next, we provide three useful types of Hopfield layers. The implementation is available at: https://github.com/ml-jku/hopfield-layers\n(1) Layer Hopfield for networks that propagate sets of vectors via state (query) patterns $\\boldsymbol{R}$ and stored (key) patterns $\\boldsymbol{Y}$. The layer Hopfield is the realization of formula (10). The memory of the Hopfield layer can be filled with sets from the input or previous layers, see Fig. 3. The memory may be filled with a reference set, which is covered by providing the reference set as additional input. Thus, the layer Hopfield allows the association of two sets. A prominent example of a layer that performs such association is the transformer attention mechanism, which associates keys and queries, e.g. two point sets that have to be compared. This layer allows for different kinds of sequence-to-sequence learning, point set operations, and retrieval-based methods. The layer Hopfield with skip connections in a ResNet architecture is identical to the popular transformer and BERT models. In the experiments, we analyzed these Hopfield layers in transformer architectures. In our experiments in which we compare machine learning methods on small datasets of the UCI benchmark collection the layer Hopfield is also used. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-06.jpg?height=272&width=1392&top_left_y=1680&top_left_x=364)\n\nFigure 3: The layer Hopfield allows the association of two sets $\\boldsymbol{R}(\\square)$ and $\\boldsymbol{Y}$ ( $\\square$ ). It can be integrated into deep networks that propagate sets of vectors. The Hopfield memory is filled with a set from either the input or previous layers. The output is a set of vectors $\\boldsymbol{Z}$ ( $\\square$ ). (2) Layer HopfieldPooling for networks that propagate patterns via the stored (key) patterns $\\boldsymbol{Y}$. This layer performs a pooling or summarization of sets $\\boldsymbol{Y}$ obtained from queries in previous layers or the input. The memory of the HopfieldPooling layer is filled with sets from the input or previous layers. The HopfieldPooling layer uses the queries to search for patterns in the memory, the stored set. If more patterns are similar to a particular search pattern (query), then the result is an average over these patterns. The state (query) patterns of each layer are static and can be learned. Multiple queries supply a set to the next layer, where each query corresponds to one element of the set. Thus, the layer HopfieldPooling enables fixed pattern search, pooling operations, and memories like LSTMs or GRUs. The static pattern functionality is typically needed if particular patterns must be identified in the data. A single HopfieldPooling layer allows for multiple instance learning. Static state (query)\npatterns together with position encoding in the keys allows for performing pooling operations. The position encoding can be two-dimensional, where standard convolutional filters can be constructed as in convolutional neural networks (CNNs). The HopfieldPooling layer can substitute pooling, averaging, LSTM, and permutation equivariant layers. See Fig. 4. The layer HopfieldPooling is used for experiments with multiple instance learning tasks, e.g. for immune repertoire classification in the experiments. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-07.jpg?height=288&width=1397&top_left_y=531&top_left_x=361)\n\nFigure 4: The layer HopfieldPooling enables pooling or summarization of sets, which are obtained from the input or from previous layers. The input $\\boldsymbol{Y}(\\square)$ can be either a set or a sequence. The query patterns of each layer are static and can be learned. The output is a set of vectors $\\boldsymbol{Z}$ ( $\\square$ ), where the number of vectors equals the number of query patterns. The layer HopfieldPooling can realize multiple instance learning. (3) Layer HopfieldLayer for networks that propagate a vector or a set of vectors via state (query) patterns $\\boldsymbol{R}$. The queries $\\boldsymbol{R}$ can be input vectors or queries that are computed from the output of previous layers. The memory of the HopfieldLayer layer is filled with a fixed set, which can be the training set, a reference set, prototype set, or a learned set (a learned matrix). The stored (key) patterns are static and can be learned. If the training set is stored in the memory, then each layer constructs a new set of queries based on the query results of previous layers. The stored patterns can be initialized by the training set or a reference set and then learned, in which case they deviate from the training set. The stored patterns can be interpreted as weights from the state (query) to hidden neurons that have a softmax activation function (Krotov \\& Hopfield, 2020). The layer HopfieldLayer can substitute a fully connected layer, see Fig. 5. A single HopfieldLayer layer also allows for approaches similar to support vector machines (SVMs), approaches similar to $k$-nearest neighbor, approaches similar to learning vector quantization, and pattern search. For classification, the raw data $\\boldsymbol{y}_{i}=\\left(\\boldsymbol{z}_{i}, \\boldsymbol{t}_{i}\\right)$ can be the concatenation of input $\\boldsymbol{z}_{i}$ and target $\\boldsymbol{t}_{i}$. In this case, the matrices $\\boldsymbol{W}_{K}$ and $\\boldsymbol{W}_{V}$ can be designed such that inside the softmax the input $\\boldsymbol{z}_{i}$ is used and outside the softmax the target $t_{i}$. Thus, the softmax provides a weighted average of the target vectors based on the similarity between the query and the inputs. Also SVM models, $k$-nearest neighbor, and learning vector quantization can be considered as weighted averages of the targets. The encoder-decoder attention layer of the transformers are a HopfieldLayer layer, where the memory is filled with the encoder output set. In our experiments with the drug design benchmark datasets, the layer HopfieldLayer has been applied and compared to other machine learning methods. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-07.jpg?height=291&width=1408&top_left_y=1871&top_left_x=348)\n\nFigure 5: The layer HopfieldLayer enables multiple queries of the training set, a reference set, prototype set, or a learned set (a learned matrix). The queries for each layer are computed from the results of previous layers. The input is a set of vectors $\\boldsymbol{R}$ ( $\\square$ ). The output is also a set of vectors $\\boldsymbol{Z}(\\square)$, where the number of output vectors equals the number of input vectors. The layer HopfieldLayer can realize SVM models, $k$-nearest neighbor, and LVQ. Additional functionality of new Hopfield layers. The insights about energy, convergence, and storage properties provide all new Hopfield layers with additional functionalities: i) multiple updates\nto control how precise fixed points are found without additional parameters needed. ii) variable $\\beta$ to determine the kind of fixed points such as the size of metastable states. The variable $\\beta$ controls over how many patterns is averaged. As observed in the experiments, the variable is relevant in combination with the learning rate to steer the learning dynamics. The parameter $\\beta$ governs the fixed point dynamics and can be learned, too. iii) controlling the storage capacity via the dimension of the associative space. The storage capacity can be relevant for tasks with a huge number of instances as in the immune repertoire classification experiment. iv) pattern normalization controls, like the layernorm, the fixed point dynamics by the norm and shift of the patterns. For more details see appendix, Section A.6. ## 4 EXPERIMENTS\n\nWe show that our proposed Hopfield layers can be applied successfully to a wide range of tasks. The tasks are from natural language processing, contain multiple instance learning problems, a collection of small classification tasks, and drug design problems. Analysis of transformer and BERT models. Transformer and BERT models can be implemented by the layer Hopfield. The kind of fixed point of the Hopfield net is determined by how the pattern $\\boldsymbol{x}_{i}$ is separated from others patterns. (a) a global fixed point: no separation of a pattern from the others, (b) a fixed point close to a single pattern: pattern is separated from other patterns, (c) metastable state: some patterns are similar to each other and well separated from all other vectors. We observed that the attention heads of transformer and BERT models are predominantly in metastable states, which are categorized into four classes: (I) averaging over a very large number of patterns (very large metastable state or fixed point (a)), (II) averaging over a large number of patterns (large metastable state), (III) averaging over a medium number of patterns (medium metastable state), (IV) averaging over a small number of patterns (small metastable state or fixed point (c)). For analyzing the metastable states, we calculated the minimal number $k$ of softmax values required to sum up to 0.90 . Hence, $k$ indicates the size of a metastable state. To determine in which of the four classes a head is mainly operating, we computed the distribution of $k$ across sequences. Concretely, for $N$ tokens and for $k$ as the median of the distribution, a head is classified as operating in class (I) if $1 / 2 N<\\bar{k}$, as operating in class (II) if $1 / 8 N<\\bar{k} \\leqslant 1 / 2 N$, as operating in class (III) if $1 / 32 N<\\bar{k} \\leqslant 1 / 8 N$, and as operating in class (IV) if $\\bar{k} \\leqslant 1 / 32 N$. We analyzed pre-trained BERT models from Hugging Face Inc. (Wolf et al., 2019) according to these operating classes. In Fig. A. 3 in the appendix the distribution of the pre-trained bert-base-cased model is depicted (for other models see appendix Section A.5.1.4). Operating classes (II) (large metastable states) and (IV) (small metastable states) are often observed in the middle layers. Operating class (I) (averaging over a very large number of patterns) is abundant in lower layers. Similar observations have been reported in other studies (Toneva \\& Wehbe, 2019a;b; Tay et al., 2020). Operating class (III) (medium metastable states) is predominant in the last layers. Multiple Instance Learning Datasets. For multiple instance learning (MIL) (Dietterich et al., 1997), we integrate our new Hopfield network via the layer HopfieldPooling into deep learning architectures. Recently, deep learning methods have been applied to MIL problems (Ilse et al., 2018), but still the performance on many datasets lacks improvement. Thus, MIL datasets still pose an interesting challenge, in which Hopfield layers equipped with memory are a promising approach. -Immune Repertoire Classification. The first MIL task is immune repertoire classification, where a deep learning architecture with HopfieldPooling (DeepRC) was used (Widrich et al., 2020a;b). Immune repertoire classification (Emerson et al., 2017) typically requires to extract few patterns from a large set of sequences, the repertoire, that are indicative for the respective immune status. The datasets contain $\\approx 300,000$ instances per immune repertoire, which represents one of the largest multiple instance learning experiments ever conducted (Carbonneau et al., 2018). Most MIL methods fail due the large number of instances. This experiment comprises real-world and simulated datasets. Simulated datasets are generated by implanting sequence motifs (Akbar et al., 2019; Weber et al., 2020) with low frequency into simulated or experimentally-observed immune receptor sequences. The performance of DeepRC was compared with other machine learning methods: (i) known motif, (ii) SVM using $k$-mers and MinMax or Jaccard kernel, (iii) $K$-Nearest Neighbor (KNN) with $k$ mers, (iv) logistic regression with $k$-mers, (v) burden test with $k$-mers, and (vi) logistic multiple\n\n| Method | tiger | fox | elephant | UCSB |\n| :--- | :---: | :---: | :---: | :---: |\n| Hopfield (ours) | $\\mathbf{9 1 .",
    "hopfield-3": "3} \\pm \\mathbf{0 . 5}$ | $64.05 \\pm 0.4$ | $\\mathbf{9 4 . 9} \\pm \\mathbf{0 .",
    "hopfield-4": "3}$ | $\\mathbf{8 9 . 5} \\pm \\mathbf{0 . 8}$ |\n| Path encoding (K\u00fc\u00e7\u00fcka\u015fc1 \\& Baydo\u011fan, 2018) | $91.0 \\pm 1.0^{\\mathrm{a}}$ | $71.2 \\pm 1.4^{\\mathrm{a}}$ | $94.4 \\pm 0.7^{\\mathrm{a}}$ | $88.0 \\pm 2.2^{\\mathrm{a}}$ |\n| MInD (Cheplygina et a., 2016) | $85.3 \\pm 1.1^{\\mathrm{a}}$ | $70.4 \\pm 1.6^{\\mathrm{a}}$ | $93.6 \\pm 0.9^{\\mathrm{a}}$ | $83.1 \\pm 2.7^{\\mathrm{a}}$ |\n| MILES (Chen et al., 2006) | $87.2 \\pm 1.7^{\\mathrm{b}}$ | $\\mathbf{7 3 . 8} \\pm \\mathbf{1 . 6 ^ { \\mathrm { a } }}$ | $92.7 \\pm 0.7^{\\mathrm{a}}$ | $83.3 \\pm 2.6^{\\mathrm{a}}$ |\n| APR (Dietterich et al., 1997) | $77.8 \\pm 0.7^{\\mathrm{b}}$ | $54.1 \\pm 0.9^{\\mathrm{b}}$ | $55.0 \\pm 1.0^{\\mathrm{b}}$ | - |\n| Citation-kNN (Wang, 2000) | $85.5 \\pm 0.9^{\\mathrm{b}}$ | $63.5 \\pm 1.5^{\\mathrm{b}}$ | $89.6 \\pm 0.9^{\\mathrm{b}}$ | $70.6 \\pm 3.2^{\\mathrm{a}}$ |\n| DD (Maron \\& Lozano-P\u00e9rez, 1998) | $84.1^{\\mathrm{b}}$ | $63.1^{\\mathrm{b}}$ | $90.7^{\\mathrm{b}}$ | - |\n\nTable 1: Results for MIL datasets Tiger, Fox, Elephant, and UCSB Breast Cancer in terms of AUC. Results for all methods except the first are taken from either ${ }^{a}$ (K\u00fc\u00e7\u00fcka\u015fc\u0131 \\& Baydo\u011fan, 2018) or ${ }^{\\text {b }}$ (Carbonneau et al., 2016), depending on which reports the higher AUC. instance learning (IMIL). On the real-world dataset DeepRC achieved an AUC of $0.832 \\pm 0.022$, followed by the SVM with MinMax kernel (AUC $0.825 \\pm 0.022$ ) and the burden test with an AUC of $0.699 \\pm 0.041$. Across datasets, DeepRC outperformed all competing methods with respect to average AUC (Widrich et al., 2020a;b). -MIL benchmark datasets. We apply Hopfield layers to further MIL datasets (Ilse et al., 2018; K\u00fc\u00e7\u00fcka\u015fc1 \\& Baydo\u011fan, 2018; Cheplygina et al., 2016): Elephant, Fox and Tiger for image annotation (Andrews et al., 2003). These datasets consist of color images from the Corel dataset that have been preprocessed and segmented. An image consists of a set of segments (or blobs), each characterized by color, texture and shape descriptors. The datasets have 100 positive and 100 negative example images. The latter have been randomly drawn from a pool of photos of other animals. Elephant comprises 1,391 instances and 230 features, Fox 1,320 instances and 230 features, and Tiger has 1,220 instances and 230 features. Furthermore, we use the UCSB breast cancer classification (Kandemir et al., 2014) dataset, which consists of 2,002 instances across 58 input objects. An instance represents a patch of a histopathological image of cancerous or normal tissue. The layer HopfieldPooling is used, which allows for computing a per-input-object representation by extracting an average of instances that are indicative for one of the two classes. The input to the layer HopfieldPooling is a set of embedded instances $\\boldsymbol{Y}$. A trainable but fixed state (query) pattern $\\boldsymbol{Q}$ is used for averaging over class-indicative instances. This averaging enables a compression of variable-sized bags to a fixedsized representation to discriminate the bags.",
    "hopfield-5": "More details in appendix Sec. A.5.2. Our approach has set a new state-of-the-art and has outperformed other methods (K\u00fc\u00e7\u00fcka\u015fc1 \\& Baydo\u011fan, 2018; Carbonneau et al., 2016) on the datasets Tiger, Elephant and UCSB Breast Cancer (see Table 1). UCI Benchmark Collection. So far deep learning struggled with small datasets. However, Hopfield networks are promising for handling small datasets, since they can store the training data points or their representations to perform similarity-based, nearest neighbor, or learning vector quantization methods. Therefore, we test the Hopfield layer Hopfield on the small datasets of the UC Irvine (UCI) Machine Learning Repository that have been used to benchmark supervised learning methods (Fern\u00e1ndez-Delgado et al., 2014; Wainberg et al., 2016; Khan et al., 2018) and also feed-forward neural networks (Klambauer et al., 2017a; Wu et al., 2018), where our Hopfield networks could exploit their memory. The whole 121 datasets in the collection vary strongly with respect to their size, number of features, and difficulties (Fern\u00e1ndez-Delgado et al., 2014), such that they have been divided into 75 \"small datasets\" with less than 1,000 samples and 45 \"large datasets\" with more than or equal to 1,000 samples in Klambauer et al. (2017a). On the 75 small datasets, Random Forests (RFs) and Support Vector Machines (SVM) are highly accurate, whereas on the large datasets, deep learning methods and neural networks are in the lead (Klambauer et al., 2017a;b; Wu et al., 2018). We applied a modern Hopfield network via the layer HopfieldLayer, where a selfnormalizing net (SNN) maps the input vector to $\\boldsymbol{Y}$ and $\\boldsymbol{R}$. The output $\\boldsymbol{Z}$ of HopfieldLayer enters a softmax output. We compared our modern Hopfield networks against deep learning\n\n| Method | avg. rank diff. | $p$-value |\n| :--- | :--- | :---: |\n| Hopfield (ours) | -3.92 | - |\n| SVM | -3.23 | 0.15 |\n| SNN | -2.85 | 0.10 |\n| RandomForest | -2.79 | 0.05 |\n| $\\ldots$ | $\\ldots$ | $\\ldots$ |\n| Stacking | 8.73 | $1.2 \\mathrm{e}-11$ |\n\nTable 2: Results on 75 small datasets of the UCI benchmarks given as difference to average rank.",
    "hopfield-6": "methods (e.g. SNNs, resnet), RFs, SVMs, boosting, bagging, and many other machine learning methods of Fern\u00e1ndez-Delgado et al. (2014). Since for each method, multiple variants and implementations had been included, we used method groups and representatives as defined by Klambauer et al. (2017a). For each dataset, a ranking of the methods was calculated which is presented in Table 2. We found that Hopfield networks outperform all other methods on the small datasets, setting a new state-of-the-art for 10 datasets.",
    "hopfield-7": "The difference is significant except for the first three runner-up methods (Wilcoxon signed rank test).",
    "hopfield-8": "See appendix Section A.5.3 for details. Drug Design Benchmark Datasets. We test the Hopfield layer HopfieldLayer, on four drug design datasets. These datasets represent four main areas of modeling tasks in drug design, concretely to develop accurate models for predicting a) new anti-virals (HIV) by the Drug Therapeutics Program (DTP) AIDS Antiviral Screen, b) new protein inhibitors, concretely human $\\beta$-secretase (BACE) inhibitors by Subramanian et al. (2016), c) metabolic effects as blood-brain barrier permeability (BBBP) (Martins et al., 2012) and d) side effects of a chemical compound from the Side Effect Resource (SIDER) Kuhn et al. (2016). We applied the Hopfield layer HopfieldLayer, where the training data is used as stored patterns $\\boldsymbol{Y}$, the input vector as state pattern $\\boldsymbol{R}$, and the corresponding training label to project the output of the Hopfield layer $\\boldsymbol{Y} \\boldsymbol{W}_{V}$. Our architecture with HopfieldLayer has reached state-of-the-art for predicting side effects on SIDER $0.672 \\pm 0.019$ as well as for predicting $\\beta$-secretase BACE $0.902 \\pm 0.023$.",
    "hopfield-9": "For details, see Table A.",
    "hopfield-10": "5 in the appendix. Conclusion. We have introduced a modern Hopfield network with continuous states and the corresponding new update rule. This network can store exponentially many patterns, retrieves patterns with one update, and has exponentially small retrieval errors. We analyzed the attention heads of BERT models. The new modern Hopfield networks have been integrated into deep learning architectures as layers to allow the storage of and access to raw input data, intermediate results, or learned prototypes. These Hopfield layers enable new ways of deep learning, beyond fully-connected, convolutional, or recurrent networks, and provide pooling, memory, association, and attention mechanisms. Hopfield layers that equip neural network layers with memories improved state-of-the-art in three out of four considered multiple instance learning problems and on immune repertoire classification, and on two drug design dataset. They yielded the best results among different machine learning methods on the UCI benchmark collections of small classification tasks. ## ACKNOWLEDGMENTS\n\nThe ELLIS Unit Linz, the LIT AI Lab and the Institute for Machine Learning are supported by the Land Ober\u00f6sterreich, LIT grants DeepToxGen (LIT-2017-3-YOU-003), and AI-SNN (LIT2018-6-YOU-214), the Medical Cognitive Computing Center (MC3), Janssen Pharmaceutica, UCB Biopharma, Merck Group, Audi.JKU Deep Learning Center, Audi Electronic Venture GmbH, TGW, Primal, S3AI (FFG-872172), Silicon Austria Labs (SAL), Anyline, FILL, EnliteAI, Google Brain, ZF Friedrichshafen AG, Robert Bosch GmbH, T\u00dcV Austria, DCS, and the NVIDIA Corporation. IARAI is supported by Here Technologies. ## A APPENDIX\n\nThis appendix consists of six sections (A.1-A.6). Section A. 1 introduces the new modern Hopfield network with continuous states and its update rule. Furthermore, Section A. 1 provides a thorough and profound theoretical analysis of this new Hopfield network. Section A. 2 provides the mathematical background for Section A.1. Section A. 3 reviews binary Modern Hopfield Networks of Krotov \\& Hopfield. Section A. 4 shows that the Hopfield update rule is the attention mechanism of the transformer.",
    "hopfield-11": "Section A.",
    "hopfield-12": "5 gives details on the experiments. Section A. 6 describes the PyTorch implementation of layers based on the new Hopfield networks and how to use them. ## CONTENTS OF THE APPENDIX\n\nA. 1 Continuous State Modern Hopfield Networks (A New Concept) ..... 12\nA.1.1 Introduction ..... 12\nA.1.2 New Energy Function ..... 13\nA.1.3 New Update Rule ..... 15\nA.1.4 Global Convergence of the Update Rule ..... 16\nA.1.5 Local Convergence of the Update Rule: Fixed Point Iteration ..... 19\nA.1.6 Properties of Fixed Points Near Stored Pattern ..... 44\nA.1.7 Learning Associations ..... 57\nA.1.8 Infinite Many Patterns and Forgetting Patterns ..... 60\nA.1.9 Number of Spurious States ..... 61\nA. 2 Properties of Softmax, Log-Sum-Exponential, Legendre Transform, Lambert W\nFunction ..... 62\nA. 3 Modern Hopfield Networks: Binary States (Krotov and Hopfield) ..... 70\nA.3.1 Modern Hopfield Networks: Introduction ..... 70\nA.3.2 Energy and Update Rule for Binary Modern Hopfield Networks ..... 71\nA. 4 Hopfield Update Rule is Attention of The Transformer ..... 73\nA. 5 Experiments ..... 73\nA.5.1 Experiment 1: Attention in Transformers described by Hopfield dynamics ..... 73\nA.5.2 Experiment 2: Multiple Instance Learning Datasets. ..... 78\nA.5.3 Experiment 3: Classification on Small UCI Benchmark Datasets ..... 81\nA.5.4 Experiment 4: Drug Design Benchmark Datasets ..... 82\nA. 6 PyTorch Implementation of Hopfield Layers ..... 83\nA.6.1 Introduction ..... 83\nA.6.2 Functionality ..... 84\nA.6.3 Usage ..... 86\nLIST OF THEOREMS\nA1 Theorem (Global Convergence (Zangwill): Energy) ..... 16\nA2 Theorem (Global Convergence: Stationary Points) ..... 18\nA3 Theorem (Storage Capacity (M=2): Placed Patterns) ..... 46\nA4 Theorem (Storage Capacity (M=5): Placed Patterns) ..... 47\nA5 Theorem (Storage Capacity (Main): Random Patterns) ..... 49\nA6 Theorem (Storage Capacity (d computed): Random Patterns) ..... 52\nA7 Theorem (Storage Capacity (expected separation): Random Patterns) ..... 55\nA8 Theorem (Pattern Retrieval with One Update) ..... 56\nA9 Theorem (Exponentially Small Retrieval Error) ..... 57\nA10 Theorem (Storage Capacity for Binary Modern Hopfield Nets (Demircigil et al. 2017)) ..... 72\nLIST OF DEFINITIONS\nA1 Definition (Softmax) ..... 62\nA2 Definition (Log-Sum-Exp Function) ..... 62\nA3 Definition (Convex Conjugate) ..... 66\nA4 Definition (Legendre Transform) ..... 66\nA5 Definition (Epi-Sum) ..... 66\nA6 Definition (Lambert Function) ..... 69\nLIST OF FIGURES\nA. 1 The three cases of fixed points ..... 19\nA. 2 From binary Hopfield network to transformer ..... 73\nA. 4 Ridge plots of the distribution of counts ..... 76\nA. 5 Change of count density during training ..... 77\nA. 6 Attentions of a Gaussian averaging heads ..... 78\nA. 7 A flowchart of the Hopfield layer ..... 87\nLIST OF TABLES\nA. 1 Results of immune repertoire classification across all datasets ..... 79\nA. 2 Hyperparameter selection for MIL datasets ..... 80\nA. 3 Hyperparameter selection for small UCI benchmark datasets ..... 82\nA. 4 Hyperparameter selection for drug design datasets ..... 82\nA. 5 Results on drug design benchmark datasets ..... 83\n\n## A. 1 Continuous State Modern Hopfield Networks (A New Concept)\n\n## A.1.1 IntroDUCTION\n\nIn Section A. 1 our new modern Hopfield network is introduced. In Subsection A.1.2 we present the new energy function. Then in Subsection A.1.3, our new update rule is introduced. In Subsection A.1.4, we show that this update rule ensures global convergence. We show that all the limit points of any sequence generated by the update rule are the stationary points (local minima or saddle points) of the energy function. In Section A.1.5, we consider the local convergence of the update rule and see that patterns are retrieved with one update. In Subsection A.1.6, we consider the properties of the fixed points that are associated with the stored patterns. In Subsection A.1.6.1, we show that exponentially many patterns can be stored. The main result is given in Theorem A5: For random\npatterns on a sphere we can store and retrieve exponentially (in the dimension of the Hopfield space) many patterns. Subsection A.1.6.2 reports that patterns are typically retrieved with one update step and that the retrieval error is exponentially small. In Subsection A.1.7, we consider how associations for the new Hopfield networks can be learned. In Subsection A.1.7.2, we analyze if the association is learned directly by a bilinear form. In Subsection A.1.7.3, we analyze if stored patterns and query patterns are mapped to the space of the Hopfield network. Therefore, we treat the architecture of the transformer and BERT. In Subsection A.1.8, we introduce a temporal component into the new Hopfield network that leads to a forgetting behavior. The forgetting allows us to treat infinite memory capacity in Subsection A.1.8.1. In Subsection A.1.8.2, we consider the controlled forgetting behavior. In Section A.2, we provide the mathematical background that is needed for our proofs. In particular we give lemmas on properties of the softmax, the log-sum-exponential, the Legendre transform, and the Lambert $W$ function. In Section A.3, we review the new Hopfield network as introduced by Krotov and Hopfield in 2016. However in contrast to our new Hopfield network, the Hopfield network of Krotov and Hopfield is binary, that is, a network with binary states. In Subsection A.3.1, we give an introduction to neural networks equipped with associative memories and new Hopfield networks. In Subsection A.3.1.1, we discuss neural networks that are enhanced by an additional external memory and by attention mechanisms. In Subsection A.3.1.2, we give an overview over the modern Hopfield networks. Finally, in Subsection A.3.2, we present the energy function and the update rule for the modern, binary Hopfield networks. ## A.1.2 NEW ENERGY Function\n\nWe have patterns $\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}$ that are represented by the matrix\n\n$$\n\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)\n$$\n\nThe largest norm of a pattern is\n\n$$\nM=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|\n$$\n\nThe query or state of the Hopfield network is $\\boldsymbol{\\xi}$. The energy function E in the new type of Hopfield models of Krotov and Hopfield is $\\mathrm{E}=$ $-\\sum_{i=1}^{N} F\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\\right)$ for binary patterns $\\boldsymbol{x}_{i}$ and binary state $\\boldsymbol{\\xi}$ with interaction function $F(x)=x^{n}$, where $n=2$ gives classical Hopfield model (Krotov \\& Hopfield, 2016). The storage capacity is proportional to $d^{n-1}$ (Krotov \\& Hopfield, 2016). This model was generalized by Demircigil et al. (Demircigil et al., 2017) to exponential interaction functions $F(x)=\\exp (x)$, which gives the en$\\operatorname{ergy} \\mathrm{E}=-\\exp \\left(\\operatorname{lse}\\left(1, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)$. This energy leads to an exponential storage capacity of $N=2^{d / 2}$ for binary patterns. Furthermore, with a single update the fixed point is recovered with high probability. See more details in Section A.3. In contrast to the these binary modern Hopfield networks, we focus on modern Hopfield networks with continuous states that can store continuous patterns. We generalize the energy of Demircigil et al. (Demircigil et al., 2017) to continuous states while keeping the lse properties which ensure high storage capacity and fast convergence. Our new energy E for a continuous query or state $\\boldsymbol{\\xi}$ is defined\nas\n\n$$\n\\begin{aligned}\n\\mathrm{E} & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\beta^{-1} \\ln N+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\frac{1}{N} \\sum_{i=1}^{N} \\exp \\left(-\\frac{1}{2} \\beta\\left(M^{2}-\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}\\right)\\right) \\exp \\left(-\\frac{1}{2} \\beta\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{\\xi}\\right\\|^{2}\\right)\\right)\n\\end{aligned}\n$$\n\nFirst let us collect and prove some properties of E. The next lemma gives bounds on the energy E. Lemma A1. The energy E is larger than zero:\n\n$$\n0 \\leqslant \\mathrm{E}\n$$\n\nFor $\\boldsymbol{\\xi}$ in the simplex defined by the patterns, the energy E is upper bounded by:\n\n$$\n\\begin{aligned}\n& \\mathrm{E} \\leqslant \\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& \\mathrm{E} \\leqslant 2 M^{2}\n\\end{aligned}\n$$\n\nProof. We start by deriving the lower bound of zero. The pattern most similar to query or state $\\boldsymbol{\\xi}$ is $x_{\\xi}$ :\n\n$$\n\\boldsymbol{x}_{\\boldsymbol{\\xi}}=\\boldsymbol{x}_{k}, \\quad k=\\arg \\max _{i} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\n$$\n\nWe obtain\n\n$$\n\\begin{aligned}\n\\mathrm{E} & =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\beta^{-1} \\ln N+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\frac{1}{N} \\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2} \\\\\n& \\geq-\\beta^{-1} \\ln \\left(\\frac{1}{N} \\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} \\boldsymbol{x}_{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{\\boldsymbol{\\xi}} \\\\\n& \\geq-\\beta^{-1} \\ln \\left(\\exp \\left(\\beta \\boldsymbol{x}_{\\boldsymbol{\\xi}}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} \\boldsymbol{x}_{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{\\boldsymbol{\\xi}} \\\\\n& =-\\boldsymbol{x}_{\\boldsymbol{\\xi}}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} \\boldsymbol{x}_{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{\\boldsymbol{\\xi}} \\\\\n& =\\frac{1}{2}\\left(\\boldsymbol{\\xi}-\\boldsymbol{x}_{\\boldsymbol{\\xi}}\\right)^{T}\\left(\\boldsymbol{\\xi}-\\boldsymbol{x}_{\\boldsymbol{\\xi}}\\right)=\\frac{1}{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{\\boldsymbol{\\xi}}\\right\\|^{2} \\geq 0\n\\end{aligned}\n$$\n\nThe energy is zero and, therefore, the bound attained, if all $\\boldsymbol{x}_{i}$ are equal, that is, $\\boldsymbol{x}_{i}=\\boldsymbol{x}$ for all $i$ and $\\boldsymbol{\\xi}=\\boldsymbol{x}$. For deriving upper bounds on the energy E, we require the the query $\\boldsymbol{\\xi}$ to be in the simplex defined by the patterns, that is,\n\n$$\n\\boldsymbol{\\xi}=\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}, \\quad \\sum_{i=1}^{N} p_{i}=1, \\quad \\forall_{i}: 0 \\leqslant p_{i}\n$$\n\nThe first upper bound is. $$\n\\begin{aligned}\n\\mathrm{E} & =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& \\leqslant-\\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& =-\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\leqslant \\beta^{-1} \\ln N+\\frac{1}{2} M^{2}\n\\end{aligned}\n$$\n\nFor the first inequality we applied Lemma A19 to $-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$ with $\\boldsymbol{z}=\\boldsymbol{p}$ giving\n\n$$\n-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right) \\leqslant-\\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)+\\beta^{-1} \\sum_{i=1}^{N} p_{i} \\ln p_{i} \\leqslant-\\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nas the term involving the logarithm is non-positive. Next we derive the second upper bound, for which we need the mean $\\boldsymbol{m}_{\\boldsymbol{x}}$ of the patterns\n\n$$\n\\boldsymbol{m}_{\\boldsymbol{x}}=\\frac{1}{N} \\sum_{i=1}^{N} \\boldsymbol{x}_{i}\n$$\n\nWe obtain\n\n$$\n\\begin{aligned}\n\\mathrm{E} & =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& \\leqslant-\\sum_{i=1}^{N} \\frac{1}{N} \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2} \\\\\n& =-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2} \\\\\n& \\leqslant\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\|\\boldsymbol{\\xi}\\|+\\frac{1}{2}\\|\\boldsymbol{\\xi}\\|^{2}+\\frac{1}{2} M^{2} \\\\\n& \\leqslant 2 M^{2}\n\\end{aligned}\n$$\n\nwhere for the first inequality we again applied Lemma A 19 with $\\boldsymbol{z}=(1 / N, \\ldots, 1 / N)$ and $\\beta^{-1} \\sum_{i} 1 / N \\ln (1 / N)=-\\beta^{-1} \\ln (N)$. This inequality also follows from Jensen's inequality. The second inequality uses the Cauchy-Schwarz inequality. The last inequality uses\n\n$$\n\\|\\boldsymbol{\\xi}\\|=\\left\\|\\sum_{i} p_{i} \\boldsymbol{x}_{i}\\right\\| \\leqslant \\sum_{i} p_{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\leqslant \\sum_{i} p_{i} M=M\n$$\n\nand\n\n$$\n\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|=\\left\\|\\sum_{i}(1 / N) \\boldsymbol{x}_{i}\\right\\| \\leqslant \\sum_{i}(1 / N)\\left\\|\\boldsymbol{x}_{i}\\right\\| \\leqslant \\sum_{i}(1 / N) M=M\n$$\n\n## A.1.3 NEW UPDATE RULE\n\nWe now introduce an update rule for minimizing the energy function E . The new update rule is\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{X} \\boldsymbol{p}=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nThe new state $\\boldsymbol{\\xi}^{\\text {new }}$ is in the simplex defined by the patterns, no matter what the previous state $\\boldsymbol{\\xi}$ was. For comparison, the synchronous update rule for the classical Hopfield network with threshold zero is\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\operatorname{sgn}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nTherefore, instead of using the vector $\\boldsymbol{X}^{T} \\boldsymbol{\\xi}$ as in the classical Hopfield network, its softmax version $\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$ is used.",
    "hopfield-13": "In the next section (Section A.1.4) we show that the update rule Eq. (28) ensures global convergence. We show that all the limit points of any sequence generated by the update rule are the stationary points (local minima or saddle points) of the energy function E. In Section A.1.5 we consider the local convergence of the update rule Eq. (28) and see that patterns are retrieved with one update. ## A.1.4 Global CONVERGENCE OF THE Update Rule\n\nWe are interested in the global convergence, that is, convergence from each initial point, of the iteration\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=f(\\boldsymbol{\\xi})=\\boldsymbol{X} \\boldsymbol{p}=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nWe defined the energy function\n\n$$\n\\begin{aligned}\n\\mathrm{E} & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\beta^{-1} \\ln N+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2}\n\\end{aligned}\n$$\n\nWe will show that the update rule in Eq. (31) is the Concave-Convex Procedure (CCCP) for minimizing the energy E . The CCCP is proven to converge globally. Theorem A1 (Global Convergence (Zangwill): Energy). The update rule Eq. (31) converges globally: For $\\boldsymbol{\\xi}^{t+1}=f\\left(\\boldsymbol{\\xi}^{t}\\right)$, the energy $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right) \\rightarrow \\mathrm{E}\\left(\\boldsymbol{\\xi}^{*}\\right)$ for $t \\rightarrow \\infty$ and a fixed point $\\boldsymbol{\\xi}^{*}$. Proof. The Concave-Convex Procedure (CCCP) (Yuille \\& Rangarajan, 2002; 2003) minimizes a function that is the sum of a concave function and a convex function. CCCP is equivalent to Legendre minimization (Rangarajan et al., 1996; 1999) algorithms (Yuille \\& Rangarajan, 2003). The Jacobian of the softmax is positive semi-definite according to Lemma A22. The Jacobian of the softmax is the Hessian of the lse, therefore lse is a convex and -lse a concave function. Therefore, the energy function $\\mathrm{E}(\\boldsymbol{\\xi})$ is the sum of the convex function $\\mathrm{E}_{1}(\\boldsymbol{\\xi})=1 / 2 \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+C_{1}$ and the concave function $\\mathrm{E}_{2}(\\boldsymbol{\\xi})=-$ lse:\n\n$$\n\\begin{aligned}\n\\mathrm{E}(\\boldsymbol{\\xi}) & =\\mathrm{E}_{1}(\\boldsymbol{\\xi})+\\mathrm{E}_{2}(\\boldsymbol{\\xi}) \\\\\n\\mathrm{E}_{1}(\\boldsymbol{\\xi}) & =\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2}=\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+C_{1} \\\\\n\\mathrm{E}_{2}(\\boldsymbol{\\xi}) & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n\\end{aligned}\n$$\n\nwhere $C_{1}$ does not depend on $\\boldsymbol{\\xi}$. The Concave-Convex Procedure (CCCP) (Yuille \\& Rangarajan, 2002; 2003) applied to E is\n\n$$\n\\nabla_{\\xi} \\mathrm{E}_{1}\\left(\\boldsymbol{\\xi}^{t+1}\\right)=-\\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\nwhich is\n\n$$\n\\nabla_{\\xi}\\left(\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+C_{1}\\right)\\left(\\boldsymbol{\\xi}^{t+1}\\right)=\\nabla_{\\xi} \\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}^{t}\\right)\n$$\n\nThe resulting update rule is\n\n$$\n\\boldsymbol{\\xi}^{t+1}=\\boldsymbol{X} \\boldsymbol{p}^{t}=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}^{t}\\right)\n$$\n\nusing\n\n$$\n\\boldsymbol{p}^{t}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}^{t}\\right)\n$$\n\nThis is the update rule in Eq. (31). Theorem 2 in Yuille \\& Rangarajan (2002) and Theorem 2 in Yuille \\& Rangarajan (2003) state that the update rule Eq. (31) is guaranteed to monotonically decrease the energy E as a function of time. See also Theorem 2 in Sriperumbudur \\& Lanckriet (2009). Although the objective converges in all cases, it does not necessarily converge to a local minimum (Lipp \\& Boyd, 2016). However the convergence proof of CCCP in Yuille \\& Rangarajan (2002; 2003) was not as rigorous as required. In Sriperumbudur \\& Lanckriet (2009) a rigorous analysis of the convergence of CCCP is performed using Zangwill's global convergence theory of iterative algorithms. In Sriperumbudur \\& Lanckriet (2009) the minimization problem\n\n$$\n\\begin{array}{ll}\n\\min _{\\boldsymbol{\\xi}} & \\mathrm{E}_{1}+\\mathrm{E}_{2} \\\\\n\\text { s.t. } & \\boldsymbol{c}(\\boldsymbol{\\xi}) \\leqslant \\mathbf{0}, \\quad \\boldsymbol{d}(\\boldsymbol{\\xi})=\\mathbf{0}\n\\end{array}\n$$\n\nis considered with $\\mathrm{E}_{1}$ convex, $-\\mathrm{E}_{2}$ convex, $\\boldsymbol{c}$ component-wise convex function, and $\\boldsymbol{d}$ an affine function. The CCCP algorithm solves this minimization problem by linearization of the concave part and is defined in Sriperumbudur \\& Lanckriet (2009) as\n\n$$\n\\begin{aligned}\n\\boldsymbol{\\xi}^{t+1} \\in \\arg \\min _{\\boldsymbol{\\xi}} & \\mathrm{E}_{1}(\\boldsymbol{\\xi})+\\boldsymbol{\\xi}^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right) \\\\\n\\text { s.t. } & \\boldsymbol{c}(\\boldsymbol{\\xi}) \\leqslant \\mathbf{0}, \\quad \\boldsymbol{d}(\\boldsymbol{\\xi})=\\mathbf{0}\n\\end{aligned}\n$$\n\nWe define the upper bound $\\mathrm{E}_{\\mathrm{C}}$ on the energy:\n\n$$\n\\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right):=\\mathrm{E}_{1}(\\boldsymbol{\\xi})+\\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)+\\left(\\boldsymbol{\\xi}-\\boldsymbol{\\xi}^{t}\\right)^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\n$\\mathrm{E}_{\\mathrm{C}}$ is equal to the energy $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right)$ for $\\boldsymbol{\\xi}=\\boldsymbol{\\xi}^{t}$ :\n\n$$\n\\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t}, \\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}_{1}\\left(\\boldsymbol{\\xi}^{t}\\right)+\\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\nSince $-\\mathrm{E}_{2}$ is convex, the first order characterization of convexity holds (Eq. 3.2 in Boyd \\& Vandenberghe (2009)):\n\n$$\n-\\mathrm{E}_{2}(\\boldsymbol{\\xi}) \\geq-\\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)-\\left(\\boldsymbol{\\xi}-\\boldsymbol{\\xi}^{t}\\right)^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\nthat is\n\n$$\n\\mathrm{E}_{2}(\\boldsymbol{\\xi}) \\leqslant \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)+\\left(\\boldsymbol{\\xi}-\\boldsymbol{\\xi}^{t}\\right)^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\nTherefore, for $\\boldsymbol{\\xi} \\neq \\boldsymbol{\\xi}^{t}$ the function $\\mathrm{E}_{\\mathrm{C}}$ is an upper bound on the energy:\n\n$$\n\\begin{aligned}\n\\mathrm{E}(\\boldsymbol{\\xi}) & \\leqslant \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}_{1}(\\boldsymbol{\\xi})+\\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)+\\left(\\boldsymbol{\\xi}-\\boldsymbol{\\xi}^{t}\\right)^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right) \\\\\n& =\\mathrm{E}_{1}(\\boldsymbol{\\xi})+\\boldsymbol{\\xi}^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)+C_{2}\n\\end{aligned}\n$$\n\nwhere $C_{2}$ does not depend on $\\boldsymbol{\\xi}$. Since we do not have constraints, $\\boldsymbol{\\xi}^{t+1}$ is defined as\n\n$$\n\\boldsymbol{\\xi}^{t+1} \\in \\arg \\min _{\\boldsymbol{\\xi}} \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right)\n$$\n\nhence $\\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t+1}, \\boldsymbol{\\xi}^{t}\\right) \\leqslant \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t}, \\boldsymbol{\\xi}^{t}\\right)$. Combining the inequalities gives:\n\n$$\n\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t+1}\\right) \\leqslant \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t+1}, \\boldsymbol{\\xi}^{t}\\right) \\leqslant \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t}, \\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\nSince we do not have constraints, $\\boldsymbol{\\xi}^{t+1}$ is the minimum of\n\n$$\n\\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}_{1}(\\boldsymbol{\\xi})+\\boldsymbol{\\xi}^{T} \\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)+C_{2}\n$$\n\nas a function of $\\boldsymbol{\\xi}$. For a minimum not at the border, the derivative has to be the zero vector\n\n$$\n\\frac{\\partial \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right)}{\\partial \\boldsymbol{\\xi}}=\\boldsymbol{\\xi}+\\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)=\\boldsymbol{\\xi}-\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}^{t}\\right)=\\mathbf{0}\n$$\n\nand the Hessian must be positive semi-definite\n\n$$\n\\frac{\\partial^{2} \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right)}{\\partial \\boldsymbol{\\xi}^{2}}=\\boldsymbol{I}\n$$\n\nThe Hessian is strict positive definite everywhere, therefore the optimization problem is strict convex (if the domain is convex) and there exist only one minimum, which is a global minimum. $\\mathrm{E}_{\\mathrm{C}}$ can even be written as a quadratic form:\n\n$$\n\\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}, \\boldsymbol{\\xi}^{t}\\right)=\\frac{1}{2}\\left(\\boldsymbol{\\xi}+\\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)\\right)^{T}\\left(\\boldsymbol{\\xi}+\\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)\\right)+C_{3}\n$$\n\nwhere $C_{3}$ does not depend on $\\boldsymbol{\\xi}$. Therefore, the minimum is\n\n$$\n\\boldsymbol{\\xi}^{t+1}=-\\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}^{t}\\right)\n$$\n\nif it is in the domain as we assume. Using $M=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|, \\boldsymbol{\\xi}^{t+1}$ is in the sphere $\\mathrm{S}=\\{\\boldsymbol{x} \\mid\\|\\boldsymbol{x}\\| \\leqslant M\\}$ which is a convex and compact set. Hence, if $\\boldsymbol{\\xi}^{0} \\in \\mathrm{S}$, then the iteration is a mapping from $S$ to S . Therefore, the point-set-map defined by the iteration Eq. (55) is uniformly compact on $S$ according to Remark 7 in Sriperumbudur \\& Lanckriet (2009). Theorem 2 and Theorem 4 in (Sriperumbudur \\& Lanckriet, 2009) states that all the limit points of the iteration Eq. (55) are stationary points. These theorems follow from Zangwill's global convergence theorem: Convergence Theorem A, page 91 in Zangwill (1969) and page 3 in Wu (1983). The global convergence theorem only assures that for the sequence $\\boldsymbol{\\xi}^{t+1}=f\\left(\\boldsymbol{\\xi}^{t}\\right)$ and a function $\\Phi$ we have $\\Phi\\left(\\boldsymbol{\\xi}^{t}\\right) \\rightarrow \\Phi\\left(\\boldsymbol{\\xi}^{*}\\right)$ for $t \\rightarrow \\infty$ but not $\\boldsymbol{\\xi}^{t} \\rightarrow \\boldsymbol{\\xi}^{*}$. However, if $f$ is strictly monotone with respect to $\\Phi$, then we can strengthen Zangwill's global convergence theorem (Meyer, 1976). We set $\\Phi=\\mathrm{E}$ and show $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t+1}\\right)<\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right)$ if $\\boldsymbol{\\xi}^{t}$ is not a stationary point of E , that is, $f$ is strictly monotone with respect to E . The following theorem is similar to the convergence results for the expectation maximization (EM) algorithm in Wu (1983) which are given in theorems 1 to 6 in Wu (1983). The following theorem is also very similar to Theorem 8 in Sriperumbudur \\& Lanckriet (2009). Theorem A2 (Global Convergence: Stationary Points). For the iteration Eq. (55) we have $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right) \\rightarrow$ $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{*}\\right)=\\mathrm{E}^{*}$ as $t \\rightarrow \\infty$, for some stationary point $\\boldsymbol{\\xi}^{*}$. Furthermore $\\left\\|\\boldsymbol{\\xi}^{t+1}-\\boldsymbol{\\xi}^{t}\\right\\| \\rightarrow 0$ and either $\\left\\{\\boldsymbol{\\xi}^{t}\\right\\}_{t=0}^{\\infty}$ converges or, in the other case, the set of limit points of $\\left\\{\\boldsymbol{\\xi}^{t}\\right\\}_{t=0}^{\\infty}$ is a connected and compact subset of $\\mathcal{L}\\left(\\mathrm{E}^{*}\\right)$, where $\\mathcal{L}(a)=\\{\\boldsymbol{\\xi} \\in \\mathcal{L} \\mid \\mathrm{E}(\\boldsymbol{\\xi})=a\\}$ and $\\mathcal{L}$ is the set of stationary points of the iteration Eq. (55). If $\\mathcal{L}\\left(\\mathrm{E}^{*}\\right)$ is finite, then any sequence $\\left\\{\\boldsymbol{\\xi}^{t}\\right\\}_{t=0}^{\\infty}$ generated by the iteration Eq. (55) converges to some $\\boldsymbol{\\xi}^{*} \\in \\mathcal{L}\\left(\\mathrm{E}^{*}\\right)$. Proof. We have $\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}_{1}\\left(\\boldsymbol{\\xi}^{t}\\right)+\\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)$. The gradient $\\nabla_{\\xi} \\mathrm{E}_{2}\\left(\\boldsymbol{\\xi}^{t}\\right)=-\\nabla_{\\xi} \\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$ is continuous. Therefore, Eq. (51) has minimum in the sphere S , which is a convex and compact set. If $\\boldsymbol{\\xi}^{t+1} \\neq \\boldsymbol{\\xi}^{t}$, then $\\boldsymbol{\\xi}^{t}$ was not the minimum of Eq. (48) as the derivative at $\\boldsymbol{\\xi}^{t}$ is not equal to zero. Eq. (53) shows that the optimization problem Eq. (48) is strict convex, hence it has only one minimum, which is a global minimum. Eq. (54) shows that the optimization problem Eq. (48) is even a quadratic form. Therefore, we have\n\n$$\n\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t+1}\\right) \\leqslant \\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t+1}, \\boldsymbol{\\xi}^{t}\\right)<\\mathrm{E}_{\\mathrm{C}}\\left(\\boldsymbol{\\xi}^{t}, \\boldsymbol{\\xi}^{t}\\right)=\\mathrm{E}\\left(\\boldsymbol{\\xi}^{t}\\right)\n$$\n\nTherefore, the point-set-map defined by the iteration Eq. (55) (for definitions see (Sriperumbudur \\& Lanckriet, 2009)) is strictly monotonic with respect to E. Therefore, we can apply Theorem 3 in Sriperumbudur \\& Lanckriet (2009) or Theorem 3.1 and Corollary 3.2 in Meyer (1976), which give the statements of the theorem. We showed global convergence of the iteration Eq. (31). We have shown that all the limit points of any sequence generated by the iteration Eq. (31) are the stationary points (critical points; local minima or saddle points) of the energy function E. Local maxima as stationary points are only possible if the iterations exactly hits a local maximum. However, convergence to a local maximum without being there is not possible because Eq. (56) ensures a strict decrease of the energy E. Therefore, almost sure local maxima are not obtained as stationary points. Either the iteration converges or, in the second case, the set of limit points is a connected and compact set. But what happens if $\\boldsymbol{\\xi}^{0}$ is in an $\\epsilon$-neighborhood around a local minimum $\\boldsymbol{\\xi}^{*}$ ? Will the iteration Eq. (31) converge to $\\boldsymbol{\\xi}^{*}$ ? What is the rate of convergence? These questions are about local convergence which will be treated in detail in next section. ## A.1.5 Local COnVERGEnce of The Update Rule: FiXed Point ItERation\n\nFor the proof of local convergence to a fixed point we will apply Banach fixed point theorem. For the rate of convergence we will rely on properties of a contraction mapping. A.1.5.1 General Bound on the Jacobian of the Iteration. We consider the iteration\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=f(\\boldsymbol{\\xi})=\\boldsymbol{X} \\boldsymbol{p}=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nusing\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nThe Jacobian J is symmetric and has the following form:\n\n$$\n\\mathrm{J}=\\frac{\\partial f(\\boldsymbol{\\xi})}{\\partial \\boldsymbol{\\xi}}=\\beta \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p p}^{T}\\right) \\boldsymbol{X}^{T}=\\boldsymbol{X} \\mathrm{J}_{s} \\boldsymbol{X}^{T}\n$$\n\nwhere $\\mathrm{J}_{s}$ is Jacobian of the softmax. To analyze the local convergence of the iteration, we distinguish between the following three cases (see also Fig.",
    "hopfield-14": "A.1). Here we only provide an informal discussion to give the reader some intuition. A rigorous formulation of the results can be found in the corresponding subsections. a) If the patterns $\\boldsymbol{x}_{i}$ are not well separated, the iteration goes to a fixed point close to the arithmetic mean of the vectors. In this case $\\boldsymbol{p}$ is close to $p_{i}=1 / N$. b) If the patterns $\\boldsymbol{x}_{i}$ are well separated, then the iteration goes to the pattern to which the initial $\\boldsymbol{\\xi}$ is similar. If the initial $\\boldsymbol{\\xi}$ is similar to a vector $\\boldsymbol{x}_{i}$ then it will converge to a vector close to $\\boldsymbol{x}_{i}$ and $\\boldsymbol{p}$ will converge to a vector close to $\\boldsymbol{e}_{i}$. c) If some vectors are similar to each other but well separated from all other vectors, then a so called metastable state between the similar vectors exists. Iterations that start near the metastable state converge to this metastable state. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-19.jpg?height=485&width=1356&top_left_y=1425&top_left_x=388)\n\nFigure A.1: The three cases of fixed points. a) Stored patterns (fixed point is single pattern): patterns are stored if they are well separated. Each pattern $\\boldsymbol{x}_{i}$ has a single fixed point $\\boldsymbol{x}_{i}^{*}$ close to it. In the sphere $\\mathrm{S}_{i}$, pattern $\\boldsymbol{x}_{i}$ is the only pattern and $\\boldsymbol{x}_{i}^{*}$ the only fixed point. b) Metastable state (fixed point is average of similar patterns): $\\boldsymbol{x}_{i}$ and $\\boldsymbol{x}_{j}$ are similar to each other and not well separated. The fixed point $\\boldsymbol{m}_{\\boldsymbol{x}}^{*}$ is a metastable state that is close to the mean $\\boldsymbol{m}_{\\boldsymbol{x}}$ of the similar patterns. c) Global fixed point (fixed point is average of all patterns): no pattern is well separated from the others. A single global fixed point $\\boldsymbol{m}_{\\boldsymbol{x}}^{*}$ exists that is close to the arithmetic mean $\\boldsymbol{m}_{\\boldsymbol{x}}$ of all patterns. We begin with a bound on the Jacobian of the iteration, thereby heavily relying on the Jacobian of the softmax from Lemma A24. Lemma A2. For $N$ patterns $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right), \\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right), M=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|$, and $m=\\max _{i} p_{i}\\left(1-p_{i}\\right)$, the spectral norm of the Jacobian J of the fixed point iteration is bounded:\n\n$$\n\\|J\\|_{2} \\leqslant 2 \\beta\\|\\boldsymbol{X}\\|_{2}^{2} m \\leqslant 2 \\beta N M^{2} m\n$$\n\nIf $p_{\\max }=\\max _{i} p_{i} \\geq 1-\\epsilon$, then for the spectral norm of the Jacobian holds\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant 2 \\beta N M^{2} \\epsilon-2 \\epsilon^{2} \\beta N M^{2}<2 \\beta N M^{2} \\epsilon\n$$\n\nProof. With\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nthe symmetric Jacobian J is\n\n$$\n\\mathrm{J}=\\frac{\\partial f(\\boldsymbol{\\xi})}{\\partial \\boldsymbol{\\xi}}=\\beta \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{X}^{T}=\\boldsymbol{X} \\mathrm{J}_{s} \\boldsymbol{X}^{T}\n$$\n\nwhere $J_{s}$ is Jacobian of the softmax. With $m=\\max _{i} p_{i}\\left(1-p_{i}\\right)$, Eq. (476) from Lemma A24 is\n\n$$\n\\left\\|\\mathrm{J}_{s}\\right\\|_{2}=\\beta\\left\\|\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p p}^{T}\\right\\|_{2} \\leqslant 2 m \\beta\n$$\n\nUsing this bound on $\\left\\|\\mathrm{J}_{s}\\right\\|_{2}$, we obtain\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant \\beta\\left\\|\\boldsymbol{X}^{T}\\right\\|_{2}\\left\\|\\mathrm{~J}_{s}\\right\\|_{2}\\|\\boldsymbol{X}\\|_{2} \\leqslant 2 m \\beta\\|\\boldsymbol{X}\\|_{2}^{2}\n$$\n\nThe spectral norm $\\|\\cdot\\|_{2}$ is bounded by the Frobenius norm $\\|\\cdot\\|_{F}$ which can be expressed by the norm squared of its column vectors:\n\n$$\n\\|\\boldsymbol{X}\\|_{2} \\leqslant\\|\\boldsymbol{X}\\|_{F}=\\sqrt{\\sum_{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}}\n$$\n\nTherefore, we obtain the first statement of the lemma:\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant 2 \\beta\\|\\boldsymbol{X}\\|_{2}^{2} m \\leqslant 2 \\beta N M^{2} m\n$$\n\nWith $p_{\\max }=\\max _{i} p_{i} \\geq 1-\\epsilon$ Eq. (480) in Lemma A24 is\n\n$$\n\\left\\|\\mathrm{J}_{s}\\right\\|_{2} \\leqslant 2 \\beta \\epsilon-2 \\epsilon^{2} \\beta<2 \\beta \\epsilon\n$$\n\nUsing this inequality, we obtain the second statement of the lemma:\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant 2 \\beta N M^{2} \\epsilon-2 \\epsilon^{2} \\beta N M^{2}<2 \\beta N M^{2} \\epsilon\n$$\n\nWe now define the \"separation\" $\\Delta_{i}$ of a pattern $\\boldsymbol{x}_{i}$ from data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ here, since it has an important role for the convergence properties of the iteration. Definition 2 (Separation of Patterns). We define $\\Delta_{i}$, i.e. the separation of pattern $\\boldsymbol{x}_{i}$ from data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ as:\n\n$$\n\\Delta_{i}=\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\max _{j, j \\neq i} \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\n$$\n\nThe pattern is separated from the other data if $0<\\Delta_{i}$. Using the parallelogram identity, $\\Delta_{i}$ can also be expressed as\n\n$$\n\\begin{aligned}\n\\Delta_{i} & =\\min _{j, j \\neq i} \\frac{1}{2}\\left(\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}+\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right) \\\\\n& =\\frac{1}{2}\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}-\\frac{1}{2} \\max _{j, j \\neq i}\\left(\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right)\n\\end{aligned}\n$$\n\nFor $\\left\\|\\boldsymbol{x}_{i}\\right\\|=\\left\\|\\boldsymbol{x}_{j}\\right\\|$ we have $\\Delta_{i}=1 / 2 \\min _{j, j \\neq i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}$. Analog we say for a query $\\boldsymbol{\\xi}$ and data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$, that $\\boldsymbol{x}_{i}$ is least separated from $\\boldsymbol{\\xi}$ while being separated from other $\\boldsymbol{x}_{j}$ with $j \\neq i$ if\n\n$$\n\\begin{aligned}\n& i=\\arg \\max _{k} \\min _{j, j \\neq k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)=\\arg \\max _{k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\max _{j, j \\neq k} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right) \\\\\n& 0 \\leqslant c=\\max _{k} \\min _{j, j \\neq k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)=\\max _{k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\max _{j, j \\neq k} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)\n\\end{aligned}\n$$\n\nNext we consider the case where the iteration has only one stable fixed point. A.1.5.2 One Stable State: Fixed Point Near the Mean of the Patterns. We start with the case where no pattern is well separated from the others. -Global fixed point near the global mean: Analysis using the data center. We revisit the bound on the Jacobian of the iteration by utilizing properties of pattern distributions. We begin with a probabilistic interpretation where we consider $p_{i}$ as the probability of selecting the vector $\\boldsymbol{x}_{i}$. Consequently, we define expectations as $\\mathrm{E}_{\\boldsymbol{p}}[f(\\boldsymbol{x})]=\\sum_{i=1}^{N} p_{i} f\\left(\\boldsymbol{x}_{i}\\right)$. In this setting the matrix\n\n$$\n\\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{X}^{T}\n$$\n\nis the covariance matrix of data $\\boldsymbol{X}$ when its vectors are selected according to the probability $\\boldsymbol{p}$ :\n\n$$\n\\begin{aligned}\n& \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{X}^{T}=\\boldsymbol{X} \\operatorname{diag}(\\boldsymbol{p}) \\boldsymbol{X}^{T}-\\boldsymbol{X} \\boldsymbol{p} \\boldsymbol{p}^{T} \\boldsymbol{X}^{T} \\\\\n& =\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\mathrm{E}_{\\boldsymbol{p}}\\left[\\boldsymbol{x} \\boldsymbol{x}^{T}\\right]-\\mathrm{E}_{\\boldsymbol{p}}[\\boldsymbol{x}] \\mathrm{E}_{\\boldsymbol{p}}[\\boldsymbol{x}]^{T}=\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\n\\end{aligned}\n$$\n\ntherefore we have\n\n$$\n\\mathrm{J}=\\beta \\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\n$$\n\nThe largest eigenvalue of the covariance matrix (equal to the largest singular value) is the variance in the direction of the eigenvector associated with the largest eigenvalue. We define:\n\n$$\n\\begin{aligned}\n\\boldsymbol{m}_{\\boldsymbol{x}} & =\\frac{1}{N} \\sum_{i=1}^{N} \\boldsymbol{x}_{i} \\\\\nm_{\\max } & =\\max _{1 \\leqslant i \\leqslant N}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|_{2}\n\\end{aligned}\n$$\n\n$\\boldsymbol{m}_{\\boldsymbol{x}}$ is the arithmetic mean (the center) of the patterns. $m_{\\text {max }}$ is the maximal distance of the patterns to the center $\\boldsymbol{m}_{\\boldsymbol{x}}$. The variance of the patterns is\n\n$$\n\\begin{aligned}\n\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}] & =\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{x}_{i}-\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\boldsymbol{x}_{i}-\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\n\\end{aligned}\n$$\n\nThe maximal distance to the center $m_{\\max }$ allows the derivation of a bound on the norm of the Jacobian. Next lemma gives a condition for a global fixed point. Lemma A3. The following bound on the norm $\\|\\mathrm{J}\\|_{2}$ of the Jacobian of the fixed point iteration $f$ holds independent of $\\boldsymbol{p}$ or the query $\\boldsymbol{\\xi}$. $$\n\\|J\\|_{2} \\leqslant \\beta m_{\\max }^{2}\n$$\n\nFor $\\beta m_{\\max }^{2}<1$ there exists a unique fixed point (global fixed point) of iteration $f$ in each compact set. Proof. In order to bound the variance we compute the vector $\\boldsymbol{a}$ that minimizes\n\n$$\nf(\\boldsymbol{a})=\\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right\\|^{2}=\\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right)^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right)\n$$\n\nThe solution to\n\n$$\n\\frac{\\partial f(\\boldsymbol{a})}{\\partial \\boldsymbol{a}}=2 \\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{a}-\\boldsymbol{x}_{i}\\right)=0\n$$\n\nis\n\n$$\n\\boldsymbol{a}=\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\n$$\n\nThe Hessian of $f$ is positive definite since\n\n$$\n\\frac{\\partial^{2} f(\\boldsymbol{a})}{\\partial \\boldsymbol{a}^{2}}=2 \\sum_{i=1}^{N} p_{i} \\boldsymbol{I}=2 \\boldsymbol{I}\n$$\n\nand $f$ is a convex function. Hence, the mean\n\n$$\n\\overline{\\boldsymbol{x}}:=\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\n$$\n\n$\\operatorname{minimizes} \\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right\\|^{2}$. Therefore, we have\n\n$$\n\\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2} \\leqslant \\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|^{2} \\leqslant m_{\\max }^{2}\n$$\n\nLet us quickly recall that the spectral norm of an outer product of two vectors is the product of the Euclidean norms of the vectors:\n\n$$\n\\left\\|\\boldsymbol{a} \\boldsymbol{b}^{T}\\right\\|_{2}=\\sqrt{\\lambda_{\\max }\\left(\\boldsymbol{b} \\boldsymbol{a}^{T} \\boldsymbol{a} \\boldsymbol{b}^{T}\\right)}=\\|\\boldsymbol{a}\\| \\sqrt{\\lambda_{\\max }\\left(\\boldsymbol{b} \\boldsymbol{b}^{T}\\right)}=\\|\\boldsymbol{a}\\|\\|\\boldsymbol{b}\\|\n$$\n\nsince $\\boldsymbol{b} \\boldsymbol{b}^{T}$ has eigenvector $\\boldsymbol{b} /\\|\\boldsymbol{b}\\|$ with eigenvalue $\\|\\boldsymbol{b}\\|^{2}$ and otherwise zero eigenvalues. We now bound the variance of the patterns:\n\n$$\n\\begin{aligned}\n\\left\\|\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\\right\\|_{2} & \\leqslant \\sum_{i=1}^{N} p_{i}\\left\\|\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)^{T}\\right\\|_{2} \\\\\n& =\\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2} \\leqslant \\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|^{2} \\leqslant m_{\\max }^{2}\n\\end{aligned}\n$$\n\nThe bound of the lemma on $\\|J\\|_{2}$ follows from Eq. (78). For $\\|\\mathrm{J}\\|_{2} \\leqslant \\beta m_{\\max }^{2}<1$ we have a contraction mapping on each compact set. Banach fixed point theorem says there is a unique fixed point in the compact set. Now let us further investigate the tightness of the bound on $\\left\\|\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\\right\\|_{2}$ via $\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2}$ : we consider the trace, which is the sum $\\sum_{k=1}^{d} e_{k}$ of the w.l.o.g. ordered nonnegative eigenvalues $e_{k}$ of $\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]$ The spectral norm is equal to the largest eigenvalue $e_{1}$, which is equal to the largest singular value, as we have positive semidefinite matrices. We obtain:\n\n$$\n\\begin{aligned}\n\\left\\|\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\\right\\|_{2} & =\\operatorname{Tr}\\left(\\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)^{T}\\right)-\\sum_{k=2}^{d} e_{k} \\\\\n& =\\sum_{i=1}^{N} p_{i} \\operatorname{Tr}\\left(\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)^{T}\\right)-\\sum_{k=2}^{d} e_{k} \\\\\n& =\\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2}-\\sum_{k=2}^{d} e_{k}\n\\end{aligned}\n$$\n\nTherefore, the tightness of the bound depends on eigenvalues which are not the largest. Hence variations which are not along the largest variation weaken the bound. Next we investigate the location of fixed points which existence is ensured by the global convergence stated in Theorem A2. For $N$ patterns $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$, we consider the iteration\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=f(\\boldsymbol{\\xi})=\\boldsymbol{X} \\boldsymbol{p}=\\boldsymbol{X}_{\\operatorname{softmax}}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nusing\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\n$\\boldsymbol{\\xi}^{\\text {new }}$ is in the simplex of the patterns, that is, $\\boldsymbol{\\xi}^{\\text {new }}=\\sum_{i} p_{i} \\boldsymbol{x}_{i}$ with $\\sum_{i} p_{i}=1$ and $0 \\leqslant p_{i}$. Hence, after one update $\\boldsymbol{\\xi}$ is in the simplex of the pattern and stays there. If the center $\\boldsymbol{m}_{\\boldsymbol{x}}$ is the zero vector $\\boldsymbol{m}_{\\boldsymbol{x}}=\\mathbf{0}$, that is, the data is centered, then the mean is a fixed point of the iteration. For $\\boldsymbol{\\xi}=\\boldsymbol{m}_{\\boldsymbol{x}}=\\mathbf{0}$ we have\n\n$$\n\\boldsymbol{p}=1 / N 1\n$$\n\nand\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=1 / N \\boldsymbol{X} \\mathbf{1}=\\boldsymbol{m}_{\\boldsymbol{x}}=\\boldsymbol{\\xi}\n$$\n\nIn particular normalization methods like batch normalization would promote the mean as a fixed point. We consider the differences of dot products for $\\boldsymbol{x}_{i}: \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}=\\boldsymbol{x}_{i}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)$, for fixed point $\\boldsymbol{m}_{\\boldsymbol{x}}^{*}$ : $\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)^{T} \\boldsymbol{x}_{i}-\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)^{T} \\boldsymbol{x}_{j}=\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)$, and for the center $\\boldsymbol{m}_{\\boldsymbol{x}}: \\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}=\\boldsymbol{m}_{\\boldsymbol{x}}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)$. Using the Cauchy-Schwarz inequality, we get\n\n$$\n\\begin{aligned}\n\\left|\\boldsymbol{\\xi}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right| & \\leqslant\\|\\boldsymbol{\\xi}\\|\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\| \\leqslant\\|\\boldsymbol{\\xi}\\|\\left(\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|+\\left\\|\\boldsymbol{x}_{j}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right) \\\\\n& \\leqslant 2 m_{\\max }\\|\\boldsymbol{\\xi}\\|\n\\end{aligned}\n$$\n\nThis inequality gives:\n\n$$\n\\begin{aligned}\n& \\left|\\boldsymbol{\\xi}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right| \\leqslant 2 m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right) \\\\\n& \\left|\\boldsymbol{\\xi}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right| \\leqslant 2 m_{\\max } M\n\\end{aligned}\n$$\n\nwhere we used $\\|\\boldsymbol{\\xi}-\\mathbf{0}\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\mathbf{0}\\right\\|,\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|=\\left\\|\\sum_{i} p_{i} \\boldsymbol{x}_{\\boldsymbol{i}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant$ $\\sum_{i} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant m_{\\max }$, and $M=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|$. In particular\n\n$$\n\\begin{aligned}\n\\beta\\left|\\boldsymbol{m}_{\\boldsymbol{x}}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right| & \\leqslant 2 \\beta m_{\\max }\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\\\\n\\beta\\left|\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right| & \\leqslant 2 \\beta m_{\\max }\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right\\| \\leqslant 2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right) \\\\\n\\beta\\left|\\boldsymbol{x}_{i}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right| & \\leqslant 2 \\beta m_{\\max }\\left\\|\\boldsymbol{x}_{i}\\right\\| \\leqslant 2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\n\\end{aligned}\n$$\n\nLet $i=\\arg \\max _{j} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}$, therefore the maximal softmax component is $i$. For the maximal softmax component $i$ we have:\n\n$$\n\\begin{aligned}\n& {\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{i}=\\frac{1}{1+\\sum_{j \\neq i} \\exp \\left(-\\beta\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)\\right)}} \\\\\n& \\leqslant \\frac{1}{1+\\sum_{j \\neq i} \\exp \\left(-2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\\right)} \\\\\n& =\\frac{1}{1+(N-1) \\exp \\left(-2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\\right)} \\\\\n& =\\frac{\\exp \\left(2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\\right)}{\\exp \\left(2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\\right)+(N-1)} \\\\\n& \\leqslant 1 / N \\exp \\left(2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\\right)\n\\end{aligned}\n$$\n\nAnalogously we obtain for $i=\\arg \\max _{j} \\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}$, a bound on the maximal softmax component $i$ if the center is put into the iteration:\n\n$$\n\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}\\right)\\right]_{i} \\leqslant 1 / N \\exp \\left(2 \\beta m_{\\max }\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\n$$\n\nAnalog we obtain a bound for $i=\\arg \\max _{j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)^{T} \\boldsymbol{x}_{j}$ on the maximal softmax component $i$ of the fixed point:\n\n$$\n\\begin{aligned}\n{\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)\\right]_{i} } & \\leqslant 1 / N \\exp \\left(2 \\beta m_{\\max }\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right\\|\\right) \\\\\n& \\leqslant 1 / N \\exp \\left(2 \\beta m_{\\max }\\left(m_{\\max }+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right)\\right)\n\\end{aligned}\n$$\n\nThe two important terms are $m_{\\text {max }}$, the variance or spread of the data and $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$, which tells how well the data is centered. For a contraction mapping we already required $\\beta m_{\\max }^{2}<1$, therefore the first term in the exponent is $2 \\beta m_{\\max }^{2}<2$. The second term $2 \\beta m_{\\max }\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$ is small if the data is centered. -Global fixed point near the global mean: Analysis using softmax values. If $\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i} \\approx \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}$ for all $i$ and $j$, then $p_{i} \\approx 1 / N$ and we have $m=\\max _{i} p_{i}\\left(1-p_{i}\\right)<1 / N$. For $M \\leqslant 1 / \\sqrt{2 \\beta}$ we obtain from Lemma A2:\n\n$$\n\\|J\\|_{2}<1\n$$\n\nThe local fixed point is $\\boldsymbol{m}_{\\boldsymbol{x}}^{*} \\approx \\boldsymbol{m}_{\\boldsymbol{x}}=(1 / N) \\sum_{i=1}^{N} \\boldsymbol{x}_{i}$ with $p_{i} \\approx 1 / N$. We now treat this case more formally. First we discuss conditions that ensure that the iteration is a contraction mapping. We consider the iteration Eq. (57) in the variable $\\boldsymbol{p}$ :\n\n$$\n\\boldsymbol{p}^{\\text {new }}=g(\\boldsymbol{p})=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{X} \\boldsymbol{p}\\right)\n$$\n\nThe Jacobian is\n\n$$\n\\mathrm{J}(\\boldsymbol{p})=\\frac{\\partial g(\\boldsymbol{p})}{\\partial \\boldsymbol{p}}=\\boldsymbol{X}^{T} \\boldsymbol{X} \\mathrm{J}_{s}\n$$\n\nwith\n\n$$\n\\mathrm{J}_{s}\\left(\\boldsymbol{p}^{\\text {new }}\\right)=\\beta\\left(\\operatorname{diag}\\left(\\boldsymbol{p}^{\\text {new }}\\right)-\\boldsymbol{p}^{\\text {new }}\\left(\\boldsymbol{p}^{\\text {new }}\\right)^{T}\\right)\n$$\n\nThe version of the mean value theorem in Lemma A32 states for $J^{m}=\\int_{0}^{1} J(\\lambda \\boldsymbol{p}) \\mathrm{d} \\lambda=\\boldsymbol{X}^{T} \\boldsymbol{X} \\mathrm{J}_{s}^{m}$ with the symmetric matrix $J_{s}^{m}=\\int_{0}^{1} \\mathrm{~J}_{s}(\\lambda \\boldsymbol{p}) \\mathrm{d} \\lambda$ :\n\n$$\n\\boldsymbol{p}^{\\text {new }}=g(\\boldsymbol{p})=g(\\mathbf{0})+\\left(\\mathrm{J}^{m}\\right)^{T} \\boldsymbol{p}=g(\\mathbf{0})+\\mathrm{J}_{s}^{m} \\boldsymbol{X}^{T} \\boldsymbol{X} \\boldsymbol{p}=1 / N \\mathbf{1}+\\mathrm{J}_{s}^{m} \\boldsymbol{X}^{T} \\boldsymbol{X} \\boldsymbol{p}\n$$\n\nWith $m=\\max _{i} p_{i}\\left(1-p_{i}\\right)$, Eq. (476) from Lemma A24 is\n\n$$\n\\left\\|\\mathrm{J}_{s}(\\boldsymbol{p})\\right\\|_{2}=\\beta\\left\\|\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p p}^{T}\\right\\|_{2} \\leqslant 2 m \\beta\n$$\n\nFirst observe that $\\lambda p_{i}\\left(1-\\lambda p_{i}\\right) \\leqslant p_{i}\\left(1-p_{i}\\right)$ for $p_{i} \\leqslant 0.5$ and $\\lambda \\in[0,1]$, since $p_{i}\\left(1-p_{i}\\right)-\\lambda p_{i}(1-$ $\\left.\\lambda p_{i}\\right)=(1-\\lambda) p_{i}\\left(1-(1+\\lambda) p_{i}\\right) \\geq 0$. For $\\max _{i} p_{i} \\leqslant 0.5$ this observation leads to the following bound for $J_{s}^{m}$ :\n\n$$\n\\left\\|J_{s}^{m}\\right\\|_{2} \\leqslant 2 m \\beta\n$$\n\nEq. (479) in Lemma A24 states that every $\\mathrm{J}_{s}$ is bounded by $1 / 2 \\beta$, therefore also the mean:\n\n$$\n\\left\\|J_{s}^{m}\\right\\|_{2} \\leqslant 0.5 \\beta\n$$\n\nSince $m=\\max _{i} p_{i}\\left(1-p_{i}\\right)<\\max _{i} p_{i}=p_{\\text {max }}$, the previous bounds can be combined as follows:\n\n$$\n\\left\\|J_{s}^{m}\\right\\|_{2} \\leqslant 2 \\min \\left\\{0.25, p_{\\max }\\right\\} \\beta\n$$\n\nConsequently,\n\n$$\n\\left\\|\\mathrm{J}^{m}\\right\\|_{2} \\leqslant N M^{2} 2 \\min \\left\\{0.25, p_{\\max }\\right\\} \\beta\n$$\n\nwhere we used Eq. (170). $\\left\\|\\boldsymbol{X}^{T} \\boldsymbol{X}\\right\\|_{2}=\\left\\|\\boldsymbol{X} \\boldsymbol{X}^{T}\\right\\|_{2}$, therefore $\\left\\|\\boldsymbol{X}^{T} \\boldsymbol{X}\\right\\|_{2}$ is $N$ times the maximal second moment of the data squared. Obviously, $g(\\boldsymbol{p})$ is a contraction mapping in compact sets, where\n\n$$\nN M^{2} 2 \\min \\left\\{0.25, p_{\\max }\\right\\} \\beta<1\n$$\n\nS is the sphere around the origin $\\mathbf{0}$ with radius one. For\n\n$$\n\\boldsymbol{p}^{\\text {new }}=g(\\boldsymbol{p})=1 / N \\mathbf{1}+\\mathrm{J}^{m} \\boldsymbol{p}\n$$\n\nwe have $\\|\\boldsymbol{p}\\| \\leqslant\\|\\boldsymbol{p}\\|_{1}=1$ and $\\left\\|\\boldsymbol{p}^{\\text {new }}\\right\\| \\leqslant\\left\\|\\boldsymbol{p}^{\\text {new }}\\right\\|_{1}=1$. Therefore, $g$ maps points from S into $\\mathrm{S} . g$ is a contraction mapping for\n\n$$\n\\left\\|J^{m}\\right\\|_{2} \\leqslant N M^{2} 2 \\min \\left\\{0.25, p_{\\max }\\right\\} \\beta=c<1\n$$\n\nAccording to Banach fixed point theorem $g$ has a fixed point in the sphere S . H\u00f6lder's inequality gives:\n\n$$\n\\|\\boldsymbol{p}\\|^{2}=\\boldsymbol{p}^{T} \\boldsymbol{p} \\leqslant\\|\\boldsymbol{p}\\|_{1}\\|\\boldsymbol{p}\\|_{\\infty}=\\|\\boldsymbol{p}\\|_{\\infty}=p_{\\max }\n$$\n\nAlternatively:\n\n$$\n\\|\\boldsymbol{p}\\|^{2}=\\sum_{i} p_{i}^{2}=p_{\\max } \\sum_{i} \\frac{p_{i}}{p_{\\max }} p_{i} \\leqslant p_{\\max } \\sum_{i} p_{i}=p_{\\max }\n$$\n\nLet now S be the sphere around the origin $\\mathbf{0}$ with radius $1 / \\sqrt{N}+\\sqrt{p_{\\max }}$ and let $\\left\\|\\mathrm{J}^{m}(\\boldsymbol{p})\\right\\|_{2} \\leqslant c<1$ for $\\boldsymbol{p} \\in \\mathrm{S}$. The old $\\boldsymbol{p}$ is in the sphere $\\mathrm{S}(\\boldsymbol{p} \\in \\mathrm{S})$ since $p_{\\max }<\\sqrt{p_{\\max }}$ for $p_{\\max }<1$. We have\n\n$$\n\\left\\|\\boldsymbol{p}^{\\text {new }}\\right\\| \\leqslant 1 / \\sqrt{N}+\\left\\|J^{m}\\right\\|_{2}\\|\\boldsymbol{p}\\| \\leqslant 1 / \\sqrt{N}+\\sqrt{p_{\\max }}\n$$\n\nTherefore, $g$ is a mapping from $S$ into $S$ and a contraction mapping. According to Banach fixed point theorem, a fixed point exists in S . For the 1-norm, we use Lemma A24 and $\\|\\boldsymbol{p}\\|_{1}=1$ to obtain from Eq. (115):\n\n$$\n\\begin{aligned}\n& \\left\\|\\boldsymbol{p}^{\\text {new }}-1 / N \\mathbf{1}\\right\\|_{1} \\leqslant\\left\\|\\mathrm{~J}^{m}\\right\\|_{1} \\leqslant 2 \\beta m\\|\\boldsymbol{X}\\|_{\\infty} M_{1} \\\\\n& \\left\\|\\boldsymbol{p}^{\\text {new }}-1 / N 1\\right\\|_{1} \\leqslant\\left\\|\\mathrm{~J}^{m}\\right\\|_{1} \\leqslant 2 \\beta m N M_{\\infty} M_{1} \\\\\n& \\left\\|\\boldsymbol{p}^{\\text {new }}-1 / N \\mathbf{1}\\right\\|_{1} \\leqslant\\left\\|\\mathrm{~J}^{m}\\right\\|_{1} \\leqslant 2 \\beta m N M^{2}\n\\end{aligned}\n$$\n\nwhere $m=\\max _{i} p_{i}\\left(1-p_{i}\\right), M_{1}=\\|\\boldsymbol{X}\\|_{1}=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|_{1}, M=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|,\\|\\boldsymbol{X}\\|_{\\infty}=\\left\\|\\boldsymbol{X}^{T}\\right\\|_{1}=$ $\\max _{i}\\left\\|\\left[X^{T}\\right]_{i}\\right\\|_{1}$ (maximal absolute row sum norm), and $M_{\\infty}=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|_{\\infty}$. Let us quickly mention some auxiliary estimates related to $\\boldsymbol{X}^{T} \\boldsymbol{X}$ :\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{X}^{T} \\boldsymbol{X}\\right\\|_{1} & =\\max _{i} \\sum_{j=1}^{N}\\left|\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant \\max _{i} \\sum_{j=1}^{N}\\left\\|\\boldsymbol{x}_{i}\\right\\|_{\\infty}\\left\\|\\boldsymbol{x}_{j}\\right\\|_{1} \\\\\n& \\leqslant M_{\\infty} \\sum_{j=1}^{N} M_{1}=N M_{\\infty} M_{1}\n\\end{aligned}\n$$\n\nwhere the first inequaltiy is from H\u00f6lder's inequality. We used\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{X}^{T} \\boldsymbol{X}\\right\\|_{1} & =\\max _{i} \\sum_{j=1}^{N}\\left|\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant \\max _{i} \\sum_{j=1}^{N}\\left\\|\\boldsymbol{x}_{i}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\\\\n& \\leqslant M \\sum_{j=1}^{N} M=N M^{2}\n\\end{aligned}\n$$\n\nwhere the first inequality is from H\u00f6lder's inequality (here the same as the Cauchy-Schwarz inequality). See proof of Lemma A24 for the 1-norm bound on $J_{s}$. Everything else follows from the fact that the 1 -norm is sub-multiplicative as induced matrix norm. We consider the minimal $\\|\\boldsymbol{p}\\|$. $$\n\\begin{array}{ll}\n\\min _{\\boldsymbol{p}} & \\|\\boldsymbol{p}\\|^{2} \\\\\n\\text { s.t. } & \\sum_{i} p_{i}=1 \\\\\n& \\forall_{i}: p_{i} \\geq 0\n\\end{array}\n$$\n\nThe solution to this minimization problem is $\\boldsymbol{p}=(1 / N) \\mathbf{1}$. Therefore, we have $1 / \\sqrt{N} \\leqslant\\|\\boldsymbol{p}\\|$ and $1 / N \\leqslant\\|\\boldsymbol{p}\\|^{2}$ Using Eq. (119) we obtain\n\n$$\n1 / \\sqrt{N} \\leqslant\\left\\|\\boldsymbol{p}^{\\mathrm{new}}\\right\\| \\leqslant 1 / \\sqrt{N}+\\sqrt{p_{\\max }}\n$$\n\nMoreover\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{p}^{\\text {new }}\\right\\|^{2} & =\\left(\\boldsymbol{p}^{\\text {new }}\\right)^{T} \\boldsymbol{p}^{\\text {new }}=1 / N+\\left(\\boldsymbol{p}^{\\text {new }}\\right)^{T} \\mathrm{~J}^{m} \\boldsymbol{p} \\leqslant 1 / N+\\left\\|\\mathrm{J}^{m}\\right\\|_{2}\\|\\boldsymbol{p}\\| \\\\\n& \\leqslant 1 / N+\\left\\|J^{m}\\right\\|_{2}\n\\end{aligned}\n$$\n\nsince $\\boldsymbol{p}^{\\text {new }} \\in \\mathrm{S}$ and $\\boldsymbol{p} \\in \\mathrm{S}$. For the fixed point, we have\n\n$$\n\\left\\|\\boldsymbol{p}^{*}\\right\\|^{2}=\\left(\\boldsymbol{p}^{*}\\right)^{T} \\boldsymbol{p}^{*}=1 / N+\\left(\\boldsymbol{p}^{*}\\right)^{T} \\mathrm{~J}^{m} \\boldsymbol{p}^{*} \\leqslant 1 / N+\\left\\|J^{m}\\right\\|_{2}\\left\\|\\boldsymbol{p}^{*}\\right\\|^{2}\n$$\n\nand hence\n\n$$\n1 / N \\leqslant\\left\\|\\boldsymbol{p}^{*}\\right\\|^{2} \\leqslant 1 / N \\frac{1}{1-\\left\\|J^{m}\\right\\|_{2}}=1 / N\\left(1+\\frac{\\left\\|J^{m}\\right\\|_{2}}{1-\\left\\|J^{m}\\right\\|_{2}}\\right)\n$$\n\nTherefore, for small $\\left\\|\\mathrm{J}^{m}\\right\\|_{2}$ we have $\\boldsymbol{p}^{*} \\approx(1 / N) \\mathbf{1}$. A.1.5.3 Many Stable States: Fixed Points Near Stored Patterns. We move on to the next case, where the patterns $\\boldsymbol{x}_{i}$ are well separated. In this case the iteration goes to the pattern to which the initial $\\boldsymbol{\\xi}$ is most similar. If the initial $\\boldsymbol{\\xi}$ is similar to a vector $\\boldsymbol{x}_{i}$ then it will converge to $\\boldsymbol{x}_{i}$ and $\\boldsymbol{p}$ will be $\\boldsymbol{e}_{i}$. The main ingredients are again Banach's Theorem and estimates on the Jacobian norm. -Proof of a fixed point by Banach Fixed Point Theorem. $\\rightarrow$ Mapped Vectors Stay in a Compact Environment. We show that if $\\boldsymbol{x}_{i}$ is sufficient dissimilar to other $\\boldsymbol{x}_{j}$ then there is an compact environment of $\\boldsymbol{x}_{i}$ (a sphere) where the fixed point iteration maps this environment into itself. The idea of the proof is to define a sphere around $\\boldsymbol{x}_{i}$ for which points from the sphere are mapped by $f$ into the sphere. We first need following lemma which bounds the distance $\\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\|$, where $\\boldsymbol{x}_{i}$ is the pattern that is least separated from $\\boldsymbol{\\xi}$ but separated from other patterns. Lemma A4. For a query $\\boldsymbol{\\xi}$ and data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$, there exists a $\\boldsymbol{x}_{i}$ that is least separated from $\\boldsymbol{\\xi}$ while being separated from other $\\boldsymbol{x}_{j}$ with $j \\neq i$ :\n\n$$\n\\begin{aligned}\n& i=\\arg \\max _{k} \\min _{j, j \\neq k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)=\\arg \\max _{k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\max _{j, j \\neq k} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right) \\\\\n& 0 \\leqslant c=\\max _{k} \\min _{j, j \\neq k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)=\\max _{k}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\max _{j, j \\neq k} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)\n\\end{aligned}\n$$\n\nFor $\\boldsymbol{x}_{i}$, the following holds:\n\n$$\n\\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\| \\leqslant 2 \\epsilon M\n$$\n\nwhere\n\n$$\n\\begin{aligned}\nM & =\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\\\\n\\epsilon & =(N-1) \\exp (-\\beta c)\n\\end{aligned}\n$$\n\nProof. For the softmax component $i$ we have:\n\n$$\n\\begin{aligned}\n{\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{i} } & =\\frac{1}{1+\\sum_{j \\neq i} \\exp \\left(\\beta\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\\right)\\right)} \\geq \\frac{1}{1+\\sum_{j \\neq i} \\exp (-\\beta c)} \\\\\n& =\\frac{1}{1+(N-1) \\exp (-\\beta c)}=1-\\frac{(N-1) \\exp (-\\beta c)}{1+(N-1) \\exp (-\\beta c)} \\\\\n& \\geq 1-(N-1) \\exp (-\\beta c)=1-\\epsilon\n\\end{aligned}\n$$\n\nFor softmax components $k \\neq i$ we have\n\n$$\n\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{k}=\\frac{\\exp \\left(\\beta\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\\right)\\right)}{1+\\sum_{j \\neq i} \\exp \\left(\\beta\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\\right)\\right)} \\leqslant \\exp (-\\beta c)=\\frac{\\epsilon}{N-1}\n$$\n\nThe iteration $f$ can be written as\n\n$$\nf(\\boldsymbol{\\xi})=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)=\\sum_{j=1}^{N} \\boldsymbol{x}_{j}\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{j}\n$$\n\nWe now can bound $\\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\|$ :\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\| & =\\left\\|\\boldsymbol{x}_{i}-\\sum_{j=1}^{N}\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{j} \\boldsymbol{x}_{j}\\right\\| \\\\\n& =\\left\\|\\left(1-\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{i}\\right) \\boldsymbol{x}_{i}-\\sum_{j=1, j \\neq i}^{N}\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{j} \\boldsymbol{x}_{j}\\right\\| \\\\\n& \\leqslant \\epsilon\\left\\|\\boldsymbol{x}_{i}\\right\\|+\\frac{\\epsilon}{N-1} \\sum_{j=1, j \\neq i}^{N}\\left\\|\\boldsymbol{x}_{j}\\right\\| \\\\\n& \\leqslant \\epsilon M+\\frac{\\epsilon}{N-1} \\sum_{j=1, j \\neq i}^{N} M=2 \\epsilon M\n\\end{aligned}\n$$\n\nWe define $\\Delta_{i}$, i.e. the separation of pattern $\\boldsymbol{x}_{i}$ from data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ as:\n\n$$\n\\Delta_{i}=\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\max _{j, j \\neq i} \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\n$$\n\nThe pattern is separated from the other data if $0<\\Delta_{i}$. Using the parallelogram identity, $\\Delta_{i}$ can also be expressed as\n\n$$\n\\begin{aligned}\n\\Delta_{i} & =\\min _{j, j \\neq i} \\frac{1}{2}\\left(\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}+\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right) \\\\\n& =\\frac{1}{2}\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}-\\frac{1}{2} \\max _{j, j \\neq i}\\left(\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right)\n\\end{aligned}\n$$\n\nFor $\\left\\|\\boldsymbol{x}_{i}\\right\\|=\\left\\|\\boldsymbol{x}_{j}\\right\\|$ we have $\\Delta_{i}=1 / 2 \\min _{j, j \\neq i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}$. Next we define the sphere where we want to apply Banach fixed point theorem. Definition 3 (Sphere $\\mathrm{S}_{i}$ ). The sphere $\\mathrm{S}_{i}$ is defined as\n\n$$\n\\mathrm{S}_{i}:=\\left\\{\\boldsymbol{\\xi} \\left\\lvert\\,\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| \\leqslant \\frac{1}{\\beta N M}\\right.\\right\\}\n$$\n\nLemma A5. With $\\boldsymbol{\\xi}$ given, if the assumptions\n\nA1: $\\boldsymbol{\\xi}$ is inside sphere: $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$,\nA2: data point $\\boldsymbol{x}_{i}$ is well separated from the other data:\n\n$$\n\\Delta_{i} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nhold, then $f(\\boldsymbol{\\xi})$ is inside the sphere: $f(\\boldsymbol{\\xi}) \\in \\mathrm{S}_{i}$. Therefore, with assumption (A2), $f$ is a mapping from $\\mathrm{S}_{i}$ into $\\mathrm{S}_{i}$. Proof. We need the separation $\\tilde{\\Delta}_{i}$ of $\\boldsymbol{\\xi}$ from the data. $$\n\\tilde{\\Delta}_{i}=\\min _{j, j \\neq i}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)\n$$\n\nUsing the Cauchy-Schwarz inequality, we obtain for $1 \\leqslant j \\leqslant N$ :\n\n$$\n\\left|\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\n$$\n\nWe have the lower bound\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{i} & \\geq \\min _{j, j \\neq i}\\left(\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\\right)-\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}+\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\\right)\\right) \\\\\n& =-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M+\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{i}-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M \\\\\n& \\geq \\Delta_{i}-\\frac{2}{\\beta N}\n\\end{aligned}\n$$\n\nwhere we used the assumption (A1) of the lemma. From the proof in Lemma A4 we have\n\n$$\np_{\\max }=\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{i} \\geq 1-(N-1) \\exp \\left(-\\beta \\tilde{\\Delta}_{i}\\right)=1-\\tilde{\\epsilon}\n$$\n\nLemma A4 states that\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\| & \\leqslant 2 \\tilde{\\epsilon} M=2(N-1) \\exp \\left(-\\beta \\tilde{\\Delta}_{i}\\right) M \\\\\n& \\leqslant 2(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-\\frac{2}{\\beta N}\\right)\\right) M\n\\end{aligned}\n$$\n\nWe have\n\n$$\n\\begin{aligned}\n& \\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\| \\\\\n& \\leqslant 2(N-1) \\exp \\left(-\\beta\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)-\\frac{2}{\\beta N}\\right)\\right) M \\\\\n& =2(N-1) \\exp \\left(-\\ln \\left(2(N-1) N \\beta M^{2}\\right)\\right) M \\\\\n& =\\frac{1}{N \\beta M}\n\\end{aligned}\n$$\n\nwhere we used assumption (A2) of the lemma. Therefore, $f(\\boldsymbol{\\xi})$ is a mapping from the sphere $\\mathrm{S}_{i}$ into the sphere $\\mathrm{S}_{i}$ : If $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$ then $f(\\boldsymbol{\\xi}) \\in \\mathrm{S}_{i}$. ## - Contraction mapping. For applying Banach fixed point theorem we need to show that $f$ is contraction in the compact environment $\\mathrm{S}_{i}$. Lemma A6. Assume that\nA1:\n\n$$\n\\Delta_{i} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nthen $f$ is a contraction mapping in $\\mathrm{S}_{i}$. Proof. The version of the mean value theorem Lemma A32 states for $J^{m}=\\int_{0}^{1} J\\left(\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{x}_{i}\\right) \\mathrm{d} \\lambda$ :\n\n$$\nf(\\boldsymbol{\\xi})=f\\left(\\boldsymbol{x}_{i}\\right)+\\mathrm{J}^{m}\\left(\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right)\n$$\n\nTherefore\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-f\\left(\\boldsymbol{x}_{i}\\right)\\right\\| \\leqslant\\left\\|\\mathrm{J}^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|\n$$\n\nWe define $\\tilde{\\boldsymbol{\\xi}}=\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{x}_{i}$ for some $\\lambda \\in[0,1]$. From the proof in Lemma A4 we have\n\n$$\n\\begin{aligned}\np_{\\max }(\\tilde{\\boldsymbol{\\xi}}) & =\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\tilde{\\boldsymbol{\\xi}}\\right)\\right]_{i} \\geq 1-(N-1) \\exp \\left(-\\beta \\tilde{\\Delta}_{i}\\right)=1-\\tilde{\\epsilon} \\\\\n\\tilde{\\epsilon} & =(N-1) \\exp \\left(-\\beta \\tilde{\\Delta}_{i}\\right) \\\\\n\\tilde{\\Delta}_{i} & =\\min _{j, j \\neq i}\\left(\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{i}-\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{j}\\right)\n\\end{aligned}\n$$\n\nFirst we compute an upper bound on $\\tilde{\\epsilon}$. We need the separation $\\tilde{\\Delta}_{i}$ of $\\boldsymbol{\\xi}$ from the data. Using the Cauchy-Schwarz inequality, we obtain for $1 \\leqslant j \\leqslant N$ :\n\n$$\n\\left|\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\leqslant\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M\n$$\n\nWe have the lower bound on $\\tilde{\\Delta}_{i}$ :\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{i} & \\geq \\min _{j, j \\neq i}\\left(\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M\\right)-\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}+\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M\\right)\\right) \\\\\n& =-2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M+\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{i}-2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M \\\\\n& \\geq \\Delta_{i}-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\n\\end{aligned}\n$$\n\nwhere we used $\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\|=\\lambda\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|$. From the definition of $\\tilde{\\epsilon}$ in Eq. (152) we have\n\n$$\n\\begin{aligned}\n\\tilde{\\epsilon} & =(N-1) \\exp \\left(-\\beta \\tilde{\\Delta}_{i}\\right) \\\\\n& \\leqslant(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\\right)\\right) \\\\\n& \\leqslant(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-\\frac{2}{\\beta N}\\right)\\right)\n\\end{aligned}\n$$\n\nwhere we used $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$, therefore $\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| \\leqslant \\frac{1}{\\beta N M}$. Next we compute an lower bound on $\\tilde{\\epsilon}$. We start with an upper on $\\tilde{\\Delta}_{i}$ :\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{i} & \\leqslant \\min _{j, j \\neq i}\\left(\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}+\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M\\right)-\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}-\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M\\right)\\right) \\\\\n& =2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M+\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{i}+2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\| M \\\\\n& \\leqslant \\Delta_{i}+2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\n\\end{aligned}\n$$\n\nwhere we used $\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{x}_{i}\\right\\|=\\lambda\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|$. From the definition of $\\tilde{\\epsilon}$ in Eq. (152) we have\n\n$$\n\\begin{aligned}\n\\tilde{\\epsilon} & =(N-1) \\exp \\left(-\\beta \\tilde{\\Delta}_{i}\\right) \\\\\n& \\geq(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}+2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| M\\right)\\right) \\\\\n& \\geq(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}+\\frac{2}{\\beta N}\\right)\\right)\n\\end{aligned}\n$$\n\nwhere we used $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$, therefore $\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| \\leqslant \\frac{1}{\\beta N M}$. Now we bound the Jacobian. We can assume $\\tilde{\\epsilon} \\leqslant 0.5$ otherwise $(1-\\tilde{\\epsilon}) \\leqslant 0.5$ in the following. From the proof of Lemma A24 we know for $p_{\\max }(\\tilde{\\boldsymbol{\\xi}}) \\geq 1-\\tilde{\\epsilon}$, then $p_{i}(\\tilde{\\boldsymbol{\\xi}}) \\leqslant \\tilde{\\epsilon}$ for $p_{i}(\\tilde{\\boldsymbol{\\xi}}) \\neq p_{\\max }(\\tilde{\\boldsymbol{\\xi}})$. Therefore, $p_{i}(\\tilde{\\boldsymbol{\\xi}})\\left(1-p_{i}(\\tilde{\\boldsymbol{\\xi}})\\right) \\leqslant m \\leqslant \\tilde{\\epsilon}(1-\\tilde{\\epsilon})$ for all $i$. Next we use the derived upper and lower bound on $\\tilde{\\epsilon}$ in previous Eq. (61) in Lemma A2:\n\n$$\n\\begin{aligned}\n\\|J(\\tilde{\\boldsymbol{\\xi}})\\|_{2} & \\leqslant 2 \\beta N M^{2} \\tilde{\\epsilon}-2 \\tilde{\\epsilon}^{2} \\beta N M^{2} \\\\\n& \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-\\frac{2}{\\beta N}\\right)\\right)- \\\\\n& 2(N-1)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{i}+\\frac{2}{\\beta N}\\right)\\right) \\beta N M^{2}\n\\end{aligned}\n$$\n\nThe bound Eq. (160) holds for the mean $J^{m}$, too, since it averages over $J(\\tilde{\\boldsymbol{\\xi}})$ :\n\n$$\n\\begin{aligned}\n&\\left\\|J^{m}\\right\\|_{2} \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-\\frac{2}{\\beta N}\\right)\\right)- \\\\\n& 2(N-1)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{i}+\\frac{2}{\\beta N}\\right)\\right) \\beta N M^{2}\n\\end{aligned}\n$$\n\nThe assumption of the lemma is\n\n$$\n\\Delta_{i} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nThis is\n\n$$\n\\Delta_{i}-\\frac{2}{\\beta N} \\geq \\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nTherefore, the spectral norm $\\|\\mathrm{J}\\|_{2}$ can be bounded by:\n\n$$\n\\begin{aligned}\n& \\left\\|J^{m}\\right\\|_{2} \\leqslant 2 \\beta(N-1) \\exp \\left(-\\beta \\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\\right) N M^{2}- \\\\\n& 2(N-1)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{i}+\\frac{2}{\\beta N}\\right)\\right) \\beta N M^{2} \\\\\n& =2 \\beta(N-1) \\frac{1}{2(N-1) N \\beta M^{2}} N M^{2}- \\\\\n& 2(N-1)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{i}+\\frac{2}{\\beta N}\\right)\\right) \\beta N M^{2} \\\\\n& =1-2(N-1)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{i}+\\frac{2}{\\beta N}\\right)\\right) \\beta N M^{2}<1\n\\end{aligned}\n$$\n\nTherefore, $f$ is a contraction mapping in $\\mathrm{S}_{i}$.",
    "hopfield-15": "-Banach Fixed Point Theorem. Now we have all ingredients to apply Banach fixed point theorem. ## Lemma A7. Assume that\n\nAI:\n\n$$\n\\Delta_{i} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nthen $f$ has a fixed point in $\\mathrm{S}_{i}$. Proof. We use Banach fixed point theorem: Lemma A5 says that $f$ maps from $\\mathrm{S}_{i}$ into $\\mathrm{S}_{i}$. Lemma A6 says that $f$ is a contraction mapping in $\\mathrm{S}_{i}$. ## - Contraction mapping with a fixed point. We have shown that a fixed point exists. We want to know how fast the iteration converges to the fixed point. Let $\\boldsymbol{x}_{i}^{*}$ be the fixed point of the iteration $f$ in the sphere $\\mathrm{S}_{i}$. Using the mean value theorem Lemma A32, we have with $\\mathrm{J}^{m}=\\int_{0}^{1} \\mathrm{~J}\\left(\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{x}_{i}^{*}\\right) \\mathrm{d} \\lambda$ :\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|=\\left\\|f(\\boldsymbol{\\xi})-f\\left(\\boldsymbol{x}_{i}^{*}\\right)\\right\\| \\leqslant\\left\\|\\mathrm{J}^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\|\n$$\n\nAccording to Lemma A24, if $p_{\\max }=\\max _{i} p_{i} \\geq 1-\\epsilon$ for all $\\tilde{\\boldsymbol{x}}=\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{x}_{i}^{*}$, then the spectral norm of the Jacobian is bounded by\n\n$$\n\\left\\|\\mathrm{J}_{s}(\\tilde{\\boldsymbol{x}})\\right\\|_{2}<2 \\epsilon \\beta\n$$\n\nThe norm of Jacobian at $\\tilde{\\boldsymbol{x}}$ is bounded\n\n$$\n\\|\\mathrm{J}(\\tilde{\\boldsymbol{x}})\\|_{2} \\leqslant 2 \\beta\\|\\boldsymbol{X}\\|_{2}^{2} \\epsilon \\leqslant 2 \\beta N M^{2} \\epsilon\n$$\n\nWe used that the spectral norm $\\|\\cdot\\|_{2}$ is bounded by the Frobenius norm $\\|\\cdot\\|_{F}$ which can be expressed by the norm squared of its column vectors:\n\n$$\n\\|\\boldsymbol{X}\\|_{2} \\leqslant\\|\\boldsymbol{X}\\|_{F}=\\sqrt{\\sum_{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}}\n$$\n\nTherefore\n\n$$\n\\|\\boldsymbol{X}\\|_{2}^{2} \\leqslant N M^{2}\n$$\n\nThe norm of Jacobian of the fixed point iteration is bounded\n\n$$\n\\left\\|J^{m}\\right\\|_{2} \\leqslant 2 \\beta\\|\\boldsymbol{X}\\|_{2}^{2} \\epsilon \\leqslant 2 \\beta N M^{2} \\epsilon\n$$\n\nThe separation of pattern $\\boldsymbol{x}_{i}$ from data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ is\n\n$$\n\\Delta_{i}=\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\max _{j, j \\neq i} \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\n$$\n\nWe need the separation $\\tilde{\\Delta}_{i}$ of $\\tilde{\\boldsymbol{x}}=\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{x}_{i}^{*}$ from the data:\n\n$$\n\\tilde{\\Delta}_{i}=\\min _{j, j \\neq i}\\left(\\tilde{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{i}-\\tilde{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)\n$$\n\nWe compute a lower bound on $\\tilde{\\Delta}_{i}$. Using the Cauchy-Schwarz inequality, we obtain for $1 \\leqslant j \\leqslant N$ :\n\n$$\n\\left|\\tilde{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\leqslant\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\| M\n$$\n\nWe have the lower bound\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{i} & \\geq \\min _{j, j \\neq i}\\left(\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\| M\\right)-\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}+\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\| M\\right)\\right) \\\\\n& =-2\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\| M+\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{i}-2\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\| M\n\\end{aligned}\n$$\n\nSince\n\n$$\n\\begin{aligned}\n\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{x}_{i}\\right\\| & =\\left\\|\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\| \\\\\n& \\leqslant \\lambda\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|+(1-\\lambda)\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\| \\\\\n& \\leqslant \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\}\n\\end{aligned}\n$$\n\nwe have\n\n$$\n\\tilde{\\Delta}_{i} \\geq \\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\n$$\n\nFor the softmax component $i$ we have:\n\n$$\n\\begin{aligned}\n& {\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\tilde{\\boldsymbol{\\xi}}\\right)\\right]_{i}=\\frac{1}{1+\\sum_{j \\neq i} \\exp \\left(\\beta\\left(\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{j}-\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{i}\\right)\\right)}} \\\\\n& \\geq \\frac{1}{1+\\sum_{j \\neq i} \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)} \\\\\n& =\\frac{1}{1+(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)} \\\\\n& =1-\\frac{(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)}{1+(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)} \\\\\n& \\geq 1-(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right) \\\\\n& =1-\\epsilon\n\\end{aligned}\n$$\n\nTherefore\n\n$$\n\\epsilon=(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n$$\n\nWe can bound the spectral norm of the Jacobian, which upper bounds the Lipschitz constant:\n\n$$\n\\left\\|\\mathrm{J}^{m}\\right\\|_{2} \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n$$\n\nFor a contraction mapping we require\n\n$$\n\\left\\|J^{m}\\right\\|_{2}<1\n$$\n\nwhich can be ensured by\n\n$$\n2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)<1\n$$\n\nSolving this inequality for $\\Delta_{i}$ gives\n\n$$\n\\Delta_{i}>2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nIn an environment around $\\boldsymbol{x}_{i}^{*}$ in which Eq. (183) holds, $f$ is a contraction mapping and every point converges under the iteration $f$ to $\\boldsymbol{x}_{i}^{*}$ when the iteration stays in the environment. After every iteration the mapped point $f(\\boldsymbol{\\xi})$ is closer to the fixed point $\\boldsymbol{x}_{i}^{*}$ than the original point $\\boldsymbol{x}_{i}$ :\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant\\left\\|\\mathbf{J}^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\|<\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\|\n$$\n\nUsing\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant\\left\\|J^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant\\left\\|J^{m}\\right\\|_{2}\\|\\boldsymbol{\\xi}-f(\\boldsymbol{\\xi})\\|+\\left\\|J^{m}\\right\\|_{2}\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|\n$$\n\nwe obtain\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant \\frac{\\left\\|\\mathrm{J}^{m}\\right\\|_{2}}{1-\\left\\|\\mathrm{J}^{m}\\right\\|_{2}}\\|\\boldsymbol{\\xi}-f(\\boldsymbol{\\xi})\\|\n$$\n\nFor large $\\Delta_{i}$ the iteration is close to the fixed point even after one update. This has been confirmed in several experiments. A.1.5.4 Metastable States: Fixed Points Near Mean of Similar Patterns. The proof concept is the same as for a single pattern but now for the arithmetic mean of similar patterns. ## -Bound on the Jacobian. The Jacobian of the fixed point iteration is\n\n$$\n\\mathrm{J}=\\beta \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{X}^{T}=\\boldsymbol{X} \\mathrm{J}_{s} \\boldsymbol{X}^{T}\n$$\n\nIf we consider $p_{i}$ as the probability of selecting the vector $\\boldsymbol{x}_{i}$, then we can define expectations as $\\mathrm{E}_{\\boldsymbol{p}}[f(\\boldsymbol{x})]=\\sum_{i=1}^{N} p_{i} f\\left(\\boldsymbol{x}_{i}\\right)$. In this setting the matrix\n\n$$\n\\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p p}^{T}\\right) \\boldsymbol{X}^{T}\n$$\n\nis the covariance matrix of data $\\boldsymbol{X}$ when its vectors are selected according to the probability $\\boldsymbol{p}$ :\n\n$$\n\\begin{aligned}\n& \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p}^{T}\\right) \\boldsymbol{X}^{T}=\\boldsymbol{X} \\operatorname{diag}(\\boldsymbol{p}) \\boldsymbol{X}^{T}-\\boldsymbol{X} \\boldsymbol{p} \\boldsymbol{p}^{T} \\boldsymbol{X}^{T} \\\\\n& =\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\mathrm{E}_{\\boldsymbol{p}}\\left[\\boldsymbol{x} \\boldsymbol{x}^{T}\\right]-\\mathrm{E}_{\\boldsymbol{p}}[\\boldsymbol{x}] \\mathrm{E}_{\\boldsymbol{p}}[\\boldsymbol{x}]^{T}=\\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\n\\end{aligned}\n$$\n\ntherefore we have\n\n$$\n\\mathrm{J}=\\beta \\operatorname{Var}_{\\boldsymbol{p}}[\\boldsymbol{x}]\n$$\n\nWe now elaborate more on this interpretation as variance. Specifically the singular values of J (or in other words: the covariance) should be reasonably small. The singular values are the key to ensure convergence of the iteration Eq. (57).",
    "hopfield-16": "Next we present some thoughts. 1. It's clear that the largest eigenvalue of the covariance matrix (equal to the largest singular value) is the variance in the direction of the eigenvector associated with the largest eigenvalue. 2. Furthermore the variance goes to zero as one $p_{i}$ goes to one, since only one pattern is chosen and there is no variance. 3. The variance is reasonable small if all patterns are chosen with equal probability. 4. The variance is small if few similar patterns are chosen with high probability. If the patterns are sufficient similar, then the spectral norm of the covariance matrix is smaller than one.",
    "hopfield-17": "The first three issues have already been adressed. Now we focus on the last one in greater detail. We assume that the first $l$ patterns are much more probable (and similar to one another) than the other patterns. Therefore, we define:\n\n$$\n\\begin{aligned}\nM & :=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\\\\n\\gamma & =\\sum_{i=l+1}^{N} p_{i} \\leqslant \\epsilon \\\\\n1-\\gamma & =\\sum_{i=1}^{l} p_{i} \\geq 1-\\epsilon \\\\\n\\tilde{p}_{i} & :=\\frac{p_{i}}{1-\\gamma} \\leqslant p_{i} /(1-\\epsilon) \\\\\n\\sum_{i=1}^{l} \\tilde{p}_{i} & =1 \\\\\n\\boldsymbol{m}_{\\boldsymbol{x}} & =\\frac{1}{l} \\sum_{i=1}^{l} \\boldsymbol{x}_{i} \\\\\nm_{\\max } & =\\max _{1 \\leqslant i \\leqslant l}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\n\\end{aligned}\n$$\n\n$M$ is an upper bound on the Euclidean norm of the patterns, which are vectors. $\\epsilon$ is an upper bound on the probability $\\gamma$ of not choosing one of the first $l$ patterns, while $1-\\epsilon$ is a lower bound the probability $(1-\\gamma)$ of choosing one of the first $l$ patterns. $\\boldsymbol{m}_{\\boldsymbol{x}}$ is the arithmetic mean (the center) of the first $l$ patterns. $m_{\\max }$ is the maximal distance of the patterns to the center $\\boldsymbol{m}_{\\boldsymbol{x}} \\cdot \\tilde{\\boldsymbol{p}}$ is the probability $\\boldsymbol{p}$ normalized for the first $l$ patterns. The variance of the first $l$ patterns is\n\n$$\n\\begin{aligned}\n\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right] & =\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\sum_{i=1}^{l} \\tilde{p}_{i}\\left(\\boldsymbol{x}_{i}-\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)\\left(\\boldsymbol{x}_{i}-\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)^{T}\n\\end{aligned}\n$$\n\nLemma A8.",
    "hopfield-18": "With the definitions in Eq. (193) to Eq. (200), the following bounds on the norm $\\|J\\|_{2}$ of the Jacobian of the fixed point iteration hold. The $\\gamma$-bound for $\\|\\mathrm{J}\\|_{2}$ is\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant \\beta\\left((1-\\gamma) m_{\\max }^{2}+\\gamma 2(2-\\gamma) M^{2}\\right)\n$$\n\nand the $\\epsilon$-bound for $\\|\\mathrm{J}\\|_{2}$ is:\n\n$$\n\\|J\\|_{2} \\leqslant \\beta\\left(m_{\\max }^{2}+\\epsilon 2(2-\\epsilon) M^{2}\\right)\n$$\n\nProof. The variance $\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]$ can be expressed as:\n\n$$\n\\begin{aligned}\n& (1-\\gamma) \\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]=\\sum_{i=1}^{l} p_{i}\\left(\\boldsymbol{x}_{i}-\\frac{1}{1-\\gamma} \\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\boldsymbol{x}_{i}-\\frac{1}{1-\\gamma} \\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right) \\frac{1}{1-\\gamma}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}-\\frac{1}{1-\\gamma}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& +\\frac{\\sum_{i=1}^{l} p_{i}}{(1-\\gamma)^{2}}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}=\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\frac{1}{1-\\gamma}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}+\\left(1-\\frac{1}{1-\\gamma}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}-\\frac{\\gamma}{1-\\gamma}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\n\\end{aligned}\n$$\n\nTherefore, we have\n\n$$\n\\begin{aligned}\n& \\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =(1-\\gamma) \\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]+\\frac{\\gamma}{1-\\gamma}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\n\\end{aligned}\n$$\n\nWe now can reformulate the Jacobian J:\n\n$$\n\\begin{aligned}\n\\mathrm{J} & =\\beta\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}+\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}\\right. \\\\\n& \\left.-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}+\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}+\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right) \\\\\n& =\\beta\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right. \\\\\n& +\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& \\left.-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T}-\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right) \\\\\n& =\\beta\\left((1-\\gamma) \\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]+\\frac{\\gamma}{1-\\gamma}\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right. \\\\\n& +\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& \\left.-\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T}-\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right)\n\\end{aligned}\n$$\n\nThe spectral norm of an outer product of two vectors is the product of the Euclidean norms of the vectors:\n\n$$\n\\left\\|\\boldsymbol{a} \\boldsymbol{b}^{T}\\right\\|_{2}=\\sqrt{\\lambda_{\\max }\\left(\\boldsymbol{b} \\boldsymbol{a}^{T} \\boldsymbol{a} \\boldsymbol{b}^{T}\\right)}=\\|\\boldsymbol{a}\\| \\sqrt{\\lambda_{\\max }\\left(\\boldsymbol{b} \\boldsymbol{b}^{T}\\right)}=\\|\\boldsymbol{a}\\|\\|\\boldsymbol{b}\\|\n$$\n\nsince $\\boldsymbol{b} \\boldsymbol{b}^{T}$ has eigenvector $\\boldsymbol{b} /\\|\\boldsymbol{b}\\|$ with eigenvalue $\\|\\boldsymbol{b}\\|^{2}$ and otherwise zero eigenvalues. We now bound the norms of some matrices and vectors:\n\n$$\n\\begin{aligned}\n\\left\\|\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right\\| & \\leqslant \\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\leqslant(1-\\gamma) M \\\\\n\\left\\|\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right\\| & \\leqslant \\sum_{i=l+1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\leqslant \\gamma M \\\\\n\\left\\|\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}\\right\\|_{2} & \\leqslant \\sum_{i=l+1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}\\right\\|_{2}=\\sum_{i=l+1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2} \\leqslant \\sum_{i=l+1}^{N} p_{i} M^{2}=\\gamma M^{2}\n\\end{aligned}\n$$\n\nIn order to bound the variance of the first $l$ patterns, we compute the vector $a$ that minimizes\n\n$$\nf(\\boldsymbol{a})=\\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right\\|^{2}=\\sum_{i=1}^{l} p_{i}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right)^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right)\n$$\n\nThe solution to\n\n$$\n\\frac{\\partial f(\\boldsymbol{a})}{\\partial \\boldsymbol{a}}=2 \\sum_{i=1}^{N} p_{i}\\left(\\boldsymbol{a}-\\boldsymbol{x}_{i}\\right)=0\n$$\n\nis\n\n$$\n\\boldsymbol{a}=\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\n$$\n\nThe Hessian of $f$ is positive definite since\n\n$$\n\\frac{\\partial^{2} f(\\boldsymbol{a})}{\\partial \\boldsymbol{a}^{2}}=2 \\sum_{i=1}^{N} p_{i} \\boldsymbol{I}=2 \\boldsymbol{I}\n$$\n\nand $f$ is a convex function. Hence, the mean\n\n$$\n\\overline{\\boldsymbol{x}}:=\\sum_{i=1}^{N} p_{i} \\boldsymbol{x}_{i}\n$$\n\n$\\operatorname{minimizes} \\sum_{i=1}^{N} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{a}\\right\\|^{2}$. Therefore, we have\n\n$$\n\\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2} \\leqslant \\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|^{2} \\leqslant(1-\\gamma) m_{\\max }^{2}\n$$\n\nWe now bound the variance on the first $l$ patterns:\n\n$$\n\\begin{aligned}\n(1-\\gamma)\\left\\|\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]\\right\\|_{2} & \\leqslant \\sum_{i=1}^{l} p_{i}\\left\\|\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)^{T}\\right\\|_{2} \\\\\n& =\\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2} \\leqslant \\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|^{2} \\leqslant(1-\\gamma) m_{\\max }^{2}\n\\end{aligned}\n$$\n\nWe obtain for the spectral norm of J :\n\n$$\n\\begin{aligned}\n\\|J\\|_{2} & \\leqslant \\beta\\left((1-\\gamma)\\left\\|\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]\\right\\|_{2}\\right. \\\\\n& +\\frac{\\gamma}{1-\\gamma}\\left\\|\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right\\|_{2} \\\\\n& +\\left\\|\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}\\right\\|_{2}+\\left\\|\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right\\|_{2} \\\\\n& \\left.+\\left\\|\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right\\|_{2}+\\left\\|\\left(\\sum_{i=l+1}^{N} p_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} p_{i} \\boldsymbol{x}_{i}\\right)^{T}\\right\\|_{2}\\right) \\\\\n& \\leqslant \\beta\\left((1-\\gamma)\\left\\|\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]\\right\\|_{2}+\\gamma(1-\\gamma) M^{2}+\\gamma M^{2}+\\gamma^{2} M^{2}+\\right. \\\\\n& \\left.\\gamma(1-\\gamma) M^{2}+\\gamma(1-\\gamma) M^{2}\\right) \\\\\n& =\\beta\\left((1-\\gamma)\\left\\|\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l]}\\right]\\right\\|_{2}+\\gamma 2(2-\\gamma) M^{2}\\right)\n\\end{aligned}\n$$\n\nCombining the previous two estimates immediately leads to Eq.",
    "hopfield-19": "(201). The function $h(x)=x 2(2-x)$ has the derivative $h^{\\prime}(x)=4(1-x)$. Therefore, $h(x)$ is monotone increasing for $x<1$. For $0 \\leqslant \\gamma \\leqslant \\epsilon<1$, we can immediately deduce that $\\gamma 2(2-\\gamma) \\leqslant \\epsilon 2(2-\\epsilon)$. Since $\\epsilon$ is larger than $\\gamma$, we obtain the following $\\epsilon$-bound for $\\|J\\|_{2}$ :\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant \\beta\\left(m_{\\max }^{2}+\\epsilon 2(2-\\epsilon) M^{2}\\right)\n$$\n\nWe revisit the bound on $(1-\\gamma) \\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]$. The trace $\\sum_{k=1}^{d} e_{k}$ is the sum of the eigenvalues $e_{k}$. The spectral norm is equal to the largest eigenvalue $e_{1}$, that is, the largest singular value. We obtain:\n\n$$\n\\begin{aligned}\n\\left\\|\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right]\\right\\|_{2} & =\\operatorname{Tr}\\left(\\sum_{i=1}^{l} p_{i}\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)^{T}\\right)-\\sum_{k=2}^{d} e_{k} \\\\\n& =\\sum_{i=1}^{l} p_{i} \\operatorname{Tr}\\left(\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)\\left(\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right)^{T}\\right)-\\sum_{k=2}^{d} e_{k} \\\\\n& =\\sum_{i=1}^{l} p_{i}\\left\\|\\boldsymbol{x}_{i}-\\overline{\\boldsymbol{x}}\\right\\|^{2}-\\sum_{k=2}^{d} e_{k}\n\\end{aligned}\n$$\n\nTherefore, the tightness of the bound depends on eigenvalues which are not the largest.",
    "hopfield-20": "That is variations which are not along the strongest variation weaken the bound. -Proof of a fixed point by Banach Fixed Point Theorem. Without restricting the generality, we assume that the first $l$ patterns are much more probable (and similar to one another) than the other patterns. Therefore, we define:\n\n$$\n\\begin{aligned}\nM & :=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\\\\n\\gamma & =\\sum_{i=l+1}^{N} p_{i} \\leqslant \\epsilon \\\\\n1-\\gamma & =\\sum_{i=1}^{l} p_{i} \\geq 1-\\epsilon \\\\\n\\tilde{p}_{i} & :=\\frac{p_{i}}{1-\\gamma} \\leqslant p_{i} /(1-\\epsilon) \\\\\n\\sum_{i=1}^{l} \\tilde{p}_{i} & =1 \\\\\n\\boldsymbol{m}_{\\boldsymbol{x}} & =\\frac{1}{l} \\sum_{i=1}^{l} \\boldsymbol{x}_{i} \\\\\nm_{\\max } & =\\max _{1 \\leqslant i \\leqslant l}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\n\\end{aligned}\n$$\n\n$M$ is an upper bound on the Euclidean norm of the patterns, which are vectors. $\\epsilon$ is an upper bound on the probability $\\gamma$ of not choosing one of the first $l$ patterns, while $1-\\epsilon$ is a lower bound the probability $(1-\\gamma)$ of choosing one of the first $l$ patterns. $\\boldsymbol{m}_{\\boldsymbol{x}}$ is the arithmetic mean (the center) of the first $l$ patterns. $m_{\\text {max }}$ is the maximal distance of the patterns to the center $\\boldsymbol{m}_{\\boldsymbol{x}} \\cdot \\tilde{\\boldsymbol{p}}$ is the probability $\\boldsymbol{p}$ normalized for the first $l$ patterns. -Mapped vectors stay in a compact environment. We show that if $\\boldsymbol{m}_{\\boldsymbol{x}}$ is sufficient dissimilar to other $\\boldsymbol{x}_{j}$ with $l<j$ then there is an compact environment of $\\boldsymbol{m}_{\\boldsymbol{x}}$ (a sphere) where the fixed point iteration maps this environment into itself. The idea of the proof is to define a sphere around $\\boldsymbol{m}_{\\boldsymbol{x}}$ for which the points from the sphere are mapped by $f$ into the sphere. We first need following lemma which bounds the distance $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-f(\\boldsymbol{\\xi})\\right\\|$ of a $\\boldsymbol{\\xi}$ which is close to $\\boldsymbol{m}_{\\boldsymbol{x}}$. Lemma A9. For a query $\\boldsymbol{\\xi}$ and data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)$, we define\n\n$$\n0 \\leqslant c=\\min _{j, l<j}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{\\xi}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\max _{j, l<j} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\n$$\n\nThe following holds:\n\n$$\n\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-f(\\boldsymbol{\\xi})\\right\\| \\leqslant m_{\\max }+2 \\gamma M \\leqslant m_{\\max }+2 \\epsilon M\n$$\n\nwhere\n\n$$\n\\begin{aligned}\nM & =\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\\\\n\\epsilon & =(N-l) \\exp (-\\beta c)\n\\end{aligned}\n$$\n\nProof. Let $s=\\arg \\max _{j, j \\leqslant l} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}$, therefore $\\boldsymbol{\\xi}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}=\\frac{1}{l} \\sum_{i=1}^{l} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i} \\leqslant \\frac{1}{l} \\sum_{i=1}^{l} \\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{s}=\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{s}$. For softmax components $j$ with $l<j$ we have\n\n$$\n\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{j}=\\frac{\\exp \\left(\\beta\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{s}\\right)\\right)}{1+\\sum_{k, k \\neq s} \\exp \\left(\\beta\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{k}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{s}\\right)\\right)} \\leqslant \\exp (-\\beta c)=\\frac{\\epsilon}{N-l}\n$$\n\nsince $\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{s}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j} \\geq \\boldsymbol{\\xi}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}$ for each $j$ with $l<j$, therefore $\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{s}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j} \\geq c$\nThe iteration $f$ can be written as\n\n$$\nf(\\boldsymbol{\\xi})=\\boldsymbol{X}_{\\mathrm{softmax}}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)=\\sum_{j=1}^{N} \\boldsymbol{x}_{j}\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{j}\n$$\n\nWe set $p_{i}=\\left[\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right]_{i}$, therefore $\\sum_{i=1}^{l} p_{i}=1-\\gamma \\geq 1-\\epsilon$ and $\\sum_{i=l+1}^{N} p_{i}=\\gamma \\leqslant \\epsilon$. Therefore\n\n$$\n\\begin{aligned}\n& \\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma} \\boldsymbol{x}_{j}\\right\\|^{2}=\\left\\|\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right)\\right\\|^{2} \\\\\n& =\\sum_{j=1, k=1}^{l} \\frac{p_{j}}{1-\\gamma} \\frac{p_{k}}{1-\\gamma}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right)^{T}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{k}\\right) \\\\\n& =\\frac{1}{2} \\sum_{j=1, k=1}^{l} \\frac{p_{j}}{1-\\gamma} \\frac{p_{k}}{1-\\gamma}\\left(\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right\\|^{2}+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{k}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{j}-\\boldsymbol{x}_{k}\\right\\|^{2}\\right) \\\\\n& =\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma}\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right\\|^{2}-\\frac{1}{2} \\sum_{j=1, k=1}^{l} \\frac{p_{j}}{1-\\gamma} \\frac{p_{k}}{1-\\gamma}\\left\\|\\boldsymbol{x}_{j}-\\boldsymbol{x}_{k}\\right\\|^{2} \\\\\n& \\leqslant \\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma}\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right\\|^{2} \\leqslant m_{\\max }^{2}\n\\end{aligned}\n$$\n\nIt follows that\n\n$$\n\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma} \\boldsymbol{x}_{j}\\right\\| \\leqslant m_{\\max }\n$$\n\nWe now can bound $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-f(\\boldsymbol{\\xi})\\right\\|$ :\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-f(\\boldsymbol{\\xi})\\right\\| & =\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{N} p_{j} \\boldsymbol{x}_{j}\\right\\| \\\\\n& =\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} p_{j} \\boldsymbol{x}_{j}-\\sum_{j=l+1}^{N} p_{j} \\boldsymbol{x}_{j}\\right\\| \\\\\n& =\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma} \\boldsymbol{x}_{j}+\\frac{\\gamma}{1-\\gamma} \\sum_{j=1}^{l} p_{j} \\boldsymbol{x}_{j}-\\sum_{j=l+1}^{N} p_{j} \\boldsymbol{x}_{j}\\right\\| \\\\\n& \\leqslant\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma} \\boldsymbol{x}_{j}\\right\\|+\\frac{\\gamma}{1-\\gamma}\\left\\|\\sum_{j=1}^{l} p_{j} \\boldsymbol{x}_{j}\\right\\|+\\left\\|\\sum_{j=l+1}^{N} p_{j} \\boldsymbol{x}_{j}\\right\\| \\\\\n& \\leqslant\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma} \\boldsymbol{x}_{j}\\right\\|+\\frac{\\gamma}{1-\\gamma} \\sum_{j=1}^{l} p_{j} M+\\sum_{j=l+1}^{N} p_{j} M \\\\\n& \\leqslant\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\sum_{j=1}^{l} \\frac{p_{j}}{1-\\gamma} \\boldsymbol{x}_{j}\\right\\|+2 \\gamma M \\\\\n& \\leqslant m_{\\max }+2 \\gamma M \\leqslant m_{\\max }+2 \\epsilon M\n\\end{aligned}\n$$\n\nwhere we applied Eq.",
    "hopfield-21": "(233) in the penultimate inequality. This is the statement of the lemma. The separation of the center (the arithmetic mean) $\\boldsymbol{m}_{\\boldsymbol{x}}$ of the first $l$ from data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{l+1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ is $\\Delta_{m}$, defined as\n\n$$\n\\Delta_{m}=\\min _{j, l<j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\max _{j, l<j} \\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\n$$\n\nThe center is separated from the other data $\\boldsymbol{x}_{j}$ with $l<j$ if $0<\\Delta_{m}$. By the same arguments as in Eq. (140), $\\Delta_{m}$ can also be expressed as\n\n$$\n\\begin{aligned}\n\\Delta_{m} & =\\min _{j, l<j} \\frac{1}{2}\\left(\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}+\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right) \\\\\n& =\\frac{1}{2}\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|^{2}-\\frac{1}{2} \\max _{j, l<j}\\left(\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}-\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right)\n\\end{aligned}\n$$\n\nFor $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|=\\left\\|\\boldsymbol{x}_{j}\\right\\|$ we have $\\Delta_{m}=1 / 2 \\min _{j, l<j}\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{x}_{j}\\right\\|^{2}$. Next we define the sphere where we want to apply Banach fixed point theorem. Definition 4 (Sphere $\\mathrm{S}_{m}$ ). The sphere $\\mathrm{S}_{m}$ is defined as\n\n$$\n\\mathrm{S}_{m}:=\\left\\{\\boldsymbol{\\xi} \\left\\lvert\\,\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant \\frac{1}{\\beta m_{\\max }}\\right.\\right\\}\n$$\n\nLemma A10. With $\\boldsymbol{\\xi}$ given, if the assumptions\nA1: $\\boldsymbol{\\xi}$ is inside sphere: $\\boldsymbol{\\xi} \\in \\mathrm{S}_{m}$,\nA2: the center $\\boldsymbol{m}_{\\boldsymbol{x}}$ is well separated from other data $\\boldsymbol{x}_{j}$ with $l<j$ :\n\n$$\n\\Delta_{m} \\geq \\frac{2 M}{\\beta m_{\\max }}-\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\n$$\n\nA3: the distance $m_{\\max }$ of similar patterns to the center is sufficient small:\n\n$$\n\\beta m_{\\max }^{2} \\leqslant 1\n$$\n\nhold, then $f(\\boldsymbol{\\xi}) \\in \\mathrm{S}_{m}$. Therefore, under conditions (A2) and (A3), $f$ is a mapping from $\\mathrm{S}_{m}$ into $\\mathrm{S}_{m}$. Proof. We need the separation $\\tilde{\\Delta}_{m}$ of $\\boldsymbol{\\xi}$ from the rest of the data, which is the last $N-l$ data points $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{l+1}, \\ldots, \\boldsymbol{x}_{N}\\right)$\n\n$$\n\\tilde{\\Delta}_{m}=\\min _{j, l<j}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}\\right)\n$$\n\nUsing the Cauchy-Schwarz inequality, we obtain for $l+1 \\leqslant j \\leqslant N$ :\n\n$$\n\\left|\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\n$$\n\nWe have the lower bound\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{m} & \\geq \\min _{j, l<j}\\left(\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)-\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}+\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)\\right) \\\\\n& =-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M+\\min _{j, l<j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{m}-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M \\\\\n& \\geq \\Delta_{m}-2 \\frac{M}{\\beta m_{\\max }}\n\\end{aligned}\n$$\n\nwhere we used the assumption (A1) of the lemma. From the proof in Lemma A9 we have\n\n$$\n\\begin{aligned}\n\\sum_{i=1}^{l} p_{i} & \\geq 1-(N-l) \\exp \\left(-\\beta \\tilde{\\Delta}_{m}\\right)=1-\\tilde{\\epsilon} \\\\\n\\sum_{i=l+1}^{N} p_{i} & \\leqslant(N-l) \\exp \\left(-\\beta \\tilde{\\Delta}_{m}\\right)=\\tilde{\\epsilon}\n\\end{aligned}\n$$\n\nLemma A9 states that\n\n$$\n\\begin{aligned}\n\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-f(\\boldsymbol{\\xi})\\right\\| & \\leqslant m_{\\max }+2 \\tilde{\\epsilon} M \\\\\n& \\leqslant m_{\\max }+2(N-l) \\exp \\left(-\\beta \\tilde{\\Delta}_{m}\\right) M \\\\\n& \\leqslant m_{\\max }+2(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-2 \\frac{M}{\\beta m_{\\max }}\\right)\\right) M\n\\end{aligned}\n$$\n\nTherefore, we have\n\n$$\n\\begin{aligned}\n& \\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}-f(\\boldsymbol{\\xi})\\right\\| \\leqslant m_{\\max }+2(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-2 \\frac{M}{\\beta m_{\\max }}\\right)\\right) M \\\\\n& \\leqslant m_{\\max }+2(N-l) \\exp \\left(-\\beta\\left(\\frac{2 M}{\\beta m_{\\max }}-\\right.\\right. \\\\\n& \\left.\\left.\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)-2 \\frac{M}{\\beta m_{\\max }}\\right)\\right) M \\\\\n& =m_{\\max }+2(N-l) \\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}} M \\\\\n& \\leqslant m_{\\max }+\\frac{1-\\beta m_{\\max }^{2}}{\\beta m_{\\max }}=\\frac{1}{\\beta m_{\\max }}\n\\end{aligned}\n$$\n\nwhere we used assumption (A2) of the lemma. Therefore, $f(\\boldsymbol{\\xi})$ is a mapping from the sphere $\\mathrm{S}_{m}$ into the sphere $\\mathrm{S}_{m}$. $$\n\\begin{aligned}\n& m_{\\max }=\\max _{1 \\leqslant i \\leqslant l}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\\\\n& =\\max _{1 \\leqslant i \\leqslant l}\\left\\|\\boldsymbol{x}_{i}-1 / l \\sum_{j=1}^{l} \\boldsymbol{x}_{j}\\right\\| \\\\\n& =\\max _{1 \\leqslant i \\leqslant l}\\left\\|1 / l \\sum_{j=1}^{l}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right)\\right\\| \\\\\n& \\leqslant \\max _{1 \\leqslant i, j \\leqslant l}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\| \\\\\n& \\leqslant \\max _{1 \\leqslant i \\leqslant l}\\left\\|\\boldsymbol{x}_{i}\\right\\|+\\max _{1 \\leqslant j \\leqslant l}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\\\\n& \\leqslant 2 M\n\\end{aligned}\n$$\n\n## - Contraction mapping. For applying Banach fixed point theorem we need to show that $f$ is contraction in the compact environment $S_{m}$. Lemma A11. Assume that\nAI:\n\n$$\n\\Delta_{m} \\geq \\frac{2 M}{\\beta m_{\\max }}-\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\n$$\n\nand\nA2:\n\n$$\n\\beta m_{\\max }^{2} \\leqslant 1\n$$\n\nthen $f$ is a contraction mapping in $\\mathrm{S}_{m}$. Proof. The version of the mean value theorem Lemma A32 states for the symmetric $\\mathrm{J}^{m}=\\int_{0}^{1} \\mathrm{~J}(\\lambda \\boldsymbol{\\xi}+$ $\\left.(1-\\lambda) \\boldsymbol{m}_{\\boldsymbol{x}}\\right) \\mathrm{d} \\lambda:$\n\n$$\nf(\\boldsymbol{\\xi})=f\\left(\\boldsymbol{m}_{\\boldsymbol{x}}\\right)+\\mathrm{J}^{m}\\left(\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right)\n$$\n\nIn complete analogy to Lemma A6, we get:\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-f\\left(\\boldsymbol{m}_{\\boldsymbol{x}}\\right)\\right\\| \\leqslant\\left\\|\\mathrm{J}^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\n$$\n\nWe define $\\tilde{\\boldsymbol{\\xi}}=\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{m}_{\\boldsymbol{x}}$ for some $\\lambda \\in[0,1]$. We need the separation $\\tilde{\\Delta}_{m}$ of $\\tilde{\\boldsymbol{\\xi}}$ from the rest of the data, which is the last $N-l$ data points $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{l+1}, \\ldots, \\boldsymbol{x}_{N}\\right)$. $$\n\\tilde{\\Delta}_{m}=\\min _{j, l<j}\\left(\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{j}\\right)\n$$\n\nFrom the proof in Lemma A9 we have\n\n$$\n\\begin{aligned}\n\\tilde{\\epsilon} & =(N-l) \\exp \\left(-\\beta \\tilde{\\Delta}_{m}\\right) \\\\\n\\sum_{i=1}^{l} p_{i}(\\tilde{\\boldsymbol{\\xi}}) & \\geq 1-(N-l) \\exp \\left(-\\beta \\tilde{\\Delta}_{m}\\right)=1-\\tilde{\\epsilon} \\\\\n\\sum_{i=l+1}^{N} p_{i}(\\tilde{\\boldsymbol{\\xi}}) & \\leqslant(N-l) \\exp \\left(-\\beta \\tilde{\\Delta}_{m}\\right)=\\tilde{\\epsilon}\n\\end{aligned}\n$$\n\nWe first compute an upper bound on $\\tilde{\\epsilon}$. Using the Cauchy-Schwarz inequality, we obtain for $l+1 \\leqslant$ $j \\leqslant N$ :\n\n$$\n\\left|\\tilde{\\boldsymbol{\\xi}}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\leqslant\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\n$$\n\nWe have the lower bound on $\\tilde{\\Delta}_{m}$ :\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{m} & \\geq \\min _{j, l<j}\\left(\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)-\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}+\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)\\right) \\\\\n& =-2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M+\\min _{j, l<j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{m}-2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M \\\\\n& \\geq \\Delta_{m}-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\n\\end{aligned}\n$$\n\nwhere we used $\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|=\\lambda\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$. We obtain the upper bound on $\\tilde{\\epsilon}$ :\n\n$$\n\\begin{aligned}\n\\tilde{\\epsilon} & \\leqslant(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)\\right) \\\\\n& \\leqslant(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-\\frac{2 M}{\\beta m_{\\max }}\\right)\\right)\n\\end{aligned}\n$$\n\nwhere we used that in the sphere $S_{i}$ holds:\n\n$$\n\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant \\frac{1}{\\beta m_{\\max }}\n$$\n\ntherefore\n\n$$\n2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M \\leqslant \\frac{2 M}{\\beta m_{\\max }}\n$$\n\nNext we compute a lower bound on $\\tilde{\\epsilon}$ and to this end start with the upper bound on $\\tilde{\\Delta}_{m}$ using the same arguments as in Eq. (158) in combination with Eq. (266). $$\n\\begin{aligned}\n\\tilde{\\Delta}_{m} & \\geq \\min _{j, l<j}\\left(\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}+\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)-\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}-\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)\\right) \\\\\n& =2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M+\\min _{j, l<j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{m}+2\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M \\\\\n& \\geq \\Delta_{m}+2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\n\\end{aligned}\n$$\n\nwhere we used $\\left\\|\\tilde{\\boldsymbol{\\xi}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|=\\lambda\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$. We obtain the lower bound on $\\tilde{\\epsilon}$ :\n\n$$\n\\tilde{\\epsilon} \\geq(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right)\n$$\n\nwhere we used that in the sphere $S_{i}$ holds:\n\n$$\n\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\leqslant \\frac{1}{\\beta m_{\\max }}\n$$\n\ntherefore\n\n$$\n2\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M \\leqslant \\frac{2 M}{\\beta m_{\\max }}\n$$\n\nFrom Lemma A8 we have\n\n$$\n\\begin{aligned}\n\\|\\mathrm{J}(\\tilde{\\boldsymbol{\\xi}})\\|_{2} & \\leqslant \\beta\\left(m_{\\max }^{2}+\\tilde{\\epsilon} 2(2-\\tilde{\\epsilon}) M^{2}\\right) \\\\\n& =\\beta\\left(m_{\\max }^{2}+\\tilde{\\epsilon} 4 M^{2}-2 \\tilde{\\epsilon}^{2} M^{2}\\right) \\\\\n& \\leqslant \\beta\\left(m_{\\max }^{2}+(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) 4 M^{2}-\\right. \\\\\n& \\left.2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2}\\right)\n\\end{aligned}\n$$\n\nThe bound Eq. (271) holds for the mean $J^{m}$, too, since it averages over $J(\\tilde{\\boldsymbol{\\xi}})$ :\n\n$$\n\\begin{aligned}\n\\left\\|J^{m}\\right\\|_{2} & \\leqslant \\beta\\left(m_{\\max }^{2}+(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) 4 M^{2}-\\right. \\\\\n& \\left.2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2}\\right)\n\\end{aligned}\n$$\n\nThe assumption of the lemma is\n\n$$\n\\Delta_{m} \\geq \\frac{2 M}{\\beta m_{\\max }}-\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\n$$\n\nTherefore, we have\n\n$$\n\\Delta_{m}-\\frac{2 M}{\\beta m_{\\max }} \\geq-\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\n$$\n\nTherefore, the spectral norm $\\left\\|J^{m}\\right\\|_{2}$ can be bounded by:\n\n$$\n\\begin{aligned}\n& \\left\\|\\mathrm{J}^{m}\\right\\|_{2} \\leqslant \\\\\n& \\beta\\left(m_{\\max }^{2}+(N-l) \\exp \\left(-\\beta\\left(-\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\\right)\\right)\\right. \\\\\n& \\left.4 M^{2}-2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2}\\right) \\\\\n& =\\beta\\left(m_{\\max }^{2}+(N-l) \\exp \\left(\\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\\right)\\right. \\\\\n& \\left.4 M^{2}-2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2}\\right) \\\\\n& =\\beta\\left(m_{\\max }^{2}+(N-l) \\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}} 4 M^{2}-\\right. \\\\\n& \\left.2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2}\\right) \\\\\n& =\\beta m_{\\max }^{2}+\\frac{1-\\beta m_{\\max }^{2}}{\\max \\left\\{m_{\\max }, 2 M\\right\\}} 2 M- \\\\\n& \\beta 2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2} \\\\\n& \\leqslant \\beta m_{\\max }^{2}+1-\\beta m_{\\max }^{2}-\\beta 2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M^{2}}{\\beta m_{\\max }}\\right)\\right) M^{2} \\\\\n& =1-\\beta 2(N-l)^{2} \\exp \\left(-2 \\beta\\left(\\Delta_{m}+\\frac{2 M}{\\beta m_{\\max }}\\right)\\right) M^{2}<1\n\\end{aligned}\n$$\n\nFor the last but one inequality we used $2 M \\leqslant \\max \\left\\{m_{\\max }, 2 M\\right\\}$. Therefore, $f$ is a contraction mapping in $\\mathrm{S}_{m}$. -Banach Fixed Point Theorem. Now we have all ingredients to apply Banach fixed point theorem. Lemma A12. Assume that\nAl:\n\n$$\n\\Delta_{m} \\geq \\frac{2 M}{\\beta m_{\\max }}-\\frac{1}{\\beta} \\ln \\left(\\frac{1-\\beta m_{\\max }^{2}}{2 \\beta(N-l) M \\max \\left\\{m_{\\max }, 2 M\\right\\}}\\right)\n$$\n\nand\nA2:\n\n$$\n\\beta m_{\\max }^{2} \\leqslant 1\n$$\n\nthen $f$ has a fixed point in $\\mathrm{S}_{m}$. Proof. We use Banach fixed point theorem: Lemma A10 says that $f$ maps from the compact set $\\mathrm{S}_{m}$ into the same compact set $\\mathrm{S}_{m}$. Lemma A11 says that $f$ is a contraction mapping in $\\mathrm{S}_{m}$. ## -Contraction mapping with a fixed point. We assume that the first $l$ patterns are much more probable (and similar to one another) than the other patterns. Therefore, we define:\n\n$$\n\\begin{aligned}\nM & :=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\| \\\\\n\\gamma & =\\sum_{i=l+1}^{N} p_{i} \\leqslant \\epsilon \\\\\n1-\\gamma & =\\sum_{i=1}^{l} p_{i} \\geq 1-\\epsilon \\\\\n\\tilde{p}_{i} & :=\\frac{p_{i}}{1-\\gamma} \\leqslant p_{i} /(1-\\epsilon) \\\\\n\\sum_{i=1}^{l} \\tilde{p}_{i} & =1 \\\\\n\\boldsymbol{m}_{\\boldsymbol{x}} & =\\frac{1}{l} \\sum_{i=1}^{l} \\boldsymbol{x}_{i} \\\\\nm_{\\max } & =\\max _{1 \\leqslant i \\leqslant l}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\n\\end{aligned}\n$$\n\n$M$ is an upper bound on the Euclidean norm of the patterns, which are vectors. $\\epsilon$ is an upper bound on the probability $\\gamma$ of not choosing one of the first $l$ patterns, while $1-\\epsilon$ is a lower bound the probability $(1-\\gamma)$ of choosing one of the first $l$ patterns. $\\boldsymbol{m}_{\\boldsymbol{x}}$ is the arithmetic mean (the center) of the first $l$ patterns. $m_{\\text {max }}$ is the maximal distance of the patterns to the center $\\boldsymbol{m}_{\\boldsymbol{x}} \\cdot \\tilde{\\boldsymbol{p}}$ is the probability $\\boldsymbol{p}$ normalized for the first $l$ patterns. The variance of the first $l$ patterns is\n\n$$\n\\begin{aligned}\n\\operatorname{Var}_{\\tilde{p}}\\left[\\boldsymbol{x}_{1: l}\\right] & =\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i} \\boldsymbol{x}_{i}^{T}-\\left(\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)\\left(\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)^{T} \\\\\n& =\\sum_{i=1}^{l} \\tilde{p}_{i}\\left(\\boldsymbol{x}_{i}-\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)\\left(\\boldsymbol{x}_{i}-\\sum_{i=1}^{l} \\tilde{p}_{i} \\boldsymbol{x}_{i}\\right)^{T}\n\\end{aligned}\n$$\n\nWe have shown that a fixed point exists. We want to know how fast the iteration converges to the fixed point. Let $\\boldsymbol{m}_{\\boldsymbol{x}}^{*}$ be the fixed point of the iteration $f$ in the sphere $\\mathrm{S}_{m}$. Using the mean value theorem Lemma A32, we have with $\\mathrm{J}^{m}=\\int_{0}^{1} \\mathrm{~J}\\left(\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right) \\mathrm{d} \\lambda$ :\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right\\|=\\left\\|f(\\boldsymbol{\\xi})-f\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right)\\right\\| \\leqslant\\left\\|J^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}^{*}\\right\\|\n$$\n\nAccording to Lemma A8 the following bounds on the norm $\\|J\\|_{2}$ of the Jacobian of the fixed point iteration hold. The $\\gamma$-bound for $\\|J\\|_{2}$ is\n\n$$\n\\|\\mathrm{J}\\|_{2} \\leqslant \\beta\\left((1-\\gamma) m_{\\max }^{2}+\\gamma 2(2-\\gamma) M^{2}\\right)\n$$\n\nwhile the $\\epsilon$-bound for $\\|J\\|_{2}$ is:\n\n$$\n\\|J\\|_{2} \\leqslant \\beta\\left(m_{\\max }^{2}+\\epsilon 2(2-\\epsilon) M^{2}\\right)\n$$\n\nFrom the last condition we require for a contraction mapping:\n\n$$\n\\beta m_{\\max }^{2}<1\n$$\n\nWe want to see how large $\\epsilon$ is. The separation of center $\\boldsymbol{m}_{\\boldsymbol{x}}$ from data $\\boldsymbol{X}=\\left(\\boldsymbol{x}_{l+1}, \\ldots, \\boldsymbol{x}_{N}\\right)$ is\n\n$$\n\\Delta_{m}=\\min _{j, l<j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\max _{j, l<j} \\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\n$$\n\nWe need the separation $\\tilde{\\Delta}_{m}$ of $\\tilde{\\boldsymbol{x}}=\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{m}_{\\boldsymbol{x}}^{*}$ from the data. $$\n\\tilde{\\Delta}_{m}=\\min _{j, l<j}\\left(\\tilde{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\tilde{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)\n$$\n\nWe compute a lower bound on $\\tilde{\\Delta}_{m}$. Using the Cauchy-Schwarz inequality, we obtain for $1 \\leqslant j \\leqslant N$ :\n\n$$\n\\left|\\tilde{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right| \\leqslant\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\left\\|\\boldsymbol{x}_{j}\\right\\| \\leqslant\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\n$$\n\nWe have the lower bound\n\n$$\n\\begin{aligned}\n\\tilde{\\Delta}_{m} & \\geq \\min _{j, l<j}\\left(\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)-\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}+\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\\right)\\right) \\\\\n& =-2\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M+\\min _{j, l<j}\\left(\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{m}_{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}^{T} \\boldsymbol{x}_{j}\\right)=\\Delta_{m}-2\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| M\n\\end{aligned}\n$$\n\nSince\n\n$$\n\\begin{aligned}\n\\left\\|\\tilde{\\boldsymbol{x}}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| & =\\left\\|\\lambda \\boldsymbol{\\xi}+(1-\\lambda) \\boldsymbol{m}_{\\boldsymbol{x}}^{*}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\\\\n& \\leqslant \\lambda\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|+(1-\\lambda)\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}^{*}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\| \\\\\n& \\leqslant \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|,\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}^{*}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right\\}\n\\end{aligned}\n$$\n\nwe have\n\n$$\n\\begin{gathered}\n\\tilde{\\Delta}_{m} \\geq \\Delta_{m}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|,\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}^{*}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right\\} M \\\\\n\\epsilon=(N-l) \\exp \\left(-\\beta\\left(\\Delta_{m}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|,\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}^{*}-\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|\\right\\} M\\right)\\right)\n\\end{gathered}\n$$\n\n## A.1.6 Properties of Fixed Points Near Stored Pattern\n\nIn Subsection A.1.5.3 many stable states that are fixed points near the stored patterns are considered. We now consider this case. In the fist subsection we investigate the storage capacity if all patterns are sufficiently separated so that metastable states do not appear. In the next subsection we look into the updates required and error when retrieving the stored patterns. For metastable states we can do the same analyses if each metastable state is treated as one state like one pattern. We see a trade-off that is known from classical Hopfield networks and for modern Hopfield networks. Small separation $\\Delta_{i}$ of the pattern $\\boldsymbol{x}_{i}$ from the other patterns gives high storage capacity. However the convergence speed is lower and the retrieval error higher. In contrast, large separation $\\Delta_{i}$ of the pattern $\\boldsymbol{x}_{i}$ from the other pattern allows the retrieval of patterns with one update step and exponentially low error. A.1.6.1 Exponentially Many Patterns can be Stored. From Subsection A.1.5.3 need some definitions. We assume to have $N$ patterns, the separation of pattern $\\boldsymbol{x}_{i}$ from the other patterns $\\left\\{\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{i-1}, \\boldsymbol{x}_{i+1}, \\ldots, \\boldsymbol{x}_{N}\\right\\}$ is $\\Delta_{i}$, defined as\n\n$$\n\\Delta_{i}=\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\max _{j, j \\neq i} \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\n$$\n\nThe pattern is separated from the other data if $0<\\Delta_{i}$. The separation $\\Delta_{i}$ can also be expressed as\n\n$$\n\\begin{aligned}\n\\Delta_{i} & =\\min _{j, j \\neq i} \\frac{1}{2}\\left(\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}+\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right) \\\\\n& =\\frac{1}{2}\\left\\|\\boldsymbol{x}_{i}\\right\\|^{2}-\\frac{1}{2} \\max _{j, j \\neq i}\\left(\\left\\|\\boldsymbol{x}_{j}\\right\\|^{2}-\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}\\right)\n\\end{aligned}\n$$\n\nFor $\\left\\|\\boldsymbol{x}_{i}\\right\\|=\\left\\|\\boldsymbol{x}_{j}\\right\\|$ we have $\\Delta_{i}=1 / 2 \\min _{j, j \\neq i}\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\|^{2}$. The sphere $\\mathrm{S}_{i}$ with center $\\boldsymbol{x}_{i}$ is defined as\n\n$$\n\\mathrm{S}_{i}=\\left\\{\\boldsymbol{\\xi} \\left\\lvert\\,\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\| \\leqslant \\frac{1}{\\beta N M}\\right.\\right\\}\n$$\n\nThe maximal length of a pattern is $M=\\max _{i}\\left\\|\\boldsymbol{x}_{i}\\right\\|$. We next define what we mean with storing and retrieving a pattern. Definition 5 (Pattern Stored and Retrieved). We assume that around every pattern $\\boldsymbol{x}_{i}$ a sphere $\\mathrm{S}_{i}$ is given. We say $\\boldsymbol{x}_{i}$ is stored if there is a single fixed point $\\boldsymbol{x}_{i}^{*} \\in \\mathrm{S}_{i}$ to which all points $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$ converge, and $\\mathrm{S}_{i} \\cap \\mathrm{S}_{j}=\\emptyset$ for $i \\neq j$. We say $\\boldsymbol{x}_{i}$ is retrieved for a given $\\epsilon$ if iteration (update rule) Eq. (92) gives a point $\\tilde{\\boldsymbol{x}}_{i}$ that is at least $\\epsilon$-close to the single fixed point $\\boldsymbol{x}_{i}^{*} \\in \\mathrm{S}_{i}$. The retrieval error is $\\left\\|\\tilde{\\boldsymbol{x}}_{i}-\\boldsymbol{x}_{i}\\right\\|$. The sphere $\\mathrm{S}_{i}$ around pattern $x_{i}$ can be any a sphere and do not have the specific sphere defined in Def. 3 . For a query $\\boldsymbol{\\xi} \\in \\mathrm{S}_{i}$ to converge to a fixed point $\\boldsymbol{x}_{i}^{*} \\in \\mathrm{S}_{i}$ we required for the application of Banach fixed point theorem and for ensuring a contraction mapping the following inequality:\n\n$$\n\\Delta_{i} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nThis is the assumption in Lemma A 7 to ensure a fixed point in sphere $\\mathrm{S}_{i}$. Since replacing $(N-1) N$ by $N^{2}$ gives\n\n$$\n\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)>\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2(N-1) N \\beta M^{2}\\right)\n$$\n\nthe inequality follows from following master inequality\n\n$$\n\\Delta_{i} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\n$$\n\nIf we assume that $S_{i} \\cap S_{j} \\neq \\emptyset$ with $i \\neq j$, then the triangle inequality with a point from the intersection gives\n\n$$\n\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\| \\leqslant \\frac{2}{\\beta N M}\n$$\n\nTherefore, we have using the Cauchy-Schwarz inequality:\n\n$$\n\\Delta_{i} \\leqslant \\boldsymbol{x}_{i}^{T}\\left(\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right) \\leqslant\\left\\|\\boldsymbol{x}_{i}\\right\\|\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{j}\\right\\| \\leqslant M \\frac{2}{\\beta N M}=\\frac{2}{\\beta N}\n$$\n\nThe last inequality is a contraction to Eq. (302) if we assume that\n\n$$\n1<2(N-1) N \\beta M^{2}\n$$\n\nWith this assumption, the spheres $\\mathrm{S}_{i}$ and $\\mathrm{S}_{j}$ do not intersect. Therefore, each $\\boldsymbol{x}_{i}$ has its separate fixed point in $\\mathrm{S}_{i}$. We define\n\n$$\n\\Delta_{\\min }=\\min _{1 \\leqslant i \\leqslant N} \\Delta_{i}\n$$\n\nto obtain the master inequality\n\n$$\n\\Delta_{\\min } \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\n$$\n\n-Patterns on a sphere. For simplicity and in accordance with the results of the classical Hopfield network, we assume all patterns being on a sphere with radius $M$ :\n\n$$\n\\forall_{i}:\\left\\|\\boldsymbol{x}_{i}\\right\\|=M\n$$\n\nUnder assumption Eq. (305) we have only to show that the master inequality Eq. (307) is fulfilled for each $\\boldsymbol{x}_{i}$ to have a separate fixed point near each $\\boldsymbol{x}_{i}$. We defined $\\alpha_{i j}$ as the angle between $\\boldsymbol{x}_{i}$ and $\\boldsymbol{x}_{j}$. The minimal angle $\\alpha_{\\text {min }}$ between two data points is\n\n$$\n\\alpha_{\\min }=\\min _{1 \\leqslant i<j \\leqslant N} \\alpha_{i j}\n$$\n\nOn the sphere with radius $M$ we have\n\n$$\n\\Delta_{\\min }=\\min _{1 \\leqslant i<j \\leqslant N} M^{2}\\left(1-\\cos \\left(\\alpha_{i j}\\right)\\right)=M^{2}\\left(1-\\cos \\left(\\alpha_{\\min }\\right)\\right)\n$$\n\ntherefore it is sufficient to show the master inequality on the sphere:\n\n$$\nM^{2}\\left(1-\\cos \\left(\\alpha_{\\min }\\right)\\right) \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\n$$\n\nUnder assumption Eq. (305) we have only to show that the master inequality Eq. (307) is fulfilled for $\\Delta_{\\min }$. We consider patterns on the sphere, therefore the master inequality Eq. (307) becomes Eq. (311). First we show results when pattern positions on the sphere are constructed and $\\Delta_{\\min }$ is ensured. Then we move on to random patterns on a sphere, where $\\Delta_{\\min }$ becomes a random variable. -Storage capacity for patterns placed on the sphere. Next theorem says how many patterns we can stored (fixed point with attraction basin near pattern) if we are allowed to place them on the sphere. Theorem A3 (Storage Capacity ( $\\mathrm{M}=2$ ): Placed Patterns). We assume $\\beta=1$ and patterns on the sphere with radius $M$. If $M=2 \\sqrt{d-1}$ and the dimension $d$ of the space is $d \\geq 4$ or if $M=1.7 \\sqrt{d-1}$ and the dimension $d$ of the space is $d \\geq 50$, then the number of patterns $N$ that can be stored (fixed point with attraction basin near pattern) is at least\n\n$$\nN=2^{2(d-1)}\n$$\n\nProof. For random patterns on the sphere, we have to show that the master inequality Eq. (311) holds:\n\n$$\nM^{2}\\left(1-\\cos \\left(\\alpha_{\\min }\\right)\\right) \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\n$$\n\nWe now place the patterns equidistant on the sphere where the pattern are separated by an angle $\\alpha_{\\text {min }}$ :\n\n$$\n\\forall_{i}: \\min _{j, j \\neq i} \\alpha_{i j}=\\alpha_{\\min }\n$$\n\nIn a $d$-dimensional space we can place\n\n$$\nN=\\left(\\frac{2 \\pi}{\\alpha_{\\min }}\\right)^{d-1}\n$$\n\npoints on the sphere. In a spherical coordinate system a pattern differs from its most closest patterns by an angle $\\alpha_{\\min }$ and there are $d-1$ angles. Solving for $\\alpha_{\\min }$ gives\n\n$$\n\\alpha_{\\min }=\\frac{2 \\pi}{N^{1 /(d-1)}}\n$$\n\nThe number of patterns that can be stored is determined by the largest $N$ that fulfils\n\n$$\nM^{2}\\left(1-\\cos \\left(\\frac{2 \\pi}{N^{1 /(d-1)}}\\right)\\right) \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\n$$\n\nWe set $N=2^{2(d-1)}$ and obtain for Eq. (317):\n\n$$\nM^{2}\\left(1-\\cos \\left(\\frac{\\pi}{2}\\right)\\right) \\geq \\frac{2}{\\beta 2^{3(d-1)}}+\\frac{1}{\\beta} \\ln \\left(2 \\beta M^{2}\\right)+\\frac{1}{\\beta} 4(d-1) \\ln 2\n$$\n\nThis inequality is equivalent to\n\n$$\n\\beta M^{2} \\geq \\frac{1}{2^{2(d-1)-1}}+\\ln \\left(2 \\beta M^{2}\\right)+4(d-1) \\ln 2\n$$\n\nThe last inequality can be fulfilled with $M=K \\sqrt{d-1}$ and proper $K$. For $\\beta=1, d=4$ and $K=2$ the inequality is fulfilled. The left hand side minus the right hand side is $4(d-1)-1 / 2^{2(d-1)-1}-$ $\\ln (8(d-1))-4(d-1) \\ln 2$. Its derivative with respect to $d$ is strict positive. Therefore, the inequality holds for $d \\geq 4$. For $\\beta=1, d=50$ and $K=1.7$ the inequality is fulfilled. The left hand side minus the right hand side is $2.89(d-1)-1 / 2^{2(d-1)-1}-\\ln (5.78(d-1))-4(d-1) \\ln 2$. Its derivative with respect to $d$ is strict positive. Therefore, the inequality holds for $d \\geq 50$. If we want to store considerably more patterns, then we have to increase the length of the vectors or the dimension of the space where the vectors live. The next theorem shows results for the number of patterns $N$ with $N=2^{3(d-1)}$. Theorem A4 (Storage Capacity ( $\\mathrm{M}=5$ ): Placed Patterns). We assume $\\beta=1$ and patterns on the sphere with radius $M$. If $M=5 \\sqrt{d-1}$ and the dimension $d$ of the space is $d \\geq 3$ or if $M=4 \\sqrt{d-1}$ and the dimension $d$ of the space is $d \\geq 13$, then the number of patterns $N$ that can be stored (fixed point with attraction basin near pattern) is at least\n\n$$\nN=2^{3(d-1)}\n$$\n\nProof. We set $N=2^{3(d-1)}$ and obtain for Eq. (317):\n\n$$\nM^{2}\\left(1-\\cos \\left(\\frac{\\pi}{4}\\right)\\right) \\geq \\frac{2}{\\beta 2^{3(d-1)}}+\\frac{1}{\\beta} \\ln \\left(2 \\beta M^{2}\\right)+\\frac{1}{\\beta} 6(d-1) \\ln 2\n$$\n\nThis inequality is equivalent to\n\n$$\n\\beta M^{2}\\left(1-\\frac{\\sqrt{2}}{2}\\right) \\geq \\frac{1}{2^{3(d-1)-1}}+\\ln \\left(2 \\beta M^{2}\\right)+6(d-1) \\ln 2\n$$\n\nThe last inequality can be fulfilled with $M=K \\sqrt{d-1}$ and proper $K$. For $\\beta=1, d=13$ and $K=4$ the inequality is fulfilled. The left hand side minus the right hand side is $4.686292(d-$ 1) $-1 / 2^{3(d-1)-1}-\\ln (32(d-1))-6(d-1) \\ln 2$. Its derivative with respect to $d$ is strict positive. Therefore, the inequality holds for $d \\geq 13$. For $\\beta=1, d=3$ and $K=5$ the inequality is fulfilled. The left hand side minus the right hand side is $7.32233(d-1)-1 / 2^{3(d-1)-1}-\\ln (50(d-1))-6(d-1) \\ln 2$. Its derivative with respect to $d$ is strict positive. Therefore, the inequality holds for $d \\geq 3$. -Storage capacity for random patterns on the sphere. Next we investigate random points on the sphere. Under assumption Eq. (305) we have to show that the master inequality Eq. (311) is fulfilled for $\\alpha_{\\min }$, where now $\\alpha_{\\min }$ is now a random variable. We use results on the distribution of the minimal angles between random patterns on a sphere according to Cai et al.",
    "hopfield-22": "(2013) and Brauchart et al. (2018). Theorem 2 in Cai et al. (2013) gives the distribution of the minimal angle for random patterns on the unit sphere. Proposition 3.5 in Brauchart et al. (2018) gives a lower bound on the probability of the minimal angle being larger than a given constant. We require this proposition to derive the probability of pattern having a minimal angle $\\alpha_{\\min }$. Proposition 3.6 in Brauchart et al. (2018) gives the expectation of the minimal angle. We will prove high probability bounds for the expected storage capacity. We need the following tail-bound on $\\alpha_{\\min }$ (the minimal angle of random patterns on a sphere):\nLemma A13 ((Brauchart et al., 2018)). Let d be the dimension of the pattern space,\n\n$$\n\\kappa_{d}:=\\frac{1}{d \\sqrt{\\pi}} \\frac{\\Gamma((d+1) / 2)}{\\Gamma(d / 2)}\n$$\n\nand $\\delta>0$ such that $\\frac{\\kappa_{d-1}}{2} \\delta^{(d-1)} \\leqslant 1$. Then\n\n$$\n\\operatorname{Pr}\\left(N^{\\frac{2}{d-1}} \\alpha_{\\min } \\geq \\delta\\right) \\geq 1-\\frac{\\kappa_{d-1}}{2} \\delta^{d-1}\n$$\n\nProof. The statement of the lemma is Eq. (3-6) from Proposition 3.5 in Brauchart et al. (2018). Next we derive upper and lower bounds on the constant $\\kappa_{d}$ since we require them later for proving storage capacity bounds. Lemma A14. For $\\kappa_{d}$ defined in Eq. (323) we have the following bounds for every $d \\geq 1$ :\n\n$$\n\\frac{1}{\\exp (1 / 6) \\sqrt{e \\pi d}} \\leqslant \\kappa_{d} \\leqslant \\frac{\\exp (1 / 12)}{\\sqrt{2 \\pi d}}<1\n$$\n\nProof. We use for $x>0$ the following bound related to Stirling's approximation formula for the gamma function, c.f. (Olver et al., 2010, (5.6.1)):\n\n$$\n1<\\Gamma(x)(2 \\pi)^{-\\frac{1}{2}} x^{\\frac{1}{2}-x} \\exp (x)<\\exp \\left(\\frac{1}{12 x}\\right)\n$$\n\nUsing Stirling's formula Eq. (326), we upper bound $\\kappa_{d}$ :\n\n$$\n\\begin{aligned}\n& \\kappa_{d}=\\frac{1}{d \\sqrt{\\pi}} \\frac{\\Gamma((d+1) / 2)}{\\Gamma(d / 2)}<\\frac{1}{d \\sqrt{\\pi}} \\frac{\\exp \\left(\\frac{1}{6(d+1)}\\right) \\exp \\left(-\\frac{d+1}{2}\\right)\\left(\\frac{d+1}{2}\\right)^{\\frac{d}{2}}}{\\exp \\left(-\\frac{d}{2}\\right)\\left(\\frac{d}{2}\\right)^{\\frac{d}{2}-\\frac{1}{2}}} \\\\\n& =\\frac{1}{d \\sqrt{\\pi e}} \\exp \\left(\\frac{1}{6(d+1)}\\right)\\left(1+\\frac{1}{d}\\right)^{\\frac{d}{2}} \\sqrt{\\frac{d}{2}} \\leqslant \\frac{\\exp \\left(\\frac{1}{12}\\right)}{\\sqrt{2 \\pi} \\sqrt{d}}\n\\end{aligned}\n$$\n\nFor the first inequality, we applied Eq. (326), while for the second we used $\\left(1+\\frac{1}{d}\\right)^{d}<e$ for $d \\geq 1$. Next, we lower bound $\\kappa_{d}$ by again applying Stirling's formula Eq. (326):\n\n$$\n\\begin{aligned}\n& \\kappa_{d}=\\frac{1}{d \\sqrt{\\pi}} \\frac{\\Gamma((d+1) / 2)}{\\Gamma(d / 2)}>\\frac{1}{d \\sqrt{\\pi}} \\frac{\\exp \\left(-\\frac{d+1}{2}\\right)\\left(\\frac{d+1}{2}\\right)^{\\frac{d}{2}}}{\\exp \\left(\\frac{1}{6 d}\\right) \\exp \\left(-\\frac{d}{2}\\right)\\left(\\frac{d}{2}\\right)^{\\frac{d}{2}-\\frac{1}{2}}} \\\\\n& =\\frac{1}{d \\sqrt{\\pi e} \\exp \\left(\\frac{1}{6 d}\\right)}\\left(1+\\frac{1}{d}\\right)^{\\frac{d}{2}} \\sqrt{\\frac{d}{2}} \\geq \\frac{1}{\\exp \\left(\\frac{1}{6}\\right) \\sqrt{e \\pi d}}\n\\end{aligned}\n$$\n\nwhere the last inequality holds because of monotonicity of $\\left(1+\\frac{1}{d}\\right)^{d}$ and using the fact that for $d=1$ it takes on the value 2 . We require a bound on cos to bound the master inequality Eq. (311). Lemma A15. For $0 \\leqslant x \\leqslant \\pi$ the function $\\cos$ can be upper bounded by:\n\n$$\n\\cos (x) \\leqslant 1-\\frac{x^{2}}{5}\n$$\n\nProof. We use the infinite product representation of cos, c.f. (Olver et al., 2010, (4.22.2)):\n\n$$\n\\cos (x)=\\prod_{n=1}^{\\infty}\\left(1-\\frac{4 x^{2}}{(2 n-1)^{2} \\pi^{2}}\\right)\n$$\n\nSince it holds that\n\n$$\n1-\\frac{4 x^{2}}{(2 n-1)^{2} \\pi^{2}} \\leqslant 1\n$$\n\nfor $|x| \\leqslant \\pi$ and $n \\geq 2$, we can get the following upper bound on Eq. (330):\n\n$$\n\\begin{aligned}\n\\cos (x) & \\leqslant \\prod_{n=1}^{2}\\left(1-\\frac{4 x^{2}}{(2 n-1)^{2} \\pi^{2}}\\right)=\\left(1-\\frac{4 x^{2}}{\\pi^{2}}\\right)\\left(1-\\frac{4 x^{2}}{9 \\pi^{2}}\\right) \\\\\n& =1-\\frac{40 x^{2}}{9 \\pi^{2}}+\\frac{16 x^{4}}{9 \\pi^{4}} \\leqslant 1-\\frac{40 x^{2}}{9 \\pi^{2}}+\\frac{16 x^{2}}{9 \\pi^{2}} \\\\\n& =1-\\frac{24 x^{2}}{9 \\pi^{2}} \\leqslant 1-\\frac{x^{2}}{5}\n\\end{aligned}\n$$\n\nThe last but one inequality uses $x \\leqslant \\pi$, which implies $x / \\pi \\leqslant 1$.",
    "hopfield-23": "Thus Eq. (329) is proven. -Exponential storage capacity: the base c as a function of the parameter $\\beta$, the radius of the sphere $M$, the probability $p$, and the dimension $d$ of the space. We express the number $N$ of stored patterns by an exponential function with base $c>1$ and an exponent linear in $d$. We derive constraints on he base $c$ as a function of $\\beta$, the radius of the sphere $M$, the probability $p$ that all patterns can be stored, and the dimension $d$ of the space. With $\\beta>0$, $K>0$, and $d \\geq 2$ (to ensure a sphere), the following theorem gives our main result. Theorem A5 (Storage Capacity (Main): Random Patterns). We assume a failure probability $0<$ $p \\leqslant 1$ and randomly chosen patterns on the sphere with radius $M:=K \\sqrt{d-1}$. We define\n\n$$\n\\begin{aligned}\na & :=\\frac{2}{d-1}\\left(1+\\ln \\left(2 \\beta K^{2} p(d-1)\\right)\\right), \\quad b:=\\frac{2 K^{2} \\beta}{5} \\\\\nc & :=\\frac{b}{W_{0}(\\exp (a+\\ln (b))}\n\\end{aligned}\n$$\n\nwhere $W_{0}$ is the upper branch of the Lambert W function (Olver et al., 2010, (4.13)) and ensure\n\n$$\nc \\geq\\left(\\frac{2}{\\sqrt{p}}\\right)^{\\frac{4}{d-1}}\n$$\n\nThen with probability $1-p$, the number of random patterns that can be stored is\n\n$$\nN \\geq \\sqrt{p} c^{\\frac{d-1}{4}}\n$$\n\nTherefore it is proven for $c \\geq 3.1546$ with $\\beta=1, K=3, d=20$ and $p=0.001(a+\\ln (b)>1.27)$ and proven for $c \\geq 1.3718$ with $\\beta=1, K=1, d=75$, and $p=0.001(a+\\ln (b)<-0.94)$. Proof. We consider the probability that the master inequality Eq. (311) is fulfilled:\n\n$$\n\\left.\\operatorname{Pr}\\left(M^{2}\\left(1-\\cos \\left(\\alpha_{\\min }\\right)\\right)\\right) \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right) \\geq 1-p\n$$\n\nUsing Eq. (329), we have:\n\n$$\n1-\\cos \\left(\\alpha_{\\min }\\right) \\geq \\frac{1}{5} \\alpha_{\\min }^{2}\n$$\n\nTherefore, with probability $1-p$ the storage capacity is largest $N$ that fulfills\n\n$$\n\\operatorname{Pr}\\left(M^{2} \\frac{\\alpha_{\\min }^{2}}{5} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right) \\geq 1-p\n$$\n\nThis inequality is equivalent to\n\n$$\n\\operatorname{Pr}\\left(N^{\\frac{2}{d-1}} \\alpha_{\\min } \\geq \\frac{\\sqrt{5} N^{\\frac{2}{d-1}}}{M}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{1}{2}}\\right) \\geq 1-p\n$$\n\nWe use Eq. (324) to obtain:\n\n$$\n\\begin{aligned}\n& \\operatorname{Pr}\\left(N^{\\frac{2}{d-1}} \\alpha_{\\min } \\geq \\frac{\\sqrt{5} N^{\\frac{2}{d-1}}}{M}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{1}{2}}\\right) \\\\\n& \\geq 1-\\frac{\\kappa_{d-1}}{2} 5^{\\frac{d-1}{2}} N^{2} M^{-(d-1)}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{d-1}{2}}\n\\end{aligned}\n$$\n\nFor Eq. (339) to be fulfilled, it is sufficient that\n\n$$\n\\frac{\\kappa_{d-1}}{2} 5^{\\frac{d-1}{2}} N^{2} M^{-(d-1)}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{d-1}{2}}-p \\leqslant 0\n$$\n\nIf we insert the assumption Eq. (334) of the theorem into Eq. (335), then we obtain $N \\geq 2$. We now apply the upper bound $\\kappa_{d-1} / 2<\\kappa_{d-1}<1$ from Eq. (325) and the upper bound $\\frac{2}{\\beta N} \\leqslant \\frac{1}{\\beta}$ from $N \\geq 2$ to inequality Eq. (341). In the resulting inequality we insert $N=\\sqrt{p} c^{\\frac{d-1}{4}}$ to check whether it is fulfilled with this special value of $N$ and obtain:\n\n$$\n5^{\\frac{d-1}{2}} p c^{\\frac{d-1}{2}} M^{-(d-1)}\\left(\\frac{1}{\\beta}+\\frac{1}{\\beta} \\ln \\left(2 p c^{\\frac{d-1}{2}} \\beta M^{2}\\right)\\right)^{\\frac{d-1}{2}} \\leqslant p\n$$\n\nDividing by $p$, inserting $M=K \\sqrt{d-1}$, and exponentiation of the left and right side by $\\frac{2}{d-1}$ gives:\n\n$$\n\\frac{5 c}{K^{2}(d-1)}\\left(\\frac{1}{\\beta}+\\frac{1}{\\beta} \\ln \\left(2 \\beta c^{\\frac{d-1}{2}} p K^{2}(d-1)\\right)\\right)-1 \\leqslant 0\n$$\n\nAfter some algebraic manipulation, this inequality can be written as\n\n$$\na c+c \\ln (c)-b \\leqslant 0\n$$\n\nwhere we used\n\n$$\na:=\\frac{2}{d-1}\\left(1+\\ln \\left(2 \\beta K^{2} p(d-1)\\right)\\right), \\quad b:=\\frac{2 K^{2} \\beta}{5}\n$$\n\nWe determine the value $\\hat{c}$ of $c$ which makes the inequality Eq. (344) equal to zero. We solve\n\n$$\na \\hat{c}+\\hat{c} \\ln (\\hat{c})-b=0\n$$\n\nfor $\\hat{c}$ :\n\n$$\n\\begin{aligned}\n& a \\hat{c}+\\hat{c} \\ln (\\hat{c})-b=0 \\\\\n\\Leftrightarrow & a+\\ln (\\hat{c})=b / \\hat{c} \\\\\n\\Leftrightarrow & a+\\ln (b)+\\ln (\\hat{c} / b)=b / \\hat{c} \\\\\n\\Leftrightarrow & b / \\hat{c}+\\ln (b / \\hat{c})=a+\\ln (b) \\\\\n\\Leftrightarrow & b / \\hat{c} \\exp (b / \\hat{c})=\\exp (a+\\ln (b)) \\\\\n\\Leftrightarrow & b / \\hat{c}=W_{0}(\\exp (a+\\ln (b))) \\\\\n\\Leftrightarrow & \\hat{c}=\\frac{b}{W_{0}(\\exp (a+\\ln (b))}\n\\end{aligned}\n$$\n\nwhere $W_{0}$ is the upper branch of the Lambert $W$ function (see Def. A6). Hence, the solution is\n\n$$\n\\hat{c}=\\frac{b}{W_{0}(\\exp (a+\\ln (b))}\n$$\n\nThe solution exist, since the Lambert function $W_{0}(x)$ (Olver et al., 2010, (4.13)) is defined for $-1 / e<x$ and we have $0<\\exp (a+\\ln (b)$.",
    "hopfield-24": "Since $\\hat{c}$ fulfills inequality Eq. (344) and therefore also Eq. (342), we have a lower bound on the storage capacity $N$ :\n\n$$\nN \\geq \\sqrt{p} \\hat{c}^{\\frac{d-1}{4}}\n$$\n\nNext we aim at a lower bound on $c$ which does not use the Lambert $W$ function (Olver et al., 2010, (4.13)). Therefore, we upper bound $W_{0}(\\exp (a+\\ln (b))$ to obtain a lower bound on $c$, therefore, also a lower bound on the storage capacity $N$.",
    "hopfield-25": "The lower bound is given in the next corollary. Corollary A1. We assume a failure probability $0<p \\leqslant 1$ and randomly chosen patterns on the sphere with radius $M=K \\sqrt{d-1}$. We define\n\n$$\na:=\\frac{2}{d-1}\\left(1+\\ln \\left(2 \\beta K^{2} p(d-1)\\right)\\right), \\quad b:=\\frac{2 K^{2} \\beta}{5}\n$$\n\nUsing the omega constant $\\Omega \\approx 0.56714329$ we set\n\n$$\nc= \\begin{cases}b \\ln \\left(\\frac{\\Omega \\exp (a+\\ln (b))+1}{\\Omega(1+\\Omega)}\\right)^{-1} & \\text { for } a+\\ln (b) \\leqslant 0 \\\\ b(a+\\ln (b))^{-\\frac{a+\\ln (b)}{a+\\ln (b)+1}} & \\text { for } a+\\ln (b)>0\\end{cases}\n$$\n\nand ensure\n\n$$\nc \\geq\\left(\\frac{2}{\\sqrt{p}}\\right)^{\\frac{4}{d-1}}\n$$\n\nThen with probability $1-p$, the number of random patterns that can be stored is\n\n$$\nN \\geq \\sqrt{p} c^{\\frac{d-1}{4}}\n$$\n\nExamples are $c \\geq 3.1444$ for $\\beta=1, K=3, d=20$ and $p=0.001(a+\\ln (b)>1.27)$ and $c \\geq 1.2585$ for $\\beta=1 K=1, d=75$, and $p=0.001(a+\\ln (b)<-0.94)$.",
    "hopfield-26": "Proof. We lower bound the $c$ defined in Theorem A5. According to (Hoorfar \\& Hassani, 2008, Theorem 2.3) we have for any real $u$ and $y>\\frac{1}{e}$ :\n\n$$\nW_{0}(\\exp (u)) \\leqslant \\ln \\left(\\frac{\\exp (u)+y}{1+\\ln (y)}\\right)\n$$\n\nTo upper bound $W_{0}(x)$ for $x \\in[0,1]$, we set\n\n$$\ny=1 / W_{0}(1)=1 / \\Omega=\\exp \\Omega=-1 / \\ln \\Omega \\approx 1.76322\n$$\n\nwhere the Omega constant $\\Omega$ is\n\n$$\n\\Omega=\\left(\\int_{-\\infty}^{\\infty} \\frac{\\mathrm{d} t}{\\left(e^{t}-t\\right)^{2}+\\pi^{2}}\\right)^{-1}-1 \\approx 0.56714329\n$$\n\nSee for these equations the special values of the Lambert $W$ function in Lemma A31. We have the upper bound on $W_{0}$ :\n\n$$\nW_{0}(\\exp (u)) \\leqslant \\ln \\left(\\frac{\\exp (u)+1 / \\Omega}{1+\\ln (1 / \\Omega)}\\right)=\\ln \\left(\\frac{\\Omega \\exp (u)+1}{\\Omega(1+\\Omega)}\\right)\n$$\n\nAt the right hand side of interval $[0,1]$, we have $u=0$ and $\\exp (u)=1$ and get:\n\n$$\n\\ln \\left(\\frac{\\Omega 1+1}{\\Omega(1+\\Omega)}\\right)=\\ln \\left(\\frac{1}{\\Omega}\\right)=-\\ln (\\Omega)=\\Omega=W_{0}(1)\n$$\n\nTherefore, the bound is tight at the right hand side of of interval $[0,1]$, that is for $\\exp (u)=1$, i.e. $u=0$. We have derived an bound for $W_{0}(\\exp (u))$ with $\\exp (u) \\in[0,1]$ or, equivalently, $u \\in[-\\infty, 0]$. We obtain from Hoorfar \\& Hassani (2008, Corollary 2.6) the following bound on $W_{0}(\\exp (u))$ for $1<\\exp (u)$, or, equivalently $0<u$ :\n\n$$\nW_{0}(\\exp (u)) \\leqslant u^{\\frac{u}{1+u}}\n$$\n\nA lower bound on $\\hat{c}$ is obtained via the upper bounds Eq. (357) and Eq. (355) on $W_{0}$ as $W_{0}>0$. We set $u=a+\\ln (b)$ and obtain\n\n$$\nW_{0}(\\exp (a+\\ln (b))) \\leqslant \\begin{cases}\\ln \\left(\\frac{\\Omega \\exp (a+\\ln (b))+1}{\\Omega(1+\\Omega)}\\right)^{-1} & \\text { for } a+\\ln (b) \\leqslant 0 \\\\ (a+\\ln (b))^{-\\frac{a+\\ln (b)}{a+\\ln (b)+1}} & \\text { for } a+\\ln (b)>0\\end{cases}\n$$\n\nWe insert this bound into Eq. (347), the solution for $\\hat{c}$, to obtain the statement of the theorem. -Exponential storage capacity: the dimension $d$ of the space as a function of the parameter $\\beta$, the radius of the sphere $M$, and the probability $p$. We express the number $N$ of stored patterns by an exponential function with base $c>1$ and an exponent linear in $d$. We derive constraints on the dimension $d$ of the space as a function of $\\beta$, the radius of the sphere $M$, the probability $p$ that all patterns can be stored, and the base of the exponential storage capacity. The following theorem gives this result. Theorem A6 (Storage Capacity (d computed): Random Patterns). We assume a failure probability $0<p \\leqslant 1$ and randomly chosen patterns on the sphere with radius $M=K \\sqrt{d-1}$. We define\n\n$$\n\\begin{aligned}\n& a:=\\frac{\\ln (c)}{2}-\\frac{K^{2} \\beta}{5 c}, \\quad b:=1+\\ln \\left(2 p \\beta K^{2}\\right) \\\\\n& d= \\begin{cases}1+\\frac{1}{a} W(a \\exp (-b)) & \\text { for } a \\neq 0 \\\\\n1+\\exp (-b) & \\text { for } a=0\\end{cases}\n\\end{aligned}\n$$\n\nwhere $W$ is the Lambert $W$ function (Olver et al., 2010, (4.13)). For $0<a$ the function $W$ is the upper branch $W_{0}$ and for $a<0$ we use the lower branch $W_{-1}$. If we ensure that\n\n$$\nc \\geq\\left(\\frac{2}{\\sqrt{p}}\\right)^{\\frac{4}{d-1}}, \\quad-\\frac{1}{e} \\leqslant a \\exp (-b)\n$$\n\nthen with probability $1-p$, the number of random patterns that can be stored is\n\n$$\nN \\geq \\sqrt{p} c^{\\frac{d-1}{4}}\n$$\n\nProof. We consider the probability that the master inequality Eq. (311) is fulfilled:\n\n$$\n\\left.\\operatorname{Pr}\\left(M^{2}\\left(1-\\cos \\left(\\alpha_{\\min }\\right)\\right)\\right) \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right) \\geq 1-p\n$$\n\nUsing Eq. (329), we have:\n\n$$\n1-\\cos \\left(\\alpha_{\\min }\\right) \\geq \\frac{1}{5} \\alpha_{\\min }^{2}\n$$\n\nTherefore, with probability $1-p$ the storage capacity is largest $N$ that fulfills\n\n$$\n\\operatorname{Pr}\\left(M^{2} \\frac{\\alpha_{\\min }^{2}}{5} \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right) \\geq 1-p\n$$\n\nThis inequality is equivalent to\n\n$$\n\\operatorname{Pr}\\left(N^{\\frac{2}{d-1}} \\alpha_{\\min } \\geq \\frac{\\sqrt{5} N^{\\frac{2}{d-1}}}{M}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{1}{2}}\\right) \\geq 1-p\n$$\n\nWe use Eq. (324) to obtain:\n\n$$\n\\begin{aligned}\n& \\operatorname{Pr}\\left(N^{\\frac{2}{d-1}} \\alpha_{\\min } \\geq \\frac{\\sqrt{5} N^{\\frac{2}{d-1}}}{M}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{1}{2}}\\right) \\\\\n& \\geq 1-\\frac{\\kappa_{d-1}}{2} 5^{\\frac{d-1}{2}} N^{2} M^{-(d-1)}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{d-1}{2}}\n\\end{aligned}\n$$\n\nFor Eq. (365) to be fulfilled, it is sufficient that\n\n$$\n\\frac{\\kappa_{d-1}}{2} 5^{\\frac{d-1}{2}} N^{2} M^{-(d-1)}\\left(\\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\\right)^{\\frac{d-1}{2}}-p \\leqslant 0\n$$\n\nIf we insert the assumption Eq. (360) of the theorem into Eq. (361), then we obtain $N \\geq 2$. We now apply the upper bound $\\kappa_{d-1} / 2<\\kappa_{d-1}<1$ from Eq. (325) and the upper bound $\\frac{2}{\\beta N} \\leqslant \\frac{1}{\\beta}$ from $N \\geq 2$ to inequality Eq. (367). In the resulting inequality we insert $N=\\sqrt{p} c^{\\frac{d-1}{4}}$ to check whether it is fulfilled with this special value of $N$ and obtain:\n\n$$\n5^{\\frac{d-1}{2}} p c^{\\frac{d-1}{2}} M^{-(d-1)}\\left(\\frac{1}{\\beta}+\\frac{1}{\\beta} \\ln \\left(2 p c^{\\frac{d-1}{2}} \\beta M^{2}\\right)\\right)^{\\frac{d-1}{2}} \\leqslant p\n$$\n\nDividing by $p$, inserting $M=K \\sqrt{d-1}$, and exponentiation of the left and right side by $\\frac{2}{d-1}$ gives:\n\n$$\n\\frac{5 c}{K^{2}(d-1)}\\left(\\frac{1}{\\beta}+\\frac{1}{\\beta} \\ln \\left(2 \\beta c^{\\frac{d-1}{2}} p K^{2}(d-1)\\right)\\right)-1 \\leqslant 0\n$$\n\nThis inequality Eq. (369) can be reformulated as:\n\n$$\n1+\\ln \\left(2 p \\beta c^{\\frac{d-1}{2}} K^{2}(d-1)\\right)-\\frac{(d-1) K^{2} \\beta}{5 c} \\leqslant 0\n$$\n\nUsing\n\n$$\na:=\\frac{\\ln (c)}{2}-\\frac{K^{2} \\beta}{5 c}, \\quad b:=1+\\ln \\left(2 p \\beta K^{2}\\right)\n$$\n\nwe write inequality Eq. (370) as\n\n$$\n\\ln (d-1)+a(d-1)+b \\leqslant 0\n$$\n\nWe determine the value $\\hat{d}$ of $d$ which makes the inequality Eq. (372) equal to zero. We solve\n\n$$\n\\ln (\\hat{d}-1)+a(\\hat{d}-1)+b=0\n$$\n\nfor $\\hat{d}$\nFor $a \\neq 0$ we have\n\n$$\n\\begin{aligned}\n& \\ln (\\hat{d}-1)+a(\\hat{d}-1)+b=0 \\\\\n\\Leftrightarrow & a(\\hat{d}-1)+\\ln (\\hat{d}-1)=-b \\\\\n\\Leftrightarrow & (\\hat{d}-1) \\exp (a(\\hat{d}-1))=\\exp (-b) \\\\\n\\Leftrightarrow & a(\\hat{d}-1) \\exp (a(\\hat{d}-1))=a \\exp (-b) \\\\\n\\Leftrightarrow & a(\\hat{d}-1)=W(a \\exp (-b)) \\\\\n\\Leftrightarrow & \\hat{d}-1=\\frac{1}{a} W(a \\exp (-b)) \\\\\n\\Leftrightarrow & \\hat{d}=1+\\frac{1}{a} W(a \\exp (-b))\n\\end{aligned}\n$$\n\nwhere $W$ is the Lambert $W$ function (see Def. A6). For $a>0$ we have to use the upper branch $W_{0}$ of the Lambert $W$ function and for $a<0$ we use the lower branch $W_{-1}$ of the Lambert $W$ function (Olver et al., 2010, (4.13)). We have to ensure that $-1 / e \\leqslant a \\exp (-b)$ for a solution to exist. For $a=0$ we have $\\hat{d}=1+\\exp (-b)$. Hence, the solution is\n\n$$\n\\hat{d}=1+\\frac{1}{a} W(a \\exp (-b))\n$$\n\nSince $\\hat{d}$ fulfills inequality Eq. (369) and therefore also Eq. (368), we have a lower bound on the storage capacity $N$ :\n\n$$\nN \\geq \\sqrt{p} \\hat{c}^{\\frac{d-1}{4}}\n$$\n\nCorollary A2. We assume a failure probability $0<p \\leqslant 1$ and randomly chosen patterns on the sphere with radius $M=K \\sqrt{d-1}$. We define\n\n$$\n\\begin{aligned}\n& a:=\\frac{\\ln (c)}{2}-\\frac{K^{2} \\beta}{5 c}, \\quad b:=1+\\ln \\left(2 p \\beta K^{2}\\right) \\\\\n& d=1+\\frac{1}{a}(-\\ln (-a)+b)\n\\end{aligned}\n$$\n\nand ensure\n\n$$\nc \\geq\\left(\\frac{2}{\\sqrt{p}}\\right)^{\\frac{4}{d-1}}, \\quad-\\frac{1}{e} \\leqslant a \\exp (-b), \\quad a<0\n$$\n\nthen with probability $1-p$, the number of random patterns that can be stored is\n\n$$\nN \\geq \\sqrt{p} c^{\\frac{d-1}{4}}\n$$\n\nSetting $\\beta=1, K=3, c=2$ and $p=0.001$ yields $d<24$.",
    "hopfield-27": "Proof. For $a<0$ the Eq. (359) from Theorem (A6) can be written as\n\n$$\nd=1+\\frac{W_{-1}(a \\exp (-b))}{a}=1+\\frac{W_{-1}(-\\exp (-(-\\ln (-a)+b-1)-1))}{a}\n$$\n\nFrom Alzahrani \\& Salem (2018, Theorem 3.1) we get the following bound on $W_{-1}$ :\n\n$$\n-\\frac{e}{e-1}(u+1)<W_{-1}(-\\exp (-u-1))<-(u+1)\n$$\n\nfor $u>0$. We apply Eq.",
    "hopfield-28": "(381) to Eq. (380) with $u=-\\ln (-a)+b-1$. Since $a<0$ we get\n\n$$\nd>1+\\frac{-\\ln (-a)+b}{a}\n$$\n\n-Storage capacity for the expected minimal separation instead of the probability that all patterns can be stored. In contrast to the previous paragraph, we want to argue about the storage capacity for the expected minimal separation. Therefore, we will use the following bound on the expectation of $\\alpha_{\\text {min }}$ (minimal angle), which gives also a bound on the expected of $\\Delta_{\\min }$ (minimal separation):\nLemma A16 (Proposition 3.6 in Brauchart et al. (2018)). We have the following lower bound on the expectation of $\\alpha_{\\min }$ :\n\n$$\n\\mathrm{E}\\left[N^{\\frac{2}{d-1}} \\alpha_{\\min }\\right] \\geq\\left(\\frac{\\Gamma\\left(\\frac{d}{2}\\right)}{2(d-1) \\sqrt{\\pi} \\Gamma\\left(\\frac{d-1}{2}\\right)}\\right)^{-\\frac{1}{d-1}} \\Gamma\\left(1+\\frac{1}{d-1}\\right) \\frac{d^{-\\frac{1}{d-1}}}{\\Gamma\\left(2+\\frac{1}{d-1}\\right)}:=C_{d-1}\n$$\n\nThe bound is valid for all $N \\geq 2$ and $d \\geq 2$. Let us start with some preliminary estimates. First of all we need some asymptotics for the constant $C_{d-1}$ in Eq. (383):\nLemma A17. The following estimate holds for $d \\geq 2$ :\n\n$$\nC_{d} \\geq 1-\\frac{\\ln (d+1)}{d}\n$$\n\nProof. The recursion formula for the Gamma function is (Olver et al., 2010, (5.5.1)):\n\n$$\n\\Gamma(x+1)=x \\Gamma(x)\n$$\n\nWe use Eq. (325) and the fact that $d^{\\frac{1}{d}} \\geq 1$ for $d \\geq 1$ to obtain:\n\n$$\n\\begin{aligned}\nC_{d} & \\geq(2 \\sqrt{d})^{\\frac{1}{d}} \\Gamma\\left(1+\\frac{1}{d}\\right) \\frac{(d+1)^{-\\frac{1}{d}}}{\\Gamma\\left(2+\\frac{1}{d}\\right)}=(2 \\sqrt{d})^{\\frac{1}{d}} \\frac{(d+1)^{-\\frac{1}{d}}}{1-\\frac{1}{d}}>(d+1)^{\\frac{1}{d}} \\\\\n& =\\exp \\left(-\\frac{1}{d} \\ln (d+1)\\right) \\geq 1-\\frac{1}{d} \\ln (d+1)\n\\end{aligned}\n$$\n\nwhere in the last step we used the elementary inequality $\\exp (x) \\geq 1+x$, which follows from the mean value theorem. The next theorem states the number of stored patterns for the expected minimal separation. Theorem $\\mathbf{A 7}$ (Storage Capacity (expected separation): Random Patterns). We assume patterns on the sphere with radius $M=K \\sqrt{d-1}$ that are randomly chosen. Then for all values $c \\geq 1$ for which\n\n$$\n\\frac{1}{5}(d-1) K^{2} c^{-1}\\left(1-\\frac{\\ln (d-1)}{(d-1)}\\right)^{2} \\geq \\frac{2}{\\beta c^{\\frac{d-1}{4}}}+\\frac{1}{\\beta} \\ln \\left(2 c^{\\frac{d-1}{2}} \\beta(d-1) K^{2}\\right)\n$$\n\nholds, the number of stored patterns for the expected minimal separation is at least\n\n$$\nN=c^{\\frac{d-1}{4}}\n$$\n\nThe inequality Eq. (387) is e.g. fulfilled with $\\beta=1, K=3, c=2$ and $d \\geq 17$. Proof. Instead of considering the probability that the master inequality Eq. (311) is fulfilled we now consider whether this inequality is fulfilled for the expected minimal distance. We consider the expectation of the minimal distance $\\Delta_{\\min }$ :\n\n$$\n\\left.\\left.\\mathrm{E}\\left[\\Delta_{\\min }\\right]=\\mathrm{E}\\left[M^{2}\\left(1-\\cos \\left(\\alpha_{\\min }\\right)\\right)\\right)\\right]=M^{2}\\left(1-\\mathrm{E}\\left[\\cos \\left(\\alpha_{\\min }\\right)\\right)\\right]\\right)\n$$\n\nFor this expectation, the master inequality Eq. (311) becomes\n\n$$\n\\left.M^{2}\\left(1-\\mathrm{E}\\left[\\cos \\left(\\alpha_{\\min }\\right)\\right)\\right]\\right) \\geq \\frac{2}{\\beta N}+\\frac{1}{\\beta} \\ln \\left(2 N^{2} \\beta M^{2}\\right)\n$$\n\nWe want to find the largest $N$ that fulfills this inequality. We apply Eq. (329) and Jensen's inequality to deduce the following lower bound:\n\n$$\n1-\\mathrm{E}\\left[\\cos \\left(\\alpha_{\\min }\\right)\\right] \\geq \\frac{1}{5} \\mathrm{E}\\left[\\alpha_{\\min }^{2}\\right] \\geq \\frac{1}{5} \\mathrm{E}\\left[\\alpha_{\\min }\\right]^{2}\n$$\n\nNow we use Eq. (383) and Eq. (384) to arrive at\n\n$$\n\\mathrm{E}\\left[\\alpha_{\\min }\\right]^{2} \\geq N^{-\\frac{4}{d-1}} \\mathrm{E}\\left[N^{\\frac{2}{d-1}} \\alpha_{\\min }\\right]^{2} \\geq N^{-\\frac{4}{d-1}} C_{d-1}^{2} \\geq N^{-\\frac{4}{d-1}}\\left(1-\\frac{\\ln (d-1)}{(d-1)}\\right)^{2}\n$$\n\nfor sufficiently large $d$.",
    "hopfield-29": "Thus in order to fulfill Eq.",
    "hopfield-30": "(390), it is enough to find values that satisfy Eq. (387). A.1.6.2 Retrieval of Patterns with One Update and Small Retrieval Error. Retrieval of a pattern $\\boldsymbol{x}_{i}$ for fixed point $\\boldsymbol{x}_{i}^{*}$ and query $\\boldsymbol{\\xi}$ is defined via an $\\epsilon$ by $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|<\\epsilon$, that is, the update is $\\epsilon$-close to the fixed point. The update rule retrieves a pattern with one update for well separated patterns, that is, $\\Delta_{i}$ is large. Theorem A8 (Pattern Retrieval with One Update). With query $\\boldsymbol{\\xi}$, after one update the distance of the new point $f(\\boldsymbol{\\xi})$ to the fixed point $\\boldsymbol{x}_{i}^{*}$ is exponentially small in the separation $\\Delta_{i}$. The precise bounds using the Jacobian $\\mathrm{J}=\\frac{\\partial f(\\boldsymbol{\\xi})}{\\partial \\xi}$ and its value $\\mathrm{J}^{m}$ in the mean value theorem are:\n\n$$\n\\begin{aligned}\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\| & \\leqslant\\left\\|J^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\| \\\\\n\\left\\|J^{m}\\right\\|_{2} & \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n\\end{aligned}\n$$\n\nFor given $\\epsilon$ and sufficient large $\\Delta_{i}$, we have $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|<\\epsilon$, that is, retrieval with one update. Proof. From Eq. (180) we have\n\n$$\n\\left\\|J^{m}\\right\\|_{2} \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n$$\n\nAfter every iteration the mapped point $f(\\boldsymbol{\\xi})$ is closer to the fixed point $\\boldsymbol{x}_{i}^{*}$ than the original point $\\boldsymbol{x}_{i}$ :\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant\\left\\|\\mathrm{J}^{m}\\right\\|_{2}\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}^{*}\\right\\|\n$$\n\nFor given $\\epsilon$ and sufficient large $\\Delta_{i}$, we have $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|<\\epsilon$, since $\\left\\|\\mathrm{J}^{m}\\right\\|_{2}$ foes exponentially fast to zero with increasing $\\Delta_{i}$. We want to estimate how large $\\Delta_{i}$ is. For $\\boldsymbol{x}_{i}$ we have:\n\n$$\n\\Delta_{i}=\\min _{j, j \\neq i}\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\\right)=\\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\max _{j, j \\neq i} \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{j}\n$$\n\nTo estimate how large $\\Delta_{i}$ is, assume vectors $\\boldsymbol{x} \\in \\mathbb{R}^{d}$ and $\\boldsymbol{y} \\in \\mathbb{R}^{d}$ that have as components standard normally distributed values. The expected value of the separation of two points with normally distributed components is\n\n$$\n\\mathrm{E}\\left[\\boldsymbol{x}^{T} \\boldsymbol{x}-\\boldsymbol{x}^{T} \\boldsymbol{y}\\right]=\\sum_{j=1}^{d} \\mathrm{E}\\left[x_{j}^{2}\\right]+\\sum_{j=1}^{d} \\mathrm{E}\\left[x_{j}\\right] \\sum_{j=1}^{d} \\mathrm{E}\\left[y_{j}\\right]=d\n$$\n\nThe variance of the separation of two points with normally distributed components is\n\n$$\n\\begin{aligned}\n& \\operatorname{Var}\\left[\\boldsymbol{x}^{T} \\boldsymbol{x}-\\boldsymbol{x}^{T} \\boldsymbol{y}\\right]=\\mathrm{E}\\left[\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}-\\boldsymbol{x}^{T} \\boldsymbol{y}\\right)^{2}\\right]-d^{2} \\\\\n& =\\sum_{j=1}^{d} \\mathrm{E}\\left[x_{j}^{4}\\right]+\\sum_{j=1, k=1, k \\neq j}^{d} \\mathrm{E}\\left[x_{j}^{2}\\right] \\mathrm{E}\\left[x_{k}^{2}\\right]-2 \\sum_{j=1}^{d} \\mathrm{E}\\left[x_{j}^{3}\\right] \\mathrm{E}\\left[y_{j}\\right]- \\\\\n& 2 \\sum_{j=1, k=1, k \\neq j}^{d} \\mathrm{E}\\left[x_{j}^{2}\\right] \\mathrm{E}\\left[x_{k}\\right] \\mathrm{E}\\left[y_{k}\\right]+\\sum_{j=1}^{d} \\mathrm{E}\\left[x_{j}^{2}\\right] \\mathrm{E}\\left[y_{j}^{2}\\right]+ \\\\\n& \\sum_{j=1, k=1, k \\neq j}^{d} \\mathrm{E}\\left[x_{j}\\right] \\mathrm{E}\\left[y_{j}\\right] \\mathrm{E}\\left[x_{k}\\right] \\mathrm{E}\\left[y_{k}\\right]-d^{2} \\\\\n& =3 d+d(d-1)+d-d^{2}=3 d\n\\end{aligned}\n$$\n\nThe expected value for the separation of two random vectors gives:\n\n$$\n\\left\\|J^{m}\\right\\|_{2} \\leqslant 2 \\beta N M^{2}(N-1) \\exp \\left(-\\beta\\left(d-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n$$\n\nFor the exponential storage we set $M=2 \\sqrt{d-1}$. We see the Lipschitz constant $\\left\\|\\mathrm{J}^{m}\\right\\|_{2}$ decreases exponentially with the dimension. Therefore, $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}^{*}\\right\\|$ is exponentially small after just one update. Therefore, the fixed point is well retrieved after one update. The retrieval error decreases exponentially with the separation $\\Delta_{i}$. Theorem A9 (Exponentially Small Retrieval Error). The retrieval error $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}\\right\\|$ of pattern $\\boldsymbol{x}_{i}$ is bounded by\n\n$$\n\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}\\right\\| \\leqslant 2(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right) M\n$$\n\nand for $\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant \\frac{1}{2 \\beta M}$ together with $\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{\\xi}\\right\\| \\leqslant \\frac{1}{2 \\beta M}$ by\n\n$$\n\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant 2 e(N-1) M \\exp \\left(-\\beta \\Delta_{i}\\right)\n$$\n\nProof. We compute the retrieval error which is just $\\left\\|f(\\boldsymbol{\\xi})-\\boldsymbol{x}_{i}\\right\\|$. From Lemma A4 we have\n\n$$\n\\left\\|\\boldsymbol{x}_{i}-f(\\boldsymbol{\\xi})\\right\\| \\leqslant 2 \\epsilon M\n$$\n\nFrom Eq. (179) we have\n\n$$\n\\epsilon=(N-1) \\exp \\left(-\\beta\\left(\\Delta_{i}-2 \\max \\left\\{\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right\\|,\\left\\|\\boldsymbol{x}_{i}^{*}-\\boldsymbol{x}_{i}\\right\\|\\right\\} M\\right)\\right)\n$$\n\nFor $\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{x}_{i}^{*}\\right\\| \\leqslant \\frac{1}{2 \\beta M}$ and $\\left\\|\\boldsymbol{x}_{i}-\\boldsymbol{\\xi}\\right\\| \\leqslant \\frac{1}{2 \\beta M}$ Eq. (404) gives\n\n$$\n\\epsilon \\leqslant e(N-1) M \\exp \\left(-\\beta \\Delta_{i}\\right)\n$$\n\n## A.1.7 Learning Associations\n\nWe consider three cases of learning associations, i.e. three cases of how sets are associated. (i) Non of the sets is mapped in an associative space. The raw state pattern $\\boldsymbol{r}_{n}$ is the state (query) pattern $\\boldsymbol{\\xi}_{n}$, i.e. $\\boldsymbol{\\xi}_{n}=\\boldsymbol{r}_{n}$, and the raw stored pattern $\\boldsymbol{y}_{s}$ is the stored pattern (key), i.e. $\\boldsymbol{x}_{s}=\\boldsymbol{y}_{s}$. (ii) Either one of the sets is mapped to the space of the other set or an association matrix is learned. (iia) The state patterns are equal to the raw patterns, i.e. $\\boldsymbol{\\xi}_{n}=\\boldsymbol{r}_{n}$, and raw stored patterns are mapped via $\\boldsymbol{W}$ to the space of the state patterns, i.e. $\\boldsymbol{x}_{s}=\\boldsymbol{W} \\boldsymbol{y}_{s}$. (iib) The stored patterns are equal to the raw patterns, i.e. $\\boldsymbol{x}_{s}=\\boldsymbol{y}_{s}$, and raw state patterns are mapped via $\\boldsymbol{W}$ to the space of the stored patterns, i.e. $\\boldsymbol{\\xi}_{n}=\\boldsymbol{W}^{T} \\boldsymbol{r}_{n}$. (iic) The matrix $\\boldsymbol{W}$ is an association matrix. We will compute the derivative of the new state pattern with respect to $\\boldsymbol{W}$, which is valid for all sub-cases (iib)-(iic). (iii) Both set of patterns are mapped in a common associative space. A raw state pattern $\\boldsymbol{r}_{n}$ is mapped by $\\boldsymbol{W}_{Q}$ to a state pattern (query) $\\boldsymbol{\\xi}_{n}$, that is $\\boldsymbol{\\xi}_{n}=\\boldsymbol{W}_{Q} \\boldsymbol{r}_{n}$. A raw stored pattern $\\boldsymbol{y}_{s}$ is mapped via $\\boldsymbol{W}_{K}$ to stored pattern (key) $\\boldsymbol{x}_{s}$, that is $\\boldsymbol{x}_{s}=\\boldsymbol{W}_{K} \\boldsymbol{y}_{s}$. We will compute the derivative of the new state pattern with respect to both $\\boldsymbol{W}_{Q}$ and $\\boldsymbol{W}_{K}$. A.1.7.1 Association of Raw Patterns - No Mapping in an Associative Space. The sets are associated via their raw patterns, i.e. the raw state pattern $\\boldsymbol{r}_{n}$ is the state (query) pattern $\\boldsymbol{\\xi}_{n}$, i.e. $\\boldsymbol{\\xi}_{n}=\\boldsymbol{r}_{n}$, and raw stored pattern $\\boldsymbol{y}_{s}$ is the stored pattern (key), i.e.",
    "hopfield-31": "$\\boldsymbol{x}_{s}=\\boldsymbol{y}_{s}$. There is no mapping in an associative space. The update rule is\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{X} \\boldsymbol{p}\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nThe derivative with respect to $\\boldsymbol{\\xi}$ is\n\n$$\n\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}}=\\beta \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{X}^{T}\n$$\n\nThe derivative with respect to $\\boldsymbol{X}$ is\n\n$$\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\mathrm{new}}}{\\partial \\boldsymbol{X}}=\\boldsymbol{a} \\boldsymbol{p}^{T}+\\beta \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right)\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{a}\\right)\n$$\n\nThese derivatives allow to apply the chain rule if a Hopfield layer is integrated into a deep neural network. A.1.7.2 Learning an Association Matrix - Only One Set is Mapped in an Associative Space. Only one of the sets $\\boldsymbol{R}$ or $\\boldsymbol{Y}$ is mapped in the space of the patterns of the other set. Case (a): the state patterns are equal to the raw patterns $\\boldsymbol{\\xi}_{n}=\\boldsymbol{r}_{n}$ and raw stored patterns are mapped via $\\boldsymbol{W}$ to the space of the state patterns, i.e. $\\boldsymbol{x}_{s}=\\boldsymbol{W} \\boldsymbol{y}_{s}$. Case (b): the stored patterns are equal to the raw patterns $\\boldsymbol{x}_{s}=\\boldsymbol{y}_{s}$ and raw state patterns are mapped via $\\boldsymbol{W}$ to the space of the stored patterns, i.e. $\\boldsymbol{\\xi}_{n}=\\boldsymbol{W}^{T} \\boldsymbol{r}_{n}$. Case (c): the matrix $\\boldsymbol{W}$ associates the sets $\\boldsymbol{R}$ and $\\boldsymbol{Y}$. This case also includes that $\\boldsymbol{W}^{T}=\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q}$, which is treated in next subsection. The next subsection focuses on a low rank approximation of $\\boldsymbol{W}$ by defining the dimension $d_{k}$ of associative space and use the matrices $\\boldsymbol{W}_{K}^{T}$ and $\\boldsymbol{W}_{Q}$ to define $\\boldsymbol{W}$, or equivalently to map $\\boldsymbol{R}$ and $\\boldsymbol{Y}$ into the associative space. From a mathematical point of view all these case are equal as they lead to the same update rule. Therefore, we consider in the following Case (a) with $\\boldsymbol{x}_{s}=\\boldsymbol{W} \\boldsymbol{y}_{s}$ and $\\boldsymbol{\\xi}_{n}=\\boldsymbol{r}_{n}$. Still, the following formula are valid for all three cases (a)-(c). The update rule is\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{W} \\boldsymbol{Y} \\boldsymbol{p}\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{Y}^{T} \\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nWe consider the state (query) pattern $\\boldsymbol{\\xi}$ with result $\\boldsymbol{\\xi}^{\\text {new }}$ :\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{W} \\boldsymbol{Y} \\boldsymbol{p}=\\boldsymbol{W} \\boldsymbol{Y} \\operatorname{softmax}\\left(\\beta \\boldsymbol{Y}^{T} \\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nFor multiple updates this update rule has to be used. However for a single update, or the last update we consider a simplified update rule. Since new state vector $\\boldsymbol{\\xi}^{\\text {new }}$ is projected by a weight matrix $\\boldsymbol{W}_{V}$ to another vector, we consider the simplified update rule:\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{Y} \\boldsymbol{p}=\\boldsymbol{Y} \\operatorname{softmax}\\left(\\beta \\boldsymbol{Y}^{T} \\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nThe derivative with respect to $\\boldsymbol{W}$ is\n\n$$\n\\begin{gathered}\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}}=\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial\\left(\\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)} \\frac{\\partial\\left(\\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)}{\\partial \\boldsymbol{W}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}} \\\\\n\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial\\left(\\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)}=\\beta \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T} \\\\\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\boldsymbol{a}\n\\end{gathered}\n$$\n\nWe have the product of the 3-dimensional tensor $\\frac{\\partial\\left(\\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)}{\\partial \\boldsymbol{W}}$ with the vector $\\boldsymbol{a}$ which gives a 2 dimensional tensor, i.e. a matrix:\n\n$$\n\\begin{gathered}\n\\frac{\\partial\\left(\\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)}{\\partial \\boldsymbol{W}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\frac{\\partial\\left(\\boldsymbol{W}^{T} \\boldsymbol{\\xi}\\right)}{\\partial \\boldsymbol{W}} \\boldsymbol{a}=\\boldsymbol{\\xi}^{T} \\boldsymbol{a} \\boldsymbol{I} \\\\\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}}=\\beta \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{a}\\right)=\\mathrm{J}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{a}\\right)\n\\end{gathered}\n$$\n\nwhere J is the Jacobian of the update rule defined in Eq. (59). To obtain the derivative of the full update rule Eq. (412) we have to add the term\n\n$$\n\\boldsymbol{a} \\boldsymbol{p}^{T} \\boldsymbol{Y}^{T}\n$$\n\nand include the factor $\\boldsymbol{W}$ to get\n\n$$\n\\begin{aligned}\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}} & =\\boldsymbol{a} \\boldsymbol{p}^{T} \\boldsymbol{Y}^{T}+\\beta \\boldsymbol{W} \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{a}\\right) \\\\\n& =\\boldsymbol{a} \\boldsymbol{p}^{T} \\boldsymbol{Y}^{T}+\\boldsymbol{W} \\mathrm{J}\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{a}\\right)\n\\end{aligned}\n$$\n\nA.1.7.3 Learning Two Association Mappings - Both Sets are Mapped in an Associative Space. Both sets $\\boldsymbol{R}$ and $\\boldsymbol{Y}$ are mapped in an associative space. Every raw state pattern $\\boldsymbol{r}_{n}$ is mapped via $\\boldsymbol{W}_{Q}$ to a state pattern (query) $\\boldsymbol{\\xi}_{n}=\\boldsymbol{W}_{Q} \\boldsymbol{r}_{n}$. Every raw stored pattern $\\boldsymbol{y}_{s}$ is mapped via $\\boldsymbol{W}_{K}$ to a stored pattern (key) $\\boldsymbol{x}_{s}=\\boldsymbol{W}_{K} \\boldsymbol{y}_{s}$.",
    "hopfield-32": "In the last subsection we considered a single matrix $\\boldsymbol{W}$. For $\\boldsymbol{W}^{T}=\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q}$ we have the case of the last subsection. However in this subsection we are looking for a low rank approximation of $\\boldsymbol{W}$. Toward this end we define the dimension $d_{k}$ of associative space and use the matrices $\\boldsymbol{W}_{K}^{T}$ and $\\boldsymbol{W}_{Q}$ to map to the associative space. The update rule is\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{X} \\boldsymbol{p}\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nWe consider raw state patterns $\\boldsymbol{r}_{n}$ that are mapped to state patterns $\\boldsymbol{\\xi}_{n}=\\boldsymbol{W}_{Q} \\boldsymbol{r}_{n}$ with $\\boldsymbol{Q}^{T}=$ $\\boldsymbol{\\Xi}=\\boldsymbol{W}_{Q} \\boldsymbol{R}$ and raw stored pattern $\\boldsymbol{y}_{s}$ that are mapped to stored patterns $\\boldsymbol{x}_{s}=\\boldsymbol{W}_{K} \\boldsymbol{y}_{s}$ with $\\boldsymbol{K}^{T}=\\boldsymbol{X}=\\boldsymbol{W}_{K} \\boldsymbol{Y}$. The update rule is\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{W}_{K} \\boldsymbol{Y} \\boldsymbol{p}=\\boldsymbol{W}_{K} \\boldsymbol{Y} \\operatorname{softmax}\\left(\\beta \\boldsymbol{Y}^{T} \\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)\n$$\n\nSince new state vector $\\boldsymbol{\\xi}^{\\text {new }}$ is projected by a weight matrix $\\boldsymbol{W}_{V}$ to another vector, we consider the simplified update rule:\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=\\boldsymbol{Y} \\boldsymbol{p}=\\boldsymbol{Y} \\operatorname{softmax}\\left(\\beta \\boldsymbol{Y}^{T} \\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)\n$$\n\nFor the simplified update rule, the vector $\\boldsymbol{\\xi}^{\\text {new }}$ does not live in the associative space but in the space of raw stored pattern $\\boldsymbol{y}$. However $\\boldsymbol{W}_{K}$ would map it to the associative space. -Derivative with respect to $\\boldsymbol{W}_{Q}$. The derivative with respect to $\\boldsymbol{W}_{Q}$ is\n\n$$\n\\begin{gathered}\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{Q}}=\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{Q}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial\\left(\\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)} \\frac{\\partial\\left(\\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{Q}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}} \\\\\n\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial\\left(\\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}=\\beta \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T} \\boldsymbol{W}_{K}^{T} \\\\\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\boldsymbol{a}\n\\end{gathered}\n$$\n\nWe have the product of the 3-dimensional tensor $\\frac{\\partial\\left(\\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{Q}}$ with the vector $\\boldsymbol{a}$ which gives a 2 dimensional tensor, i.e. a matrix:\n\n$$\n\\begin{gathered}\n\\frac{\\partial\\left(\\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{Q}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\frac{\\partial\\left(\\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{Q}} \\boldsymbol{a}=\\boldsymbol{r}^{T} \\boldsymbol{a} \\boldsymbol{I} \\\\\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\mathrm{new}}}{\\partial \\boldsymbol{W}_{Q}}=\\beta \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T} \\boldsymbol{W}_{K}^{T}\\left(\\boldsymbol{r}^{T} \\boldsymbol{a}\\right)=\\mathrm{J} \\boldsymbol{W}_{K}^{T}\\left(\\boldsymbol{r}^{T} \\boldsymbol{a}\\right)\n\\end{gathered}\n$$\n\nwhere J is the Jacobian of the update rule defined in Eq. (59). To obtain the derivative of the full update rule Eq. (423) we have to include the factor $\\boldsymbol{W}_{K}$, then get\n\n$$\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{Q}}=\\beta \\boldsymbol{W}_{K} \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T} \\boldsymbol{W}_{K}^{T}\\left(\\boldsymbol{r}^{T} \\boldsymbol{a}\\right)=\\boldsymbol{W}_{K} \\mathrm{~J} \\boldsymbol{W}_{K}^{T}\\left(\\boldsymbol{r}^{T} \\boldsymbol{a}\\right)\n$$\n\n-Derivative with respect to $\\boldsymbol{W}_{K}$. The derivative with respect to $\\boldsymbol{W}_{K}$ is\n\n$$\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{K}}=\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{K}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial\\left(\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)} \\frac{\\partial\\left(\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{K}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}\n$$\n\n$$\n\\begin{aligned}\n& \\frac{\\partial \\boldsymbol{\\xi}^{\\text {new }}}{\\partial\\left(\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}=\\beta \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T} \\\\\n& \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\boldsymbol{a} . \\end{aligned}\n$$\n\nWe have the product of the 3-dimensional tensor $\\frac{\\partial(\\boldsymbol{W} \\boldsymbol{r})}{\\partial \\boldsymbol{W}_{K}}$ with the vector $\\boldsymbol{a}$ which gives a 2-dimensional tensor, i.e. a matrix:\n\n$$\n\\begin{gathered}\n\\frac{\\partial\\left(\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{K}} \\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{\\xi}^{\\text {new }}}=\\frac{\\partial\\left(\\boldsymbol{W}_{K}^{T} \\boldsymbol{W}_{Q} \\boldsymbol{r}\\right)}{\\partial \\boldsymbol{W}_{K}} \\boldsymbol{a}=\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}^{T} \\boldsymbol{a} \\boldsymbol{I} \\\\\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{K}}=\\beta \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T}\\left(\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}^{T} \\boldsymbol{a}\\right)=\\mathrm{J}\\left(\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}^{T} \\boldsymbol{a}\\right)\n\\end{gathered}\n$$\n\nwhere J is the Jacobian of the update rule defined in Eq. (59). To obtain the derivative of the full update rule Eq. (423) we have to add the term\n\n$$\n\\boldsymbol{a} \\boldsymbol{p}^{T} \\boldsymbol{Y}^{T}\n$$\n\nand to include the factor $\\boldsymbol{W}_{K}$, then get\n\n$$\n\\begin{aligned}\n\\frac{\\partial \\boldsymbol{a}^{T} \\boldsymbol{\\xi}^{\\text {new }}}{\\partial \\boldsymbol{W}_{K}} & =\\boldsymbol{a} \\boldsymbol{p}^{T} \\boldsymbol{Y}^{T}+\\beta \\boldsymbol{W}_{K} \\boldsymbol{Y}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{Y}^{T}\\left(\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}^{T} \\boldsymbol{a}\\right) \\\\\n& =\\boldsymbol{a} \\boldsymbol{p}^{T} \\boldsymbol{Y}^{T}+\\boldsymbol{W}_{K} \\mathrm{~J}\\left(\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}^{T} \\boldsymbol{a}\\right)\n\\end{aligned}\n$$\n\n## A.1.8 Infinite Many Patterns and Forgetting Patterns\n\nIn the next subsection we show how the new Hopfield networks can be used for auto-regressive tasks by causal masking. In the following subsection, we introduce forgetting to the new Hopfield networks by adding a negative value to the softmax which is larger if the pattern was observed more in the past. A.1.8.1 Infinite Many Patterns. The new Hopfield networks can be used for auto-regressive tasks, that is time series prediction and similar. Causal masking masks out the future by a large negative value in the softmax. We assume to have infinite many stored patterns (keys) $\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots$ that are represented by the infinite matrix\n\n$$\n\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots,\\right)\n$$\n\nThe pattern index is now a time index, that is, we observe $x_{t}$ at time $t$. The pattern matrix at time $t$ is\n\n$$\n\\boldsymbol{X}_{t}=\\left(\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots, \\boldsymbol{x}_{t}\\right)\n$$\n\nThe query at time $t$ is $\\boldsymbol{\\xi}_{t}$. For $M_{t}=\\max _{1 \\leqslant i \\leqslant t}\\left\\|\\boldsymbol{x}_{t}\\right\\|$, the energy function at time $t$ is $\\mathrm{E}_{t}$\n\n$$\n\\begin{aligned}\n\\mathrm{E}_{t} & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{t} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}_{t}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2}\n\\end{aligned}\n$$\n\nThe update rule is\n\n$$\n\\boldsymbol{\\xi}_{t}^{\\text {new }}=\\boldsymbol{X}_{t} \\boldsymbol{p}_{t}=\\boldsymbol{X}_{t} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}_{t}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)\n$$\n\nWe can use an infinite pattern matrix with an infinite softmax when using causal masking. The pattern matrix at time $t$ is\n\n$$\n\\boldsymbol{X}_{t}=\\left(\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots, \\boldsymbol{x}_{t},-\\alpha \\boldsymbol{\\xi}_{t},-\\alpha \\boldsymbol{\\xi}_{t}, \\ldots\\right)\n$$\n\nwith the query $\\boldsymbol{\\xi}_{t}$ and $\\alpha \\rightarrow \\infty$. The energy function at time $t$ is $\\mathrm{E}_{t}$\n\n$$\n\\begin{aligned}\n\\mathrm{E}_{t}= & -\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2} \\\\\n= & -\\beta^{-1} \\ln \\left(\\sum_{i=1}^{t} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}_{t}\\right)+\\sum_{i=t+1}^{\\lfloor\\alpha\\rfloor} \\exp \\left(-\\beta \\alpha\\left\\|\\boldsymbol{\\xi}_{t}\\right\\|^{2}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+ \\\\\n& \\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2}\n\\end{aligned}\n$$\n\nFor $\\alpha \\rightarrow \\infty$ and $\\left\\|\\boldsymbol{\\xi}_{t}\\right\\|>0$ this becomes\n\n$$\n\\begin{aligned}\n\\mathrm{E}_{t} & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{t} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}_{t}\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2}\n\\end{aligned}\n$$\n\nA.1.8.2 Forgetting Patterns. We introduce forgetting to the new Hopfield networks by adding a negative value in the softmax which increases with patterns that are more in the past.",
    "hopfield-33": "We assume to have infinite many patterns $\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots$ that are represented by the infinite matrix\n\n$$\n\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots,\\right)\n$$\n\nThe pattern index is now a time index, that is, we observe $\\boldsymbol{x}_{t}$ at time $t$. The pattern matrix at time $t$ is\n\n$$\n\\boldsymbol{X}_{t}=\\left(\\boldsymbol{x}_{1}, \\boldsymbol{x}_{2}, \\ldots, \\boldsymbol{x}_{t}\\right)\n$$\n\nThe query at time $t$ is $\\boldsymbol{\\xi}_{t}$. The energy function with forgetting parameter $\\gamma$ at time $t$ is $\\mathrm{E}_{t}$\n\n$$\n\\begin{aligned}\n\\mathrm{E}_{t} & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}-\\gamma(t-1, t-2, \\ldots, 0)^{T}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{T} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}_{t}-\\gamma(t-i)\\right)\\right)+\\frac{1}{2} \\boldsymbol{\\xi}_{t}^{T} \\boldsymbol{\\xi}_{t}+\\beta^{-1} \\ln t+\\frac{1}{2} M_{t}^{2}\n\\end{aligned}\n$$\n\nThe update rule is\n\n$$\n\\boldsymbol{\\xi}_{t}^{\\text {new }}=\\boldsymbol{X}_{t} \\boldsymbol{p}_{t}=\\boldsymbol{X}_{t} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)\n$$\n\nwhere we used\n\n$$\n\\boldsymbol{p}_{t}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}_{t}^{T} \\boldsymbol{\\xi}_{t}\\right)\n$$\n\n## A.1.9 Number of Spurious States\n\nThe energy E is defined as\n\n$$\n\\begin{aligned}\n\\mathrm{E} & =-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\beta^{-1} \\ln N+\\frac{1}{2} M^{2} \\\\\n& =-\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)+\\beta^{-1} \\ln N+\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}+\\frac{1}{2} M^{2}\n\\end{aligned}\n$$\n\nSince the negative exponential function is strict monotonic decreasing, $\\exp (-E)$ has minima, where E has maxima, and has maxima, where as has minima E. $$\n\\begin{aligned}\n\\exp (-\\mathrm{E}) & =\\exp \\left(\\operatorname{le}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right) \\exp \\left(-\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}\\right) C \\\\\n& =\\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)^{\\beta^{-1}} \\exp \\left(-\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}\\right) C \\\\\n& =\\left(\\sum_{i=1}^{N} \\exp \\left(\\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}\\right)\\right)^{\\beta^{-1}}\\left(\\exp \\left(-\\beta \\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}\\right)\\right)^{\\beta^{-1}} C \\\\\n& =\\left(\\sum_{i=1}^{N} \\exp \\left(\\beta\\left(\\boldsymbol{x}_{i}^{T} \\boldsymbol{\\xi}-\\frac{1}{2} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}\\right)\\right)\\right)^{\\beta^{-1}} C \\\\\n& =\\left(\\sum_{i=1}^{N} \\exp \\left(\\frac{1}{2} \\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}-\\frac{1}{2} \\beta\\left(\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right)^{T}\\left(\\boldsymbol{\\xi}-\\boldsymbol{x}_{i}\\right)\\right)\\right)^{\\beta^{-1}} C \\\\\n& =\\left(\\sum_{i=1}^{N} \\lambda\\left(\\boldsymbol{x}_{i}, \\beta\\right) G\\left(\\boldsymbol{\\xi} ; \\boldsymbol{x}_{i}, \\beta^{-1} \\boldsymbol{I}\\right)\\right)^{\\beta^{-1}} C\n\\end{aligned}\n$$\n\nwhere $C$ is a positive constant, $\\lambda\\left(\\boldsymbol{x}_{i}, \\beta\\right)=\\exp \\left(\\frac{1}{2} \\beta \\boldsymbol{x}_{i}^{T} \\boldsymbol{x}_{i}\\right)$ and $G\\left(\\boldsymbol{\\xi} ; \\boldsymbol{x}_{i}, \\beta^{-1} \\boldsymbol{I}\\right)$ is the Gaussian with mean $\\boldsymbol{x}_{i}$ and covariance matrix $\\beta^{-1} \\boldsymbol{I}$. Since $C$ is a positive constant and $x^{\\beta^{-1}}=\\exp \\left(\\beta^{-1} \\ln x\\right)$ is strict monotonic for positive $x$, the minima of E are the maxima of\n\n$$\n\\sum_{i=1}^{N} \\lambda\\left(\\boldsymbol{x}_{i}, \\beta\\right) G\\left(\\boldsymbol{\\xi} ; \\boldsymbol{x}_{i}, \\beta^{-1} \\boldsymbol{I}\\right)\n$$\n\nIn Carreira-Perpi\u00f1\u00e1n \\& Williams (2003) it was shown that Eq. (458) can have more than $N$ modes, that is, more than $N$ maxima. ## A. 2 Properties of SoftMax, Log-Sum-ExponEntial, LEGEndre Transform, LAMBERT W FUNCTION\n\nFor $\\beta>0$, the softmax is defined as\nDefinition $A 1$ (Softmax). $$\n\\begin{aligned}\n\\boldsymbol{p} & =\\operatorname{softmax}(\\beta \\boldsymbol{x}) \\\\\np_{i} & =[\\operatorname{softmax}(\\beta \\boldsymbol{x})]_{i}=\\frac{\\exp \\left(\\beta x_{i}\\right)}{\\sum_{k} \\exp \\left(\\beta x_{k}\\right)}\n\\end{aligned}\n$$\n\nWe also need the log-sum-exp function (lse), defined as\nDefinition $\\mathbf{A 2}$ (Log-Sum-Exp Function). $$\n\\operatorname{lse}(\\beta, \\boldsymbol{x})=\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta x_{i}\\right)\\right)\n$$\n\nWe can formulate the lse in another base:\n\n$$\n\\begin{aligned}\n\\beta_{a} & =\\frac{\\beta}{\\ln a} \\\\\n\\operatorname{lse}(\\beta, \\boldsymbol{x}) & =\\beta^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta x_{i}\\right)\\right) \\\\\n& =\\left(\\beta_{a} \\ln a\\right)^{-1} \\ln \\left(\\sum_{i=1}^{N} \\exp \\left(\\beta_{a} \\ln a x_{i}\\right)\\right) \\\\\n& =\\left(\\beta_{a}\\right)^{-1} \\log _{a}\\left(\\sum_{i=1}^{N} a^{\\beta_{a} x_{i}}\\right)\n\\end{aligned}\n$$\n\nIn particular, the base $a=2$ can be used to speed up computations. Next, we give the relation between the softmax and the lse function. Lemma A18. The softmax is the gradient of the lse:\n\n$$\n\\operatorname{softmax}(\\beta \\boldsymbol{x})=\\nabla_{\\boldsymbol{x}} \\mathrm{lse}(\\beta, \\boldsymbol{x})\n$$\n\nIn the next lemma we report some important properties of the lse function. Lemma A19. We define\n\n$$\n\\mathrm{L}:=\\boldsymbol{z}^{T} \\boldsymbol{x}-\\beta^{-1} \\sum_{i=1}^{N} z_{i} \\ln z_{i}\n$$\n\nwith $\\mathrm{L} \\geq \\boldsymbol{z}^{T} \\boldsymbol{x}$. The lse is the maximum of L on the $N$-dimensional simplex $D$ with $D=\\{\\boldsymbol{z} \\mid$ $\\left.\\sum_{i} z_{i}=1,0 \\leqslant z_{i}\\right\\}$\n\n$$\n\\operatorname{lse}(\\beta, \\boldsymbol{x})=\\max _{\\boldsymbol{z} \\in D} \\boldsymbol{z}^{T} \\boldsymbol{x}-\\beta^{-1} \\sum_{i=1}^{N} z_{i} \\ln z_{i}\n$$\n\nThe softmax $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is the argument of the maximum of L on the $N$-dimensional simplex $D$ with $D=\\left\\{\\boldsymbol{z} \\mid \\sum_{i} z_{i}=1,0 \\leqslant z_{i}\\right\\}$ :\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})=\\arg \\max _{\\boldsymbol{z} \\in D} \\boldsymbol{z}^{T} \\boldsymbol{x}-\\beta^{-1} \\sum_{i=1}^{N} z_{i} \\ln z_{i}\n$$\n\nProof.",
    "hopfield-34": "Eq. (466) is obtained from Equation (8) in Gao \\& Pavel (2017) and Eq. (467) from Equation (11) in Gao \\& Pavel (2017). From a physical point of view, the lse function represents the \"free energy\" in statistical thermodynamics (Gao \\& Pavel, 2017). Next we consider the Jacobian of the softmax and its properties. Lemma A20. The Jacobian $\\mathrm{J}_{s}$ of the softmax $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is\n\n$$\n\\mathrm{J}_{s}=\\frac{\\partial \\operatorname{softmax}(\\beta \\boldsymbol{x})}{\\partial \\boldsymbol{x}}=\\beta\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p}^{T}\\right)\n$$\n\nwhich gives the elements\n\n$$\n\\left[\\mathrm{J}_{s}\\right]_{i j}= \\begin{cases}\\beta p_{i}\\left(1-p_{i}\\right) & \\text { for } i=j \\\\ -\\beta p_{i} p_{j} & \\text { for } i \\neq j\\end{cases}\n$$\n\nNext we show that $J_{s}$ has eigenvalue 0 . Lemma A21. The Jacobian $\\mathrm{J}_{s}$ of the softmax function $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ has a zero eigenvalue with eigenvector 1. Proof. $$\n\\left[\\mathrm{J}_{s} \\mathbf{1}\\right]_{i}=\\beta\\left(p_{i}\\left(1-p_{i}\\right)-\\sum_{j, j \\neq i} p_{i} p_{j}\\right)=\\beta p_{i}\\left(1-\\sum_{j} p_{j}\\right)=0\n$$\n\nNext we show that 0 is the smallest eigenvalue of $\\mathrm{J}_{s}$, therefore $\\mathrm{J}_{s}$ is positive semi-definite but not (strict) positive definite. Lemma A22. The Jacobian $\\mathrm{J}_{s}$ of the softmax $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{\\xi})$ is symmetric and positive semidefinite. Proof. For an arbitrary $\\boldsymbol{z}$, we have\n\n$$\n\\begin{aligned}\n\\boldsymbol{z}^{T}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right) \\boldsymbol{z} & =\\sum_{i} p_{i} z_{i}^{2}-\\left(\\sum_{i} p_{i} z_{i}\\right)^{2} \\\\\n& =\\left(\\sum_{i} p_{i} z_{i}^{2}\\right)\\left(\\sum_{i} p_{i}\\right)-\\left(\\sum_{i} p_{i} z_{i}\\right)^{2} \\geq 0\n\\end{aligned}\n$$\n\nThe last inequality hold true because the Cauchy-Schwarz inequality says $\\left(\\boldsymbol{a}^{T} \\boldsymbol{a}\\right)\\left(\\boldsymbol{b}^{T} \\boldsymbol{b}\\right) \\geq\\left(\\boldsymbol{a}^{T} \\boldsymbol{b}\\right)^{2}$, which is the last inequality with $a_{i}=z_{i} \\sqrt{p_{i}}$ and $b_{i}=\\sqrt{p_{i}}$. Consequently $\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right)$ is positive semi-definite. Alternatively $\\sum_{i} p_{i} z_{i}^{2}-\\left(\\sum_{i} p_{i} z_{i}\\right)^{2}$ can be viewed as the expected second moment minus the mean squared which gives the variance that is larger equal to zero. The Jacobian is $0<\\beta$ times a positive semi-definite matrix, which is a positive semi-definite matrix. Moreover, the softmax is a monotonic map, as described in the next lemma. Lemma A23. The softmax $\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is monotone for $\\beta>0$, that is,\n\n$$\n\\left(\\operatorname{softmax}(\\beta \\boldsymbol{x})-\\operatorname{softmax}\\left(\\beta \\boldsymbol{x}^{\\prime}\\right)\\right)^{T}\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right) \\geq 0\n$$\n\nProof. We use the version of mean value theorem Lemma A32 with the symmetric matrix $J_{s}^{m}=$ $\\int_{0}^{1} \\mathrm{~J}_{s}\\left(\\lambda \\boldsymbol{x}+(1-\\lambda) \\boldsymbol{x}^{\\prime}\\right) \\mathrm{d} \\lambda:$\n\n$$\n\\operatorname{softmax}(\\boldsymbol{x})-\\operatorname{softmax}\\left(\\boldsymbol{x}^{\\prime}\\right)=J_{s}^{m}\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right)\n$$\n\nTherefore\n\n$$\n\\left(\\operatorname{softmax}(\\boldsymbol{x})-\\operatorname{softmax}\\left(\\boldsymbol{x}^{\\prime}\\right)\\right)^{T}\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right)=\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right)^{T} \\mathrm{~J}_{s}^{m}\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right) \\geq 0\n$$\n\nsince $\\mathrm{J}_{s}^{m}$ is positive semi-definite. For all $\\lambda$ the Jacobians $\\mathrm{J}_{s}\\left(\\lambda \\boldsymbol{x}+(1-\\lambda) \\boldsymbol{x}^{\\prime}\\right)$ are positive semi-definite according to Lemma A22. Since\n\n$$\n\\boldsymbol{x}^{T} \\mathrm{~J}_{s}^{m} \\boldsymbol{x}=\\int_{0}^{1} \\boldsymbol{x}^{T} \\mathrm{~J}_{s}\\left(\\lambda \\boldsymbol{x}+(1-\\lambda) \\boldsymbol{x}^{\\prime}\\right) \\boldsymbol{x} \\mathrm{d} \\lambda \\geq 0\n$$\n\nis an integral over positive values for every $\\boldsymbol{x}, \\mathrm{J}_{s}^{m}$ is positive semi-definite, too. Next we give upper bounds on the norm of $\\mathrm{J}_{s}$. Lemma A24. For a softmax $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ with $m=\\max _{i} p_{i}\\left(1-p_{i}\\right)$, the spectral norm of the Jacobian $\\mathrm{J}_{\\text {s }}$ of the softmax is bounded:\n\n$$\n\\begin{aligned}\n\\left\\|J_{s}\\right\\|_{2} & \\leqslant 2 m \\beta \\\\\n\\left\\|J_{s}\\right\\|_{1} & \\leqslant 2 m \\beta \\\\\n\\left\\|J_{s}\\right\\|_{\\infty} & \\leqslant 2 m \\beta\n\\end{aligned}\n$$\n\nIn particular everywhere holds\n\n$$\n\\left\\|\\mathrm{J}_{s}\\right\\|_{2} \\leqslant \\frac{1}{2} \\beta\n$$\n\nIf $p_{\\max }=\\max _{i} p_{i} \\geq 1-\\epsilon \\geq 0.5$, then for the spectral norm of the Jacobian holds\n\n$$\n\\left\\|\\mathrm{J}_{s}\\right\\|_{2} \\leqslant 2 \\epsilon \\beta-2 \\epsilon^{2} \\beta<2 \\epsilon \\beta\n$$\n\nProof. We consider the maximum absolute column sum norm\n\n$$\n\\|\\boldsymbol{A}\\|_{1}=\\max _{j} \\sum_{i}\\left|a_{i j}\\right|\n$$\n\nand the maximum absolute row sum norm\n\n$$\n\\|\\boldsymbol{A}\\|_{\\infty}=\\max _{i} \\sum_{j}\\left|a_{i j}\\right|\n$$\n\nWe have for $\\boldsymbol{A}=\\mathrm{J}_{s}=\\beta\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}\\right)$\n\n$$\n\\begin{aligned}\n\\sum_{j}\\left|a_{i j}\\right| & =\\beta\\left(p_{i}\\left(1-p_{i}\\right)+\\sum_{j, j \\neq i} p_{i} p_{j}\\right)=\\beta p_{i}\\left(1-2 p_{i}+\\sum_{j} p_{j}\\right) \\\\\n& =2 \\beta p_{i}\\left(1-p_{i}\\right) \\leqslant 2 m \\beta \\\\\n\\sum_{i}\\left|a_{i j}\\right| & =\\beta\\left(p_{j}\\left(1-p_{j}\\right)+\\sum_{i, i \\neq j} p_{j} p_{i}\\right)=\\beta p_{j}\\left(1-2 p_{j}+\\sum_{i} p_{i}\\right) \\\\\n& =2 \\beta p_{j}\\left(1-p_{j}\\right) \\leqslant 2 m \\beta\n\\end{aligned}\n$$\n\nTherefore, we have\n\n$$\n\\begin{aligned}\n\\left\\|\\mathrm{J}_{s}\\right\\|_{1} & \\leqslant 2 m \\beta \\\\\n\\left\\|\\mathrm{J}_{s}\\right\\|_{\\infty} & \\leqslant 2 m \\beta \\\\\n\\left\\|\\mathrm{J}_{s}\\right\\|_{2} & \\leqslant \\sqrt{\\left\\|\\mathrm{J}_{s}\\right\\|_{1}\\left\\|\\mathrm{~J}_{s}\\right\\|_{\\infty}} \\leqslant 2 m \\beta\n\\end{aligned}\n$$\n\nThe last inequality is a direct consequence of H\u00f6lder's inequality.",
    "hopfield-35": "For $0 \\leqslant p_{i} \\leqslant 1$, we have $p_{i}\\left(1-p_{i}\\right) \\leqslant 0.25$. Therefore, $m \\leqslant 0.25$ for all values of $p_{i}$. If $p_{\\max } \\geq 1-\\epsilon \\geq 0.5(\\epsilon \\leqslant 0.5)$, then $1-p_{\\max } \\leqslant \\epsilon$ and for $p_{i} \\neq p_{\\max } p_{i} \\leqslant \\epsilon$. The derivative $\\partial x(1-x) / \\partial x=1-2 x>0$ for $x<0.5$, therefore $x(1-x)$ increases with $x$ for $x<0.5$. Using $x=1-p_{\\max }$ and for $p_{i} \\neq p_{\\max } x=p_{i}$, we obtain $p_{i}\\left(1-p_{i}\\right) \\leqslant \\epsilon(1-\\epsilon)$ for all $i$. Consequently, we have $m \\leqslant \\epsilon(1-\\epsilon)$. Using the bounds on the norm of the Jacobian, we give some Lipschitz properties of the softmax function. Lemma A25. The softmax function $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is $(\\beta / 2)$-Lipschitz. The softmax function $\\boldsymbol{p}=$ $\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is $(2 \\beta m)$-Lipschitz in a convex environment $U$ for which $m=\\max _{\\boldsymbol{x} \\in U} \\max _{i} p_{i}(1-$ $\\left.p_{i}\\right)$. For $p_{\\max }=\\min _{\\boldsymbol{x} \\in U} \\max _{i} p_{i}=1-\\epsilon$, the softmax function $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is $(2 \\beta \\epsilon)$-Lipschitz. For $\\beta<2 m$, the softmax $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is contractive in $U$ on which $m$ is defined. Proof. The version of mean value theorem Lemma A32 states for the symmetric matrix $\\mathrm{J}_{s}^{m}=$ $\\int_{0}^{1} J\\left(\\lambda \\boldsymbol{x}+(1-\\lambda) \\boldsymbol{x}^{\\prime}\\right) \\mathrm{d} \\lambda:$\n\n$$\n\\operatorname{softmax}(\\boldsymbol{x})-\\operatorname{softmax}\\left(\\boldsymbol{x}^{\\prime}\\right)=\\mathrm{J}_{s}^{m}\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right)\n$$\n\nAccording to Lemma A24 for all $\\left.\\tilde{\\boldsymbol{x}}=\\lambda \\boldsymbol{x}+(1-\\lambda) \\boldsymbol{x}^{\\prime}\\right)$\n\n$$\n\\left\\|J_{s}(\\tilde{\\boldsymbol{x}})\\right\\|_{2} \\leqslant 2 \\tilde{m} \\beta\n$$\n\nwhere $\\tilde{m}=\\max _{i} \\tilde{p}_{i}\\left(1-\\tilde{p}_{i}\\right)$. Since $\\boldsymbol{x} \\in U$ and $\\boldsymbol{x}^{\\prime} \\in U$ we have $\\tilde{\\boldsymbol{x}} \\in U$, since $U$ is convex. For $m=\\max _{\\boldsymbol{x} \\in U} \\max _{i} p_{i}\\left(1-p_{i}\\right)$ we have $\\tilde{m} \\leqslant m$ for all $\\tilde{m}$. Therefore, we have\n\n$$\n\\left\\|\\mathrm{J}_{s}(\\tilde{\\boldsymbol{x}})\\right\\|_{2} \\leqslant 2 m \\beta\n$$\n\nwhich also holds for the mean:\n\n$$\n\\left\\|J_{s}^{m}\\right\\|_{2} \\leqslant 2 m \\beta\n$$\n\nTherefore,\n\n$$\n\\left\\|\\operatorname{softmax}(\\boldsymbol{x})-\\operatorname{softmax}\\left(\\boldsymbol{x}^{\\prime}\\right)\\right\\| \\leqslant\\left\\|J_{s}^{m}\\right\\|_{2}\\left\\|\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right\\| \\leqslant 2 m \\beta\\left\\|\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right\\|\n$$\n\nFrom Lemma A24 we know $m \\leqslant 1 / 4$ globally. For $p_{\\max }=\\min _{\\boldsymbol{x} \\in U} \\max _{i} p_{i}=1-\\epsilon$ we have according to Lemma A24: $m \\leqslant \\epsilon$. For completeness we present a result about cocoercivity of the softmax:\nLemma A26. For $m=\\max _{\\boldsymbol{x} \\in U} \\max _{i} p_{i}\\left(1-p_{i}\\right)$, softmax function $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is $1 /(2 m \\beta)$ cocoercive in $U$, that is,\n\n$$\n\\left(\\operatorname{softmax}(\\boldsymbol{x})-\\operatorname{softmax}\\left(\\boldsymbol{x}^{\\prime}\\right)\\right)^{T}\\left(\\boldsymbol{x}-\\boldsymbol{x}^{\\prime}\\right) \\geq \\frac{1}{2 m \\beta}\\left\\|\\operatorname{softmax}(\\boldsymbol{x})-\\operatorname{softmax}\\left(\\boldsymbol{x}^{\\prime}\\right)\\right\\|\n$$\n\nIn particular the softmax function $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is $(2 / \\beta)$-cocoercive everywhere. With $p_{\\max }=$ $\\min _{\\boldsymbol{x} \\in U} \\max _{i} p_{i}=1-\\epsilon$, the softmax function $\\boldsymbol{p}=\\operatorname{softmax}(\\beta \\boldsymbol{x})$ is $1 /(2 \\beta \\epsilon)$-cocoercive in $U$.",
    "hopfield-36": "Proof. We apply the Baillon-Haddad theorem (e.g. Theorem 1 in Gao \\& Pavel (2017)) together with Lemma A25. Finally, we introduce the Legendre transform and use it to describe further properties of the lse. We start with the definition of the convex conjugate. Definition A3 (Convex Conjugate). The Convex Conjugate (Legendre-Fenchel transform) of a function $f$ from a Hilbert Space $X$ to $[-\\infty, \\infty]$ is $f^{*}$ which is defined as\n\n$$\nf^{*}\\left(\\boldsymbol{x}^{*}\\right)=\\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{x})\\right), \\quad \\boldsymbol{x}^{*} \\in X\n$$\n\nSee page 219 Def. 13.1 in Bauschke \\& Combettes (2017) and page 134 in Garling (2017). Next we define the Legendre transform, which is a more restrictive version of the convex conjugate. Definition $A 4$ (Legendre Transform). The Legendre transform of a convex function from a convex set $X \\subset \\mathbb{R}^{n}$ to $\\mathbb{R}(f: X \\rightarrow \\mathbb{R})$ is $f^{*}$, which is defined as\n\n$$\n\\begin{aligned}\nf^{*}\\left(\\boldsymbol{x}^{*}\\right) & =\\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{x})\\right), \\quad \\boldsymbol{x}^{*} \\in X^{*} \\\\\nX^{*} & =\\left\\{\\boldsymbol{x}^{*} \\in \\mathbb{R}^{n} \\mid \\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{x})\\right)<\\infty\\right\\}\n\\end{aligned}\n$$\n\nSee page 91 in Boyd \\& Vandenberghe (2009). Definition A5 (Epi-Sum). Let $f$ and $g$ be two functions from $X$ to $(-\\infty, \\infty]$, then the infimal convolution (or epi-sum) of $f$ and $g$ is\n\n$$\nf \\square g: X \\rightarrow[-\\infty, \\infty], \\boldsymbol{x} \\mapsto \\inf _{\\boldsymbol{y} \\in X}(f(\\boldsymbol{y})+g(\\boldsymbol{x}-\\boldsymbol{y}))\n$$\n\nSee Def. 12.1 in Bauschke \\& Combettes (2017). Lemma A27. Let $f$ and $g$ be functions from $X$ to $(-\\infty, \\infty]$. Then the following hold:\n\n1. Convex Conjugate of norm squared\n\n$$\n\\left(\\frac{1}{2}\\|\\cdot\\|^{2}\\right)^{*}=\\frac{1}{2}\\|\\cdot\\|^{2}\n$$\n\n2. Convex Conjugate of a function multiplied by scalar $0<\\alpha \\in \\mathbb{R}$\n\n$$\n(\\alpha f)^{*}=\\alpha f^{*}(. / \\alpha)\n$$\n\n3. Convex Conjugate of the sum of a function and a scalar $\\beta \\in \\mathbb{R}$\n\n$$\n(f+\\beta)^{*}=f^{*}-\\beta\n$$\n\n4. Convex Conjugate of affine transformation of the arguments. Let $\\boldsymbol{A}$ be a non-singular matrix and $\\boldsymbol{b}$ a vector\n\n$$\n(f(\\boldsymbol{A} \\boldsymbol{x}+\\boldsymbol{b}))^{*}=f^{*}\\left(\\boldsymbol{A}^{-T} \\boldsymbol{x}^{*}\\right)-\\boldsymbol{b}^{T} \\boldsymbol{A}^{-T} \\boldsymbol{x}^{*}\n$$\n\n5. Convex Conjugate of epi-sums\n\n$$\n(f \\square g)^{*}=f^{*}+g^{*}\n$$\n\nProof. $\\quad$ 1. Since $h(t):=\\frac{t^{2}}{2}$ is a non-negative convex function and $h(t)=0 \\Longleftrightarrow t=$ 0 we have because of Proposition 11.3.3 in Garling (2017) that $h(\\|x\\|)^{*}=h^{*}\\left(\\left\\|x^{*}\\right\\|\\right)$. Additionally, by example (a) on page 137 we get for $1<p<\\infty$ and $\\frac{1}{p}+\\frac{1}{q}=1$ that $\\left(\\frac{|t|^{p}}{p}\\right)^{*}=\\frac{\\left|t^{*}\\right|^{q}}{q}$. Putting all together we get the desired result. The same result can also be deduced from page 222 Example 13.6 in Bauschke \\& Combettes (2017). 2. Follows immediately from the definition since\n\n$$\n\\alpha f^{*}\\left(\\frac{\\boldsymbol{x}^{*}}{\\alpha}\\right)=\\alpha \\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\frac{\\boldsymbol{x}^{*}}{\\alpha}-f(\\boldsymbol{x})\\right)=\\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-\\alpha f(\\boldsymbol{x})\\right)=(\\alpha f)^{*}\\left(\\boldsymbol{x}^{*}\\right)\n$$\n\n3. $(f+\\beta)^{*}:=\\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{x})-\\beta\\right)=: f^{*}-\\beta$\n4 . $$\n\\begin{aligned}\n(f(\\boldsymbol{A} \\boldsymbol{x}+\\boldsymbol{b}))^{*}\\left(\\boldsymbol{x}^{*}\\right) & =\\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{A} \\boldsymbol{x}+\\boldsymbol{b})\\right) \\\\\n& =\\sup _{\\boldsymbol{x} \\in X}\\left((\\boldsymbol{A} \\boldsymbol{x}+\\boldsymbol{b})^{T} \\boldsymbol{A}^{-T} \\boldsymbol{x}^{*}-f(\\boldsymbol{A} \\boldsymbol{x}+\\boldsymbol{b})\\right)-\\boldsymbol{b}^{T} \\boldsymbol{A}^{-T} \\boldsymbol{x}^{*} \\\\\n& =\\sup _{\\boldsymbol{y} \\in X}\\left(\\boldsymbol{y}^{T} \\boldsymbol{A}^{-T} \\boldsymbol{x}^{*}-f(\\boldsymbol{y})\\right)-\\boldsymbol{b}^{T} \\boldsymbol{A}^{-T} \\boldsymbol{x}^{*} \\\\\n& =f^{*}\\left(\\boldsymbol{A}^{-T} \\boldsymbol{x}^{*}\\right)-\\boldsymbol{b}^{T} \\boldsymbol{A}^{-T} \\boldsymbol{x}^{*}\n\\end{aligned}\n$$\n\n5. From Proposition 13.24 (i) in Bauschke \\& Combettes (2017) and Proposition 11.4.2 in Garling (2017) we get\n\n$$\n\\begin{aligned}\n(f \\square g)^{*}\\left(\\boldsymbol{x}^{*}\\right) & =\\sup _{\\boldsymbol{x} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-\\inf _{\\boldsymbol{y} \\in X}(f(\\boldsymbol{y})-g(\\boldsymbol{x}-\\boldsymbol{y}))\\right) \\\\\n& =\\sup _{\\boldsymbol{x}, \\boldsymbol{y} \\in X}\\left(\\boldsymbol{x}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{y})-g(\\boldsymbol{x}-\\boldsymbol{y})\\right) \\\\\n& =\\sup _{\\boldsymbol{x}, \\boldsymbol{y} \\in X}\\left(\\left(\\boldsymbol{y}^{T} \\boldsymbol{x}^{*}-f(\\boldsymbol{y})\\right)+\\left((\\boldsymbol{x}-\\boldsymbol{y})^{T} \\boldsymbol{x}^{*}-g(\\boldsymbol{x}-\\boldsymbol{y})\\right)\\right) \\\\\n& =f^{*}\\left(\\boldsymbol{x}^{*}\\right)+g^{*}\\left(\\boldsymbol{x}^{*}\\right)\n\\end{aligned}\n$$\n\nLemma A28. The Legendre transform of the lse is the negative entropy function, restricted to the probability simplex and vice versa. For the log-sum exponential\n\n$$\nf(\\boldsymbol{x})=\\ln \\left(\\sum_{i=1}^{n} \\exp \\left(x_{i}\\right)\\right)\n$$\n\nthe Legendre transform is the negative entropy function, restricted to the probability simplex:\n\n$$\nf^{*}\\left(\\boldsymbol{x}^{*}\\right)= \\begin{cases}\\sum_{i=1}^{n} x_{i}^{*} \\ln \\left(x_{i}^{*}\\right) & \\text { for } 0 \\leqslant x_{i}^{*} \\text { and } \\sum_{i=1}^{n} x_{i}^{*}=1 \\\\ \\infty & \\text { otherwise }\\end{cases}\n$$\n\nFor the negative entropy function, restricted to the probability simplex:\n\n$$\nf(\\boldsymbol{x})= \\begin{cases}\\sum_{i=1}^{n} x_{i} \\ln \\left(x_{i}\\right) & \\text { for } 0 \\leqslant x_{i} \\text { and } \\sum_{i=1}^{n} x_{i}=1 \\\\ \\infty & \\text { otherwise }\\end{cases}\n$$\n\nthe Legendre transform is the log-sum exponential\n\n$$\nf^{*}\\left(\\boldsymbol{x}^{*}\\right)=\\ln \\left(\\sum_{i=1}^{n} \\exp \\left(x_{i}^{*}\\right)\\right)\n$$\n\nProof. See page 93 Example 3.25 in Boyd \\& Vandenberghe (2009) and (Gao \\& Pavel, 2017). If $f$ is a regular convex function (lower semi-continuous convex function), then $f^{* *}=f$ according to page 135 Exercise 11.2.3 in Garling (2017). If $f$ is lower semi-continuous and convex, then $f^{* *}=f$ according to Theorem 13.37 (Fenchel-Moreau) in Bauschke \\& Combettes (2017). The log-sum-exponential is continuous and convex.",
    "hopfield-37": "Lemma A29. Let $\\boldsymbol{X} \\boldsymbol{X}^{T}$ be non-singular and $X$ a Hilbert space. We define\n\n$$\nX^{*}=\\left\\{\\boldsymbol{a} \\mid 0 \\leqslant \\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{a}, \\mathbf{1}^{T} \\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{a}=1\\right\\}\n$$\n\nand\n\n$$\nX^{v}=\\left\\{\\boldsymbol{a} \\mid \\boldsymbol{a}=\\boldsymbol{X}^{T} \\boldsymbol{\\xi}, \\boldsymbol{\\xi} \\in X\\right\\}\n$$\n\nThe Legendre transform of $1 \\operatorname{se}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$ with $\\boldsymbol{\\xi} \\in X$ is\n\n$$\n\\left(\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)^{*}\\left(\\boldsymbol{\\xi}^{*}\\right)=(\\operatorname{lse}(\\beta, \\boldsymbol{v}))^{*}\\left(\\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}\\right)\n$$\n\nwith $\\boldsymbol{\\xi}^{*} \\in X^{*}$ and $\\boldsymbol{v} \\in X^{v}$. The domain of $\\left(\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)^{*}$ is $X^{*}$. Furthermore we have\n\n$$\n\\left(\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)^{* *}=\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nProof. We use the definition of the Legendre transform:\n\n$$\n\\begin{aligned}\n& \\left(\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)^{*}\\left(\\boldsymbol{\\xi}^{*}\\right)=\\sup _{\\boldsymbol{\\xi} \\in X} \\boldsymbol{\\xi}^{T} \\boldsymbol{\\xi}^{*}-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right) \\\\\n& =\\sup _{\\boldsymbol{\\xi} \\in X}\\left(\\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)^{T} \\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}-\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right) \\\\\n& =\\sup _{\\boldsymbol{v} \\in X^{v}} \\boldsymbol{v}^{T} \\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}-\\operatorname{lse}(\\beta, \\boldsymbol{v}) \\\\\n& =\\sup _{\\boldsymbol{v} \\in X^{v}} \\boldsymbol{v}^{T} \\boldsymbol{v}^{*}-\\operatorname{lse}(\\beta, \\boldsymbol{v}) \\\\\n& =(\\operatorname{lse}(\\beta, \\boldsymbol{v}))^{*}\\left(\\boldsymbol{v}^{*}\\right)=(\\operatorname{lse}(\\beta, \\boldsymbol{v}))^{*}\\left(\\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}\\right)\n\\end{aligned}\n$$\n\nwhere we used $\\boldsymbol{v}^{*}=\\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}$. According to page 93 Example 3.25 in Boyd \\& Vandenberghe (2009), the equations for the maximum $\\max _{\\boldsymbol{v} \\in X^{v}} \\boldsymbol{v}^{T} \\boldsymbol{v}^{*}-\\operatorname{lse}(\\beta, \\boldsymbol{v})$ are solvable if and only if $0<\\boldsymbol{v}^{*}=\\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}$ and $\\mathbf{1}^{T} \\boldsymbol{v}^{*}=$ $\\mathbf{1}^{T} \\boldsymbol{X}^{T}\\left(\\boldsymbol{X} \\boldsymbol{X}^{T}\\right)^{-1} \\boldsymbol{\\xi}^{*}=1$. Therefore, we assumed $\\boldsymbol{\\xi}^{*} \\in X^{*}$. The domain of $\\left(\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)^{*}$ is $X^{*}$, since on page 93 Example 3.25 in Boyd \\& Vandenberghe (2009) it was shown that outside $X^{*}$ the $\\sup _{\\boldsymbol{v} \\in X^{v}} \\boldsymbol{v}^{T} \\boldsymbol{v}^{*}-\\operatorname{lse}(\\beta, \\boldsymbol{v})$ is not bounded. Using\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nthe Hessian of lse $\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$\n\n$$\n\\frac{\\partial^{2} \\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)}{\\partial \\boldsymbol{\\xi}^{2}}=\\beta \\boldsymbol{X}\\left(\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p p}^{T}\\right) \\boldsymbol{X}^{T}\n$$\n\nis positive semi-definite since $\\operatorname{diag}(\\boldsymbol{p})-\\boldsymbol{p} \\boldsymbol{p}^{T}$ is positive semi-definite according to Lemma A22. Therefore, lse $\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)$ is convex and continuous. If $f$ is a regular convex function (lower semi-continuous convex function), then $f^{* *}=f$ according to page 135 Exercise 11.2.3 in Garling (2017). If $f$ is lower semi-continuous and convex, then $f^{* *}=f$ according to Theorem 13.37 (Fenchel-Moreau) in Bauschke \\& Combettes (2017). Consequently we have\n\n$$\n\\left(\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\\right)^{* *}=\\operatorname{lse}\\left(\\beta, \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nWe introduce the Lambert $W$ function and some of its properties, since it is needed to derive bounds on the storage capacity of our new Hopfield networks. Definition A6 (Lambert Function). The Lambert $W$ function (Olver et al., 2010, (4.13)) is the inverse function of\n\n$$\nf(y)=y e^{y}\n$$\n\nThe Lambert $W$ function has an upper branch $W_{0}$ for $-1 \\leqslant y$ and a lower branch $W_{-1}$ for $y \\leqslant-1$. We use $W$ if a formula holds for both branches. We have\n\n$$\nW(x)=y \\Rightarrow y e^{y}=x\n$$\n\nWe present some identities for the Lambert $W$ function (Olver et al., 2010, (4.13)):\nLemma A30. Identities for the Lambert $W$ function are\n\n$$\n\\begin{aligned}\nW(x) e^{W(x)} & =x \\\\\nW\\left(x e^{x}\\right) & =x \\\\\ne^{W(x)} & =\\frac{x}{W(x)}, \\\\\ne^{-W(x)} & =\\frac{W(x)}{x}, \\\\\ne^{n W(x)} & =\\left(\\frac{x}{W(x)}\\right)^{n} \\\\\nW_{0}(x \\ln x) & =\\ln x \\quad \\text { for } x \\geq \\frac{1}{e} \\\\\nW_{-1}(x \\ln x) & =\\ln x \\quad \\text { for } x \\leqslant \\frac{1}{e} \\\\\nW(x) & =\\ln \\frac{x}{W(x)} \\quad \\text { for } x \\geq-\\frac{1}{e} \\\\\n\\left.\\frac{n x^{n}}{W(x)^{n-1}}\\right) & =n W(x) \\quad \\text { for } n, x>0 \\\\\nW(x)+W(y) & =W\\left(x y\\left(\\frac{1}{W(x)}+\\frac{1}{W(y)}\\right)\\right) \\quad \\text { for } x, y>0 \\\\\nW_{0}\\left(-\\frac{\\ln x}{x}\\right) & =-\\ln x \\quad \\text { for } 0<x \\leqslant e \\\\\nW & \\\\\nW_{-1}\\left(-\\frac{\\ln x}{x}\\right) & =-\\ln x \\quad \\text { for } x>e \\\\\ne^{-W(-\\ln x)} & =\\frac{W(-\\ln x)}{-\\ln x} \\quad \\text { for } x \\neq 1\n\\end{aligned}\n$$\n\nWe also present some special values for the Lambert $W$ function (Olver et al., 2010, (4.13)):\n\n## Lemma A31. $$\n\\begin{aligned}\nW(0) & =0 \\\\\nW(e) & =1 \\\\\nW\\left(-\\frac{1}{e}\\right) & =-1 \\\\\nW\\left(e^{1+e}\\right) & =e \\\\\nW(2 \\ln 2) & =\\ln 2 \\\\\nW(1) & =\\Omega \\\\\nW(1) & =e^{-W(1)}=\\ln \\left(\\frac{1}{W(1)}\\right)=-\\ln W(1) \\\\\nW\\left(-\\frac{\\pi}{2}\\right) & =\\frac{i \\pi}{2} \\\\\nW(-1) & \\approx-0.31813+1.33723 i\n\\end{aligned}\n$$\n\nwhere the Omega constant $\\Omega$ is\n\n$$\n\\Omega=\\left(\\int_{-\\infty}^{\\infty} \\frac{\\mathrm{d} t}{\\left(e^{t}-t\\right)^{2}+\\pi^{2}}\\right)^{-1}-1 \\approx 0.56714329\n$$\n\nWe need in some proofs a version of the mean value theorem as given in the next lemma.",
    "hopfield-38": "Lemma A32 (Mean Value Theorem). Let $U \\subset \\mathbb{R}^{n}$ be open, $f: U \\rightarrow \\mathbb{R}^{m}$ continuously differentiable, and $\\boldsymbol{x} \\in U$ as well as $\\boldsymbol{h} \\in \\mathbb{R}^{n}$ vectors such that the line segment $\\boldsymbol{x}+t \\boldsymbol{h}$ for $0 \\leqslant t \\leqslant 1$ is in $U$. Then the following holds:\n\n$$\nf(\\boldsymbol{x}+\\boldsymbol{h})-f(\\boldsymbol{x})=\\left(\\int_{0}^{1} J(\\boldsymbol{x}+t \\boldsymbol{h}) \\mathrm{d} t\\right) \\boldsymbol{h}\n$$\n\nwhere $J$ is the Jacobian of $f$ and the integral of the matrix is component-wise. Proof. Let $f_{1}, \\ldots, f_{m}$ denote the components of $f$ and define $g_{i}:[0,1] \\rightarrow \\mathbb{R}$ by\n\n$$\ng_{i}(t)=f_{i}(\\boldsymbol{x}+t \\boldsymbol{h})\n$$\n\nthen we obtain\n\n$$\n\\begin{aligned}\n& f_{i}(\\boldsymbol{x}+\\boldsymbol{h})-f_{i}(\\boldsymbol{x})=g_{i}(1)-g_{i}(0)=\\int_{0}^{1} g^{\\prime}(t) \\mathrm{d} t \\\\\n& \\int_{0}^{1}\\left(\\sum_{j=1}^{n} \\frac{\\partial f_{i}}{\\partial x_{j}}(\\boldsymbol{x}+t \\boldsymbol{h}) h_{j}\\right) \\mathrm{d} t=\\sum_{j=1}^{n}\\left(\\int_{0}^{1} \\frac{\\partial f_{i}}{\\partial x_{j}}(\\boldsymbol{x}+t \\boldsymbol{h}) \\mathrm{d} t\\right) h_{j}\n\\end{aligned}\n$$\n\nThe statement follows since the Jacobian $J$ has as entries $\\frac{\\partial f_{i}}{\\partial x_{j}}$. ## A. 3 Modern Hopfield Networks: Binary States (Krotov and Hopfield)\n\n## A.3.1 MODERn HopfiEld NETWORKS: InTrODUCTION\n\nA.3.1.1 Additional Memory and Attention for Neural Networks. Modern Hopfield networks may serve as additional memory for neural networks. Different approaches have been suggested to equip neural networks with an additional memory beyond recurrent connections. The neural Turing machine (NTM) is a neural network equipped with an external memory and an attention process (Graves et al., 2014). The NTM can write to the memory and can read from it. A memory network (Weston et al., 2014) consists of a memory together with the components: (1) input feature map (converts the incoming input to the internal feature representation) (2) generalization (updates old memories given the new input), (3) output feature map (produces a new output), (4) response\n(converts the output into the response format). Memory networks are generalized to an end-to-end trained model, where the arg max memory call is replaced by a differentiable softmax (Sukhbaatar et al., 2015a;b). Linear Memory Network use a linear autoencoder for sequences as a memory (Carta et al., 2020). To enhance RNNs with additional associative memory like Hopfield networks have been proposed (Ba et al., 2016a;b). The associative memory stores hidden states of the RNN, retrieves stored states if they are similar to actual ones, and has a forgetting parameter. The forgetting and storing parameters of the RNN associative memory have been generalized to learned matrices (Zhang \\& Zhou, 2017). LSTMs with associative memory via Holographic Reduced Representations have been proposed (Danihelka et al., 2016). Recently most approaches to new memories are based on attention. The neural Turing machine (NTM) is equipped with an external memory and an attention process (Graves et al., 2014). End to end memory networks (EMN) make the attention scheme of memory networks (Weston et al., 2014) differentiable by replacing arg max through a softmax (Sukhbaatar et al., 2015a;b). EMN with dot products became very popular and implement a key-value attention (Daniluk et al., 2017) for self-attention. An enhancement of EMN is the transformer (Vaswani et al., 2017a;b) and its extensions (Dehghani et al., 2018). The transformer had great impact on the natural language processing (NLP) community as new records in NLP benchmarks have been achieved (Vaswani et al., 2017a;b). MEMO uses the transformer attention mechanism for reasoning over longer distances (Banino et al., 2020). Current state-of-the-art for language processing is a transformer architecture called \"the Bidirectional Encoder Representations from Transformers\" (BERT) (Devlin et al., 2018; 2019). A.3.1.2 Modern Hopfield networks: Overview. The storage capacity of classical binary Hopfield networks (Hopfield, 1982) has been shown to be very limited. In a $d$-dimensional space, the standard Hopfield model can store $d$ uncorrelated patterns without errors but only $C d / \\ln (d)$ random patterns with $C<1 / 2$ for a fixed stable pattern or $C<1 / 4$ if all patterns are stable (McEliece et al., 1987). The same bound holds for nonlinear learning rules (Mazza, 1997). Using tricks-of-trade and allowing small retrieval errors, the storage capacity is about $0.138 d$ (Crisanti et al., 1986; Hertz et al., 1991; Torres et al., 2002). If the learning rule is not related to the Hebb rule then up to $d$ patterns can be stored (Abu-Mostafa \\& StJacques, 1985). Using Hopfield networks with non-zero diagonal matrices, the storage can be increased to $C d \\ln (d)$ (Folli et al., 2017). In contrast to the storage capacity, the number of energy minima (spurious states, stable states) of Hopfield networks is exponentially in $d$ (Tanaka \\& Edwards, 1980; Bruck \\& Roychowdhury, 1990; Wainrib \\& Touboul, 2013). Recent advances in the field of binary Hopfield networks (Hopfield, 1982) led to new properties of Hopfield networks. The stability of spurious states or metastable states was sensibly reduced by a Hamiltonian treatment for the new relativistic Hopfield model (Barra et al., 2018). Recently the storage capacity of Hopfield networks could be increased by new energy functions. Interaction functions of the form $F(x)=x^{n}$ lead to storage capacity of $\\alpha_{n} d^{n-1}$, where $\\alpha_{n}$ depends on the allowed error probability (Krotov \\& Hopfield, 2016; 2018; Demircigil et al., 2017) (see (Krotov \\& Hopfield, 2018) for the non-binary case). Interaction functions of the form $F(x)=x^{n}$ lead to storage capacity of $\\alpha_{n} \\frac{d^{n-1}}{c_{n} \\ln d}$ for $c_{n}>2(2 n-3)$ !! (Demircigil et al., 2017). Interaction functions of the form $F(x)=\\exp (x)$ lead to exponential storage capacity of $2^{d / 2}$ where all stored patterns are fixed points but the radius of attraction vanishes (Demircigil et al., 2017). It has been shown that the network converges with high probability after one update (Demircigil et al., 2017). ## A.3.2 Energy and Update Rule for Binary Modern Hopfield Networks\n\nWe follow (Demircigil et al., 2017) where the goal is to store a set of input data $\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}$ that are represented by the matrix\n\n$$\n\\boldsymbol{X}=\\left(\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}\\right)\n$$\n\nThe $\\boldsymbol{x}_{i}$ is pattern with binary components $x_{i j} \\in\\{-1,+1\\}$ for all $i$ and $j . \\boldsymbol{\\xi}$ is the actual state of the units of the Hopfield model. Krotov and Hopfield (Krotov \\& Hopfield, 2016) defined the energy function E with the interaction function $F$ that evaluates the dot product between patterns $\\boldsymbol{x}_{i}$ and the\nactual state $\\boldsymbol{\\xi}$ :\n\n$$\n\\mathrm{E}=-\\sum_{i=1}^{N} F\\left(\\boldsymbol{\\xi}^{T} \\boldsymbol{x}_{i}\\right)\n$$\n\nwith $F(a)=a^{n}$, where $n=2$ gives the energy function of the classical Hopfield network. This allows to store $\\alpha_{n} d^{n-1}$ patterns (Krotov \\& Hopfield, 2016). Krotov and Hopfield (Krotov \\& Hopfield, 2016) suggested for minimizing this energy an asynchronous updating dynamics $T=\\left(T_{j}\\right)$ for component $\\xi_{j}:$\n\n$$\nT_{j}(\\boldsymbol{\\xi}):=\\operatorname{sgn}\\left[\\sum_{i=1}^{N}\\left(F\\left(x_{i j}+\\sum_{l \\neq j} x_{i l} \\xi_{l}\\right)-F\\left(-x_{i j}+\\sum_{l \\neq j} x_{i l} \\xi_{l}\\right)\\right)\\right]\n$$\n\nWhile Krotov and Hopfield used $F(a)=a^{n}$, Demircigil et al. (Demircigil et al., 2017) went a step further and analyzed the model with the energy function $F(a)=\\exp (a)$, which leads to an exponential storage capacity of $N=2^{d / 2}$. Furthermore with a single update the final pattern is recovered with high probability. These statements are given in next theorem. Theorem A10 (Storage Capacity for Binary Modern Hopfield Nets (Demircigil et al. 2017)). Consider the generalized Hopfield model with the dynamics described in Eq. (545) and interaction function $F$ given by $F(x)=e^{x}$. For a fixed $0<\\alpha<\\ln (2) / 2$ let $N=\\exp (\\alpha d)+1$ and let $\\boldsymbol{x}_{1}, \\ldots, \\boldsymbol{x}_{N}$ be $N$ patterns chosen uniformly at random from $\\{-1,+1\\}^{d}$. Moreover fix $\\varrho \\in[0,1 / 2)$. For any $i$ and any $\\widetilde{\\boldsymbol{x}}_{i}$ taken uniformly at random from the Hamming sphere with radius $\\varrho d$ centered in $\\boldsymbol{x}_{i}, \\mathcal{S}\\left(\\boldsymbol{x}_{i}, \\varrho d\\right)$, where @d is assumed to be an integer, it holds that\n\n$$\n\\operatorname{Pr}\\left(\\exists i \\exists j: T_{j}\\left(\\widetilde{\\boldsymbol{x}}_{i}\\right) \\neq x_{i j}\\right) \\rightarrow 0\n$$\n\nif $\\alpha$ is chosen in dependence of $\\varrho$ such that\n\n$$\n\\alpha<\\frac{I(1-2 \\varrho)}{2}\n$$\n\nwith\n\n$$\nI: a \\mapsto \\frac{1}{2}((1+a) \\ln (1+a)+(1-a) \\ln (1-a))\n$$\n\nProof.",
    "hopfield-39": "The proof can be found in Demircigil et al. (2017). The number of patterns $N=\\exp (\\alpha d)+1$ is exponential in the number $d$ of components. The result\n\n$$\n\\operatorname{Pr}\\left(\\exists i \\exists j: T_{j}\\left(\\widetilde{\\boldsymbol{x}}_{i}\\right) \\neq x_{i j}\\right) \\rightarrow 0\n$$\n\nmeans that one update for each component is sufficient to recover the pattern with high probability. The constraint $\\alpha<\\frac{I(1-2 \\varrho)}{2}$ on $\\alpha$ gives the trade-off between the radius of attraction $\\varrho d$ and the number $N=\\exp (\\alpha d)+1$ of pattern that can be stored. Theorem A10 in particular implies that\n\n$$\n\\operatorname{Pr}\\left(\\exists i \\exists j: T_{j}\\left(\\boldsymbol{x}_{i}\\right) \\neq x_{i j}\\right) \\rightarrow 0\n$$\n\nas $d \\rightarrow \\infty$, i.e. with a probability converging to 1 , all the patterns are fixed points of the dynamics. In this case we can have $\\alpha \\rightarrow \\frac{I(1)}{2}=\\ln (2) / 2$. Krotov and Hopfield define the update dynamics $T_{j}(\\boldsymbol{\\xi})$ in Eq.",
    "hopfield-40": "(545) via energy differences of the energy in Eq. (544). First we express the energy in Eq. (544) with $F(a)=\\exp (a)$ (Demircigil et al., 2017) by the lse function. Then we use the mean value theorem to express the update dynamics $T_{j}(\\boldsymbol{\\xi})$ in Eq. (545) by the softmax function. For simplicity, we set $\\beta=1$ in the following. There exists a $v \\in[-1,1]$ with\n\n$$\n\\begin{aligned}\nT_{j}(\\boldsymbol{\\xi}) & =\\operatorname{sgn}\\left[-\\mathrm{E}\\left(\\xi_{j}=1\\right)+\\mathrm{E}\\left(\\xi_{j}=-1\\right)\\right]=\\operatorname{sgn}\\left[\\exp \\left(\\operatorname{lse}\\left(\\xi_{j}=1\\right)\\right)-\\exp \\left(\\operatorname{lse}\\left(\\xi_{j}=-1\\right)\\right)\\right] \\\\\n& =\\operatorname{sgn}\\left[-\\left(2 \\boldsymbol{e}_{j}\\right)^{T} \\nabla_{\\boldsymbol{\\xi}} \\mathrm{E}\\left(\\xi_{j}=v\\right)\\right]=\\operatorname{sgn}\\left[\\exp \\left(\\operatorname{lse}\\left(\\xi_{j}=v\\right)\\right)\\left(2 \\boldsymbol{e}_{j}\\right)^{T} \\frac{\\operatorname{lse}\\left(\\xi_{j}=v\\right)}{\\partial \\boldsymbol{\\xi}}\\right] \\\\\n& =\\operatorname{sgn}\\left[\\exp \\left(\\operatorname{lse}\\left(\\xi_{j}=1\\right)\\right)\\left(2 \\boldsymbol{e}_{j}\\right)^{T} \\boldsymbol{X}_{\\operatorname{softmax}}\\left(\\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\left(\\xi_{j}=v\\right)\\right)\\right] \\\\\n& =\\operatorname{sgn}\\left[\\left[\\boldsymbol{X}_{\\operatorname{softmax}}\\left(\\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\left(\\xi_{j}=v\\right)\\right)\\right]_{j}\\right]=\\operatorname{sgn}\\left[\\left[\\boldsymbol{X} \\boldsymbol{p}\\left(\\xi_{j}=v\\right)\\right]_{j}\\right]\n\\end{aligned}\n$$\n\nwhere $\\boldsymbol{e}_{j}$ is the Cartesian unit vector with a one at position $j$ and zeros elsewhere, $[.]_{j}$ is the projection to the $j$-th component, and\n\n$$\n\\boldsymbol{p}=\\operatorname{softmax}\\left(\\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\n## A. 4 Hopfield Update Rule is Attention of The Transformer\n\nThe Hopfield network update rule is the attention mechanism used in transformer and BERT models (see Fig.",
    "hopfield-41": "A.2). To see this, we assume $N$ stored (key) patterns $\\boldsymbol{y}_{i}$ and $S$ state (query) patterns $\\boldsymbol{r}_{i}$ that are mapped to the Hopfield space of dimension $d_{k}$. We set $\\boldsymbol{x}_{i}=\\boldsymbol{W}_{K}^{T} \\boldsymbol{y}_{i}, \\boldsymbol{\\xi}_{i}=\\boldsymbol{W}_{Q}^{T} \\boldsymbol{r}_{i}$, and multiply the result of our update rule with $\\boldsymbol{W}_{V}$. The matrices $\\boldsymbol{Y}=\\left(\\boldsymbol{y}_{1}, \\ldots, \\boldsymbol{y}_{N}\\right)^{T}$ and $\\boldsymbol{R}=\\left(\\boldsymbol{r}_{1}, \\ldots, \\boldsymbol{r}_{S}\\right)^{T}$ combine the $\\boldsymbol{y}_{i}$ and $\\boldsymbol{r}_{i}$ as row vectors. We define the matrices $\\boldsymbol{X}^{T}=\\boldsymbol{K}=\\boldsymbol{Y} \\boldsymbol{W}_{K}, \\boldsymbol{\\Xi}^{T}=\\boldsymbol{Q}=$ $\\boldsymbol{R} \\boldsymbol{W}_{Q}$, and $\\boldsymbol{V}=\\boldsymbol{Y} \\boldsymbol{W}_{K} \\boldsymbol{W}_{V}=\\boldsymbol{X}^{T} \\boldsymbol{W}_{V}$, where $\\boldsymbol{W}_{K} \\in \\mathbb{R}^{d_{y} \\times d_{k}}, \\boldsymbol{W}_{Q} \\in \\mathbb{R}^{d_{r} \\times d_{k}}, \\boldsymbol{W}_{V} \\in \\mathbb{R}^{d_{k} \\times d_{v}}$. If $\\beta=1 / \\sqrt{d_{k}}$ and softmax $\\in \\mathbb{R}^{N}$ is changed to a row vector, we obtain for the update rule Eq. (3) multiplied by $\\boldsymbol{W}_{V}$ :\n\n$$\n\\operatorname{softmax}\\left(1 / \\sqrt{d_{k}} \\boldsymbol{Q} \\boldsymbol{K}^{T}\\right) \\boldsymbol{V}=\\operatorname{softmax}\\left(\\beta \\boldsymbol{R} \\boldsymbol{W}_{\\boldsymbol{Q}} \\boldsymbol{W}_{\\boldsymbol{K}}^{T} \\boldsymbol{Y}^{T}\\right) \\boldsymbol{Y} \\boldsymbol{W}_{\\boldsymbol{K}} \\boldsymbol{W}_{\\boldsymbol{V}}\n$$\n\nThe left part of Eq. (548) is the transformer attention. Besides the attention mechanism, Hopfield networks allow for other functionalities in deep network architectures, which we introduce via specific layers in the next section. The right part of Eq. (548) serves as starting point for these specific layers. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-73.jpg?height=201&width=1389&top_left_y=1301&top_left_x=368)\n\nFigure A.2: We generalized the energy of binary modern Hopfield networks for allowing continuous states while keeping fast convergence and storage capacity properties. We defined for the new energy also a new update rule that minimizes the energy. The new update rule is the attention mechanism of the transformer. Formulae are modified to express softmax as row vector as for transformers. \"=\"-sign means \"keeps the properties\". ## A. 5 EXPERIMENTS\n\n## A.5.1 ExperimEnt 1: Attention in Transformers DEScribed by Hopfield DYnAmics\n\nA.5.1.1 Analysis of operating modes of the heads of a pre-trained BERT model. We analyzed pre-trained BERT models from Hugging Face Inc.",
    "hopfield-42": "(Wolf et al., 2019) according to these operating classes. In Fig. A. 3 in the appendix the distribution of the pre-trained bert-base-cased model is depicted (for other models see appendix Section A.5.1.4). Operating classes (II) (large metastable states) and (IV) (small metastable states) are often observed in the middle layers. Operating class (I) (averaging over a very large number of patterns) is abundant in lower layers. Similar observations have been reported in other studies (Toneva \\& Wehbe, 2019a;b; Tay et al., 2020). Operating class (III) (medium metastable states) is predominant in the last layers. A.5.1.2 Experimental Setup. Transformer architectures are known for their high computational demands. To investigate the learning dynamics of such a model and at the same time keeping training time manageable, we adopted the BERT-small setting from ELECTRA (Clark et al., 2020). It has 12 layers, 4 heads and a reduced hidden size, the sequence length is shortened from 512 to 128 tokens and the batch size is reduced from 256 to 128. Additionally, the hidden dimension is reduced from 768 to 256 and the embedding dimension is reduced from 768 to 128 (Clark et al., 2020). The training of such a BERT-small model for 1.45 million update steps takes roughly four days on a single NVIDIA V100 GPU. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-74.jpg?height=1392&width=1394&top_left_y=464&top_left_x=363)\n\nFigure A.3: Analysis of operating modes of the heads of a pre-trained BERT model. For each head in each layer, the distribution of the minimal number $k$ of patterns required to sum up the softmax values to 0.90 is displayed as a violin plot in a panel. $k$ indicates the size of a metastable state. The bold number in the center of each panel gives the median $\\bar{k}$ of the distribution. The heads in each layer are sorted according to $\\bar{k}$. Attention heads belong to the class they mainly operate in. Class (IV) in blue: Small metastable state or fixed point close to a single pattern, which is abundant in the middle layers ( 6,7 , and 8 ). Class (II) in orange: Large metastable state, which is prominent in middle layers (3, 4, and 5). Class (I) in red: Very large metastable state or global fixed point, which is predominant in the first layer. These heads can potentially be replaced by averaging operations. Class (III) in green: Medium metastable state, which is frequently observed in higher layers. We hypothesize that these heads are used to collect information required to perform the respective task. These heads should be the main target to improve transformer and BERT models. As the code base we use the transformers repository from Hugging Face, Inc (Wolf et al., 2019). We aim to reproduce the dataset of Devlin et al. (2019) as close as possible, which consists of the English Wikipedia dataset and the Toronto BookCorpus dataset (Zhu et al., 2015). Due to recent copyright claims the later is not publicly available anymore. Therefore, the pre-training experiments use an uncased snapshot of the original BookCorpus dataset. A.5.1.3 Hopfield Operating Classes of Transformer and BERT Models. To better understand how operation modes in attention heads develop, we tracked the distribution of counts $k$ (see main paper) over time in a BERT-small model. At the end of training we visualized the count distribution, grouped into four classes (see Figure A.4). The thresholds for the classes were chosen according to the thresholds of Figure 2 in the main paper. However, they are divided by a factor of 4 to adapt to the shorter sequence length of 128 compared to 512 . From this plot it is clear, that the attention in heads of Class IV commit very early to the operating class of small metastable states. A.5.1.4 Learning Dynamics of Transformer and BERT Models. To observe this behavior in the early phase of training, we created a ridge plot of the distributions of counts $k$ for the first 20,000 steps (see Figure A. 5 (a)). This plot shows that the attention in heads of middle layers often change the operation mode to Class IV around 9,000 to 10,000 steps. At the same time the second big drop in the loss occurs. The question arises whether this is functionally important or whether it is an artefact which could be even harmful. To check if the attention mechanism is still able to learn after the change in the operation mode we analyzed the gradient flow through the softmax function. For every token we calculate the Frobenius norm of the Jacobian of the softmax over multiple samples. Then, for every head we plot the distribution of the norm (see Figure A.5(b)). The gradients with respect to the weights are determined by the Jacobian J defined in Eq. (59) as can be seen in Eq. (418), Eq. (429), and Eq. (435). We can see that the attention in heads of Class IV remain almost unchanged during the rest of the training. A.5.1.5 Attention Heads Replaced by Gaussian Averaging Layers. The self-attention mechanism proposed in Vaswani et al. (2017a) utilizes the softmax function to compute the coefficients of a convex combination over the embedded tokens, where the softmax is conditioned on the input. However, our analysis showed that especially in lower layers many heads perform averaging over a very large number of patterns. This suggests that at this level neither the dependency on the input nor a fine grained attention to individual positions is necessary. As an alternative to the original mechanism we propose Gaussian averaging heads which are computationally more efficient. Here, the softmax function is replaced by a discrete Gaussian kernel, where the location $\\mu$ and the scale $\\sigma$ are learned. In detail, for a sequence length of $N$ tokens we are given a vector of location parameters $\\boldsymbol{\\mu}=\\left(\\mu_{1}, \\ldots, \\mu_{N}\\right)^{T}$ and a vector of corresponding scale parameters $\\boldsymbol{\\sigma}=\\left(\\sigma_{1}, \\ldots, \\sigma_{N}\\right)^{T}$. We subdivide the interval $[-1,1]$ into $N$ equidistant supporting points $\\left\\{s_{j}\\right\\}_{j=1}^{N}$, where\n\n$$\ns_{j}=\\frac{(j-1)-0.5(N-1)}{0.5(N-1)}\n$$\n\nThe attention $[A]_{i, j}$ from the $i$-th token to the $j$-th position is calculated as\n\n$$\n[A]_{i, j}=\\frac{1}{z_{i}} \\exp \\left\\{-\\frac{1}{2}\\left(\\frac{s_{j}-\\mu_{i}}{\\sigma_{i}}\\right)^{2}\\right\\}\n$$\n\nwhere $z_{i}$ normalizes the $i$-th row of the attention matrix $A$ to sum up to one:\n\n$$\nz_{i}=\\sum_{j=1}^{N} \\exp \\left\\{-\\frac{1}{2}\\left(\\frac{s_{j}-\\mu_{i}}{\\sigma_{i}}\\right)^{2}\\right\\}\n$$\n\nFor initialization we uniformly sample a location vector $\\boldsymbol{\\mu} \\in[-1,1]^{N}$ and a scale vector $\\boldsymbol{\\sigma} \\in$ $[0.75,1.25]^{N}$ per head. A simple way to consider the individual position of each token at initialization is to use the supporting points $\\mu_{i}=s_{i}$ (see Figure A.6).",
    "hopfield-43": "In practice no difference to the random initialization was observed. -Number of parameters. Gaussian averaging heads can reduce the number of parameters significantly. For an input size of $N$ tokens, there are $2 \\cdot N$ parameters per head. In contrast, a standard self-attention head with word embedding dimension $d_{y}$ and projection dimension $d_{k}$ has two weight matrices\n\n![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-76.jpg?height=1651&width=1251&top_left_y=508&top_left_x=426)\n\nFigure A.4: Left: Ridge plots of the distribution of counts $k$ over time for BERT-small Right: Violin plot of counts $k$ after 1, 450000 steps, divided into the four classes from the main paper. The thresholds were adapted to the shorter sequence length. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-77.jpg?height=1604&width=1313&top_left_y=509&top_left_x=410)\n\nFigure A.5: (a): change of count density during training is depicted for the first 20,000 steps. (b): the corresponding distribution of the Frobenius norm of the Jacobian of the softmax function is depicted. The gradients with respect to the weights are determined by the Jacobian J defined in Eq. (59) as can be seen in Eq. (418), Eq. (429), and Eq. (435). $W_{Q}, W_{K} \\in \\mathbb{R}^{d_{k} \\times d_{y}}$, which together amount to $2 \\cdot d_{k} \\cdot d_{y}$ parameters. As a concrete example, the BERT-base model from Devlin et al. (2019) has an embedding dimension $d_{y}=768$, a projection dimension $d_{k}=64$ and a sequence length of $N=512$. Compared to the Gaussian head, in this case $(2 \\cdot 768 \\cdot 64) /(2 \\cdot 512)=95.5$ times more parameters are trained for the attention mechanism itself. Only for very long sequences (and given that the word embedding dimension stays the same) the dependence on $N$ may become a disadvantage. But of course, due to the independence from the input the Gaussian averaging head is less expressive in comparison to the original attention mechanism. A recently proposed input independent replacement for self-attention is the so called Random Synthesizer (Tay et al., 2020). Here the softmax-attention is directly parametrized with an $N \\times N$ matrix. This amounts to $0.5 \\cdot N$ more parameters than Gaussian averaging. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-78.jpg?height=581&width=882&top_left_y=731&top_left_x=573)\n\nFigure A.6: Attentions of a Gaussian averaging head at initialization for sequence length $N=128$. Every line depicts one Gaussian kernel. Here, the location parameters are initialized with the value of the supporting points $\\mu_{i}=s_{i}$. ## A.5.2 EXPERIMENT 2: MULTIPLE INSTANCE LEARNING DATASETS. A.5.2.1 Immune Repertoire Classification. An architecture called DeepRC, is based on our modern Hopfield networks, for immune repertoire classification and compared to other machine learning approaches. For DeepRC, we consider immune repertoires as input objects, which are represented as bags of instances. In a bag, each instance is an immune receptor sequence and each bag can contain a large number of sequences. At its core, DeepRC consists of a modern Hopfield network that extracts information from each repertoire. The stored patterns (keys) are representations of the immune amino acid sequences (instances) that are obtained by an 1D convolutional network with position encoding. Each state pattern (query) is static and learned via backpropagation. For details see Widrich et al. (2020a;b). Our new Hopfield network has been integrated into a deep learning architecture for immune repertoire classification, a massive multiple instance learning task (Widrich et al., 2020a;b). Theorem 3 states that modern Hopfield networks possess an exponential storage capacity which enables to tackle massive multiple instance learning (MIL) problems (Dietterich et al., 1997).",
    "hopfield-44": "Immune repertoire classification (Emerson et al., 2017) typically requires to extract few patterns from a large set of sequences, the repertoire, that are indicative for the respective immune status. Most MIL methods fail due the large number of instances. Data is obtained by experimentally observed immune receptors as well as simulated sequences sequence motifs (Akbar et al., 2019; Weber et al., 2020) with low yet varying degrees of frequency are implanted. Four different categories of datasets are constructed: (a) Simulated immunosequencing data with implanted motifs, (b) immunosequencing data generated by long short-term memory (LSTM) with implanted motifs, (c) real-world immunosequencing data with implanted motifs, and (d) real-world immunosequencing data with known immune status (Emerson et al., 2017). Categories (a), (b), and (d) contain approx. 300,000 instances per immune repertoire. With over 30 billion sequences in total, this represents one of the largest multiple instance learning experiments ever conducted (Carbonneau et al., 2018). Despite the massive number of instances as well as the low frequency\nof sequences indicative of the respective immune status, deep learning architectures with modern Hopfield networks outperform all competing methods with respect to average area under the ROC curve in all four categories, (a), (b), (c) and (d) (for details see Widrich et al. (2020a)). We evaluate and compare the performance of DeepRC to a set of machine learning methods that serve as baseline, were suggested, or can readily be adapted to immune repertoire classification. The methods comprise (i) known motif, which counts how often the known implanted motifs occur, (ii) Support Vector Machine (SVM) approach that uses a fixed mapping from a bag of sequences to the corresponding $k$-mer counts and used the MinMax and Jaccard kernel, (iii) $k$-Nearest Neighbor (KNN) with $k$-mer representation, transforming MinMax and Jaccard kernel to distances, (iv) logistic regression on the $k$-mer representation, (v) burden test that first identifies sequences or $k$-mers and then computes a burden score per individual, and (vi) logistic multiple instance learning (IMIL). On the real-world dataset DeepRC achieved an AUC of $0.832 \\pm 0.022$, followed by the SVM with MinMax kernel (AUC $0.825 \\pm 0.022$ ) and the burden test with an AUC of $0.699 \\pm 0.041$. Overall on all datasets, DeepRC outperformed all competing methods with respect to average AUC (see Widrich et al. (2020a;b)). Table A. 1 reports the average performance in the simulated immunosequencing datasets (last column) and the performance on datasets of the remaining three categories. DeepRC outperforms all competing methods with respect to average AUC. Across categories, the runner-up methods are either the SVM for MIL problems with MinMax kernel or the burden test. |  | Real-world <br> CMV | Real-world data with implanted signals |  |  |  | $10 \\%$ | LSTM-generated data |  |  | $0.05 \\%$ | Simulated <br> avg. |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n|  |  | OM $1 \\%$ | OM $0.1 \\%$ | MM $1 \\%$ | MM $0.1 \\%$ |  | $1 \\%$ | $0.5 \\%$ | $0.1 \\%$ |  |  |\n| DeepRC | $\\mathbf{0 . 8 3 2} \\pm 0.022$ | $1.00 \\pm 0.00$ | $0.98 \\pm 0.01$ | $1.00 \\pm 0.00$ | $0.94 \\pm 0.01$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $\\mathbf{0 . 8 4 6} \\pm 0.223$ |\n| SVM (MM) | $0.825 \\pm 0.022$ | $1.00 \\pm 0.00$ | $0.58 \\pm 0.02$ | $1.00 \\pm 0.00$ | $0.53 \\pm 0.02$ | $1.00 \\pm 0.00$ | $\\mathbf{1 . 0 0} \\pm 0.00$ | $\\mathbf{1 . 0 0} \\pm 0.00$ | $\\mathbf{1 . 0 0} \\pm 0.00$ | $0.99 \\pm 0.01$ | $0.827 \\pm 0.210$ |\n| SVM (J) | $0.546 \\pm 0.021$ | $0.99 \\pm 0.00$ | $0.53 \\pm 0.02$ | $1.00 \\pm 0.00$ | $0.57 \\pm 0.02$ | $0.98 \\pm 0.04$ | $\\mathbf{1 . 0 0} \\pm 0.00$ | $\\mathbf{1 . 0 0} \\pm 0.00$ | $0.90 \\pm 0.04$ | $0.77 \\pm 0.07$ | $0.550 \\pm 0.080$ |\n| KNN (MM) | $0.679 \\pm 0.076$ | $0.74 \\pm 0.24$ | $0.49 \\pm 0.03$ | $0.67 \\pm 0.18$ | $0.50 \\pm 0.02$ | $0.70 \\pm 0.27$ | $0.72 \\pm 0.26$ | $0.73 \\pm 0.26$ | $0.54 \\pm 0.16$ | $0.52 \\pm 0.15$ | $0.634 \\pm 0.129$ |\n| KNN (J) | $0.534 \\pm 0.039$ | $0.65 \\pm 0.16$ | $0.48 \\pm 0.03$ | $0.70 \\pm 0.20$ | $0.51 \\pm 0.03$ | $0.70 \\pm 0.29$ | $0.61 \\pm 0.24$ | $0.52 \\pm 0.16$ | $0.55 \\pm 0.19$ | $0.54 \\pm 0.19$ | $0.501 \\pm 0.007$ |\n| Log. regr. | $0.607 \\pm 0.058$ | $1.00 \\pm 0.00$ | $0.54 \\pm 0.04$ | $0.99 \\pm 0.00$ | $0.51 \\pm 0.04$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $0.93 \\pm 0.15$ | $0.60 \\pm 0.19$ | $0.43 \\pm 0.16$ | $0.826 \\pm 0.211$ |\n| Burden test | $0.699 \\pm 0.041$ | $1.00 \\pm 0.00$ | $0.64 \\pm 0.05$ | $1.00 \\pm 0.00$ | $0.89 \\pm 0.02$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $0.79 \\pm 0.28$ | $0.549 \\pm 0.074$ |\n| Log. MIL (KMER) | $0.582 \\pm 0.065$ | $0.54 \\pm 0.07$ | $0.51 \\pm 0.03$ | $0.99 \\pm 0.00$ | $0.62 \\pm 0.15$ | $1.00 \\pm 0.00$ | $0.72 \\pm 0.11$ | $0.64 \\pm 0.14$ | $0.57 \\pm 0.15$ | $0.53 \\pm 0.13$ | $0.665 \\pm 0.224$ |\n| Log. MIL (TCR $\\beta$ ) | $0.515 \\pm 0.073$ | $0.50 \\pm 0.03$ | $0.50 \\pm 0.02$ | $0.99 \\pm 0.00$ | $0.78 \\pm 0.03$ | $0.54 \\pm 0.09$ | $0.57 \\pm 0.16$ | $0.47 \\pm 0.09$ | $0.51 \\pm 0.07$ | $0.50 \\pm 0.12$ | $0.501 \\pm 0.016$ |\n| Known motif b. | $-\\quad 1$ | $1.00 \\pm 0.00$ | $0.70 \\pm 0.03$ | $0.99 \\pm 0.00$ | $0.62 \\pm 0.04$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $0.890 \\pm 0.168$ |\n| Known motif c. | - | $0.92 \\pm 0.00$ | $0.56 \\pm 0.03$ | $0.65 \\pm 0.03$ | $0.52 \\pm 0.03$ | $1.00 \\pm 0.00$ | $1.00 \\pm 0.00$ | $0.99 \\pm 0.01$ | $0.72 \\pm 0.09$ | $0.63 \\pm 0.09$ | $0.738 \\pm 0.202$ |\n\nTable A.1: Results immune repertoire classification across all datasets. Results are given in terms of AUC of the competing methods on all datasets. The reported errors are standard deviations across 5 cross-validation (CV) folds (except for the column \"Simulated\"). Real-world CMV: Average performance over 5 CV folds on the cytomegalovirus (CMV) dataset Emerson et al. (2017). Real-world data with implanted signals: Average performance over 5 CV folds for each of the four datasets. A signal was implanted with a frequency (=wittness rate) of $1 \\%$ or $0.1 \\%$. Either a single motif (\"OM\") or multiple motifs (\"MM\") were implanted. LSTM-generated data: Average performance over 5 CV folds for each of the 5 datasets. In each dataset, a signal was implanted with a frequency of $10 \\%, 1 \\%, 0.5 \\%, 0.1 \\%$, and $0.05 \\%$, respectively. Simulated: Here we report the mean over 18 simulated datasets with implanted signals and varying difficulties. The error reported is the standard deviation of the AUC values across the 18 datasets. A.5.2 2 Multiple Instance Learning Benchmark Datasets. Classical benchmarking datasets comprise UCSB breast cancer classification (Kandemir et al., 2014), and the Elephant, Fox, Tiger datasets (Andrews et al., 2003). Elephant, Fox and Tiger are MIL datasets for image annotation which comprise color images from the Corel dataset that have been preprocessed and segmented. An image consists of a set of segments (or blobs), each characterized by color, texture and shape descriptors. The datasets have 100 positive and 100 negative example images. The latter have been randomly drawn from a pool of photos of other animals. Elephant has 1391 instances and 230 features. Fox has 1320 instances and 230 features. Tiger has 1220 instances and 230 features. Furthermore, we use the UCSB breast cancer classification (Kandemir et al., 2014) dataset, which consists of 2,002 instances across 58 input objects. An instance represents a patch of a histopathological image of cancerous or normal tissue. The layer HopfieldPooling is used, which allows for computing a per-input-object representation by\n\n| parameter | values |\n| :--- | :---: |\n| learning rates | $\\left\\{10^{-3}, 10^{-5}\\right\\}$ |\n| learning rate decay $(\\gamma)$ | $\\{0.98,0.96,0.94\\}$ |\n| embedding layers | $\\{1,2,3\\}$ |\n| layer widths | $\\{32,64,256,1024,2048\\}$ |\n| number of heads | $\\{8,12,16,32\\}$ |\n| head dimensions | $\\{16,32,64\\}$ |\n| scaling factors | $\\{0.1,1.0,10.0\\}$ |\n| hidden dimensions | $\\{32,64,128\\}$ |\n| bag dropout | $\\{0.0,0.75\\}$ |\n\nTable A.2: Hyperparameter search-space of a manual hyperparameter selection on the respective validation sets of the Elephant, Fox, Tiger and UCSB breast cancer datasets. extracting an average of instances that are indicative for one of the two classes. The input to the HopfieldPooling layer is a set of embedded instances $\\boldsymbol{Y}$ and a trainable but fixed state (query) pattern $Q$ used for averaging of class-indicative instances. This averaging enables a compression of variable-sized bags to a fixed-sized representation to discriminate the bags. We performed a manual hyperparameter search on a validation set. In detail, we used the following architecture to perform the given task on the Elephant, Fox, Tiger and UCSCB breast cancer datasets: (I) we apply fully connected linear embedding layers with ReLU activation. (II) The output of this embedding serves as the input to our HopfieldPooling layer where the above described pooling operation is performed. (III) Thereafter we use 'ReLU - Linear blocks' as the final linear output layers that perform the classification. Among other hyperparameters, different hidden layer widths (for the fully connected pre- and post-HopfieldPooling layers), learning rates and batch sizes were tried. Additionally our focus resided on the hyperparameters of the HopfieldPooling layer. Among those were the number of heads, the head dimension and the scaling factor $\\beta$. All models were trained for 160 epochs using the AdamW optimizer (Loshchilov \\& Hutter, 2017) with exponential learning rate decay (see Table A.2), and validated by 10 -fold nested cross validation repeated five times with different splits on the data sets. The reported ROC AUC scores are the average of these repetitions. As overfitting imposed quite a problem, bag dropout was applied as the regularization technique of choice. ## A.5.3 EXPERIMENT 3: CLASSIFICATION ON SMALL UCI BENCHMARK DATASETS\n\nA.5.3.1 Motivation. Datasets with a small number of samples, like the UCI benchmark datasets, are particularly difficult for neural networks to generalize on. In contrast to their performance on larger datasets, they are consistently outperformed by methods like e.g. gradient boosting, random forests (RF) and support vector machines (SVMs). Finding samples or even learning prototypes that are highly indicative for the class of a sample (query) suggest the use of Hopfield networks. We applied a modern Hopfield network via the layer Hopfield. The input vector is mapped to $\\boldsymbol{R}$ using a self-normalizing net (SNN) and $\\boldsymbol{W}_{K}$ is learned, where the dimension of $\\boldsymbol{W}_{K}$ (the number of stored fixed pattern) is a hyperparameter. The output $\\boldsymbol{Z}$ of Hopfield enters the output layer. A.5.3.2 Methods compared. Modern Hopfield networks via the layer Hopfield are compared to 17 groups of methods (Fern\u00e1ndez-Delgado et al., 2014; Klambauer et al., 2017a):\n\n1. Support Vector Machines\n2. Random Forest\n3. Multivariate adaptive regression splines (MARS)\n4. Boosting\n5. Rule-based Methods\n6. Logistic and Multinomial Regression (LMR)\n7. Discriminant Analysis (DA)\n8. Bagging\n9. Nearest Neighbor\n10. Decision Trees\n11. Other Ensembles\n12. Neural Networks (standard NN, BatchNorm, WeighNorm, MSRAinit, LayerNorm, ResNet, Self-Normalizing Nets)\n13. Bayesian Methods\n14. Other Methods\n15. Generalized linear models (GLM)\n16. Partial Least Squares and Principal Component Regression (PLSR)\n17. Stacking (Wolpert)\nA.5.3.3 Experimental design and implementation details. As specified in the main paper, we consider 75 datasets of the UC Irvine Machine Learning Repository, which contain less than 1, 000 samples per dataset, following the dataset separation into large and small dataset in Klambauer et al. (2017a). On each dataset, we performed a grid-search to determine the best hyperparameter setting and model per dataset. The hyperparameter search-space of the grid-search is listed in Table A.3. All models were trained for 100 epochs with a mini-batch size of 4 samples using the cross entropy loss and the PyTorch SGD module for stochastic gradient descent without momentum and without weight decay or dropout. After each epoch, the model accuracy was computed on a separated validation set. Using early stopping, the model with the best validation set accuracy averaged over 16 consecutive epochs was selected as final model. This final model was then evaluated against a separated test set to determine the accuracy, as reported in Tables 2 and Table uci_detailed_results.csv in the supplemental materials. As network architecture, we use $\\{0,1,7\\}$ fully connected embedding layers with SELU Klambauer et al. (2017a) activation functions and $\\{32,128,1024\\}$ hidden units per embedding layer. These embedding layers are followed by the layer Hopfield. The number of hidden units is also used as number of dimensions for the Hopfield association space with a number of $\\{1,32\\}$ heads. The layer Hopfield is followed by a mapping to the output vector, which has as dimension the number of classes. Finally, the softmax function is applied to obtain the predicted probability for a class. | parameter | values |\n| :--- | :---: |\n| learning rates | $\\{0.05\\}$ |\n| embedding layers | $\\{0,1,7\\}$ |\n| hidden units | $\\{32,128,1024\\}$ |\n| heads | $\\{1,32\\}$ |\n| $\\beta$ | $\\{1.0,0.1,0.001\\}$ |\n| \\# stored patterns | $\\{1,8\\} \\cdot$ n_classes |\n\nTable A.3: Hyperparameter search-space for grid-search on small UCI benchmark datasets.",
    "hopfield-45": "All models were trained for 100 epochs using stochastic gradient descent with early stopping based on the validation set accuracy and a minibatch size of 4 samples. The number of stored patterns is depending on the number of target classes of the individual tasks. A.5.3.4 Results. We compared the performance of 25 methods based on their method rank. For this we computed the rank per method per dataset based on the accuracy on the test set, which was then averaged over all 75 datasets for each method to obtain the method rank. For the baseline methods we used the scores summarized by (Klambauer et al., 2017a). ## A.5.4 EXPERIMENT 4: DRUG DESIGN BENCHMARK DATASETS\n\nA.5.4.1 Experimental design and implementation details. We test Hopfield layers on 4 classification datasets from MoleculeNet (Wu et al., 2017), which are challenging for deep learning methods. The first dataset is HIV, which was introduced by the Drug Therapeutics Program (DTP) AIDS Antiviral Screen. The second dataset is BACE, which has IC50 measurements for binding affinities of inhibitors (molecules) to the human $\\beta$-secretase 1 (BACE-1). The third dataset is BBBP (blood-brain barrier permeability), which stems from modeling and predicting the blood-brain barrier permeability (Martins et al., 2012). The fourth dataset is SIDER (Side Effect Resource) Kuhn et al. (2016) and contains 1427 approved drugs. These datasets represent four areas of modeling tasks in drug discovery, concretely to develop accurate models for predicting a) new anti-virals (HIV), b) new protein inhibitors (BACE), c) metabolic effects (BBBP), and d) side effects of a chemical compound (SIDER). We implemented a Hopfield layer HopfieldLayer, in which we used the training-input as storedpattern $\\boldsymbol{Y}$ or key, the training-label as pattern-projection $\\boldsymbol{Y} \\boldsymbol{W}_{V}$ or value and the input as state-pattern $\\boldsymbol{R}$ or query.",
    "hopfield-46": "As described in section A. 6 by concatenation of input $\\boldsymbol{z}_{i}$ and target $\\boldsymbol{t}_{i}$ the matrices $\\boldsymbol{W}_{K}$ and $\\boldsymbol{W}_{V}$ can be designed such that inside the softmax the input $\\boldsymbol{z}_{i}$ is used and outside the softmax the target $\\boldsymbol{t}_{i}$. All hyperparameters were selected on separate validation sets and we selected the model with the highest validation AUC on five different random splits. | parameter | values |\n| :--- | :---: |\n| beta | $\\{0.0001,0.001,0.01,0.1,0.2,0.3\\}$ |\n| learning rates | $\\{0.0002\\}$ |\n| heads | $\\{1,32,128,512\\}$ |\n| dropout | $\\{0.0,0.1,0.2\\}$ |\n| state-pattern bias | $\\{0.0,-0.1,-0.125,0.15,-0.2\\}$ |\n| association-activation | $\\{$ None, LeakyReLU \\} |\n| state- and stored-pattern static | \\{False, True \\} |\n| normalize state- and stored-pattern | \\{False, True \\} |\n| normalize association projection | \\{False, True \\} |\n| learnable stored-pattern | \\{False, True \\} |\n\nTable A.4: Hyperparameter search-space for grid-search on HIV, BACE, BBBP and SIDER.",
    "hopfield-47": "All models were trained if applicable for 4 epochs using Adam and a batch size of 1 sample. A.5.4.2 Results. We compared the Hopfield layer Hopfieldlayer to Support Vector Machines (SVMs) (Cortes \\& Vapnik, 1995; Sch\u00f6lkopf \\& Smola, 2002), Extreme Gradient Boosting (XGBoost) (Chen \\& Guestrin, 2016), Random Forest (RF) (Breiman, 2001), Deep Neural Networks (DNNs) (LeCun et al., 2015; Schmidhuber, 2015), and to graph neural networks (GNN) like\n\nGraph Convolutional Networks (GCNs) (Kipf \\& Welling, 2016), Graph Attention Networks (GATs) (Veli\u010dkovi\u0107 et al., 2018), Message Passing Neural Networks (MPNNs) (Gilmer et al., 2017), and Attentive FP (Xiong et al., 2020). Our architecture with HopfieldLayer has reached state-of-theart for predicting side effects on SIDER $0.672 \\pm 0.019$ as well as for predicting $\\beta$-secretase BACE $0.902 \\pm 0.023$.",
    "hopfield-48": "See Table A. 5 for all results, where the results of other methods are taken from Jiang et al. (2020). Table A.5: Results on drug design benchmark datasets. Predictive performance (ROCAUC) on test set as reported by Jiang et al. (2020) for 50 random splits\n\n| Model | HIV | BACE | BBBP | SIDER |\n| :--- | :---: | :---: | :---: | :---: |\n| SVM | $0.822 \\pm 0.020$ | $0.893 \\pm 0.020$ | $0.919 \\pm 0.028$ | $0.630 \\pm 0.021$ |\n| XGBoost | $0.816 \\pm 0.020$ | $0.889 \\pm 0.021$ | $\\mathbf{0 .",
    "hopfield-49": "9 2 6} \\pm \\mathbf{0 . 0 2 6}$ | $0.642 \\pm 0.020$ |\n| RF | $0.820 \\pm 0.016$ | $0.890 \\pm 0.022$ | $\\mathbf{0 . 9 2 7} \\pm \\mathbf{0 . 0 2 5}$ | $0.646 \\pm 0.022$ |\n| GCN | $\\mathbf{0 . 8 3 4} \\pm \\mathbf{0 . 0 2 5}$ | $0.898 \\pm 0.019$ | $0.903 \\pm 0.027$ | $0.634 \\pm 0.026$ |\n| GAT | $0.826 \\pm 0.030$ | $0.886 \\pm 0.023$ | $0.898 \\pm 0.033$ | $0.627 \\pm 0.024$ |\n| DNN | $0.797 \\pm 0.018$ | $0.890 \\pm 0.024$ | $0.898 \\pm 0.033$ | $0.627 \\pm 0.024$ |\n| MPNN | $0.811 \\pm 0.031$ | $0.838 \\pm 0.027$ | $0.879 \\pm 0.037$ | $0.598 \\pm 0.031$ |\n| Attentive FP | $0.822 \\pm 0.026$ | $0.876 \\pm 0.023$ | $0.887 \\pm 0.032$ | $0.623 \\pm 0.026$ |\n| Hopfield (ours) | $0.815 \\pm 0.023$ | $\\mathbf{0 .",
    "hopfield-50": "9 0 2} \\pm \\mathbf{0 . 0 2 3}$ | $0.910 \\pm 0.026$ | $\\mathbf{0 . 6 7 2} \\pm \\mathbf{0 . 0 1 9}$ |\n\n## A. 6 PyTorch IMPLEMENTATION OF HOPFIELd LAyERS\n\nThe implementation is available at: https://github.com/ml-jku/hopfield-layers\n\n## A.6.1 InTRODUCTION\n\nIn this section, we describe the implementation of Hopfield layers in PyTorch (Paszke et al., 2017; 2019) and, additionally, provide a brief usage manual. Possible applications for a Hopfield layer in a deep network architecture comprise:\n\n- multiple instance learning (MIL) (Dietterich et al., 1997),\n- processing of and learning with point sets (Qi et al., 2017a;b; Xu et al., 2018),\n- set-based and permutation invariant learning (Guttenberg et al., 2016; Ravanbakhsh et al., 2016; Zaheer et al., 2017; Korshunova et al., 2018; Ilse et al., 2018; Zhai et al., 2020),\n- attention-based learning (Vaswani et al., 2017a),\n- associative learning,\n- natural language processing,\n- sequence analysis and time series prediction, and\n- storing and retrieving reference or experienced data, e.g. to store training data and retrieve it by the model or to store experiences for reinforcement learning. The Hopfield layer in a deep neural network architecture can implement:\n\n- a memory (storage) with associative retrieval (Danihelka et al., 2016; Ba et al., 2016a),\n- conditional pooling and averaging operations (Wang et al., 2018; Ilse et al., 2020),\n- combining data by associations (Agrawal et al., 1993),\n- associative credit assignment (e.g. Rescorla-Wagner model or value estimation) (Sutton \\& Barto, 2018), and\n- attention mechanisms (Vaswani et al., 2017a; Bahdanau et al., 2014). In particular, a Hopfield layer can substitute attention layers in architectures of transformer and BERT models. The Hopfield layer is designed to be used as plug-in replacement for existing layers like\n\n- pooling layers (max-pooling or average pooling),\n- permutation equivariant layers (Guttenberg et al., 2016; Ravanbakhsh et al., 2016),\n- GRU \\& LSTM layers, and\n- attention layers. In contrast to classical Hopfield networks, the Hopfield layer is based on the modern Hopfield networks with continuous states that have increased storage capacity, as discussed in the main paper. Like classical Hopfield networks, the dynamics of the single heads of a Hopfield layer follow a energy minimization dynamics. The energy minimization empowers our Hopfield layer with several advantages over other architectural designs like memory cells, associative memory, or attention mechanisms. For example, the Hopfield layer has more functionality than a transformer self-attention layer (Vaswani et al., 2017a) as described in Sec.",
    "hopfield-51": "A.6.2. Possible use cases are given in Sec. A.6.3. Source code will be provided under github. ## A.6.2 FUNCTIONALITY\n\nNon-standard functionalities that are added by a Hopfield layer are\n\n- Association of two sets,\n- Multiple Updates for precise fixed points,\n- Variable Beta that determines the kind of fixed points,\n- Dimension of the associative space for controlling the storage capacity,\n- Static Patterns for fixed pattern search, and\n- Pattern Normalization to control the fixed point dynamics by norm of the patterns and shift of the patterns. A functional sketch of our Hopfield layer is shown in Fig. A.7. -Association of two sets. The Hopfield layer makes it possible to associate two sets of vectors. This general functionality allows\n\n- for transformer-like self-attention,\n- for decoder-encoder attention,\n- for time series prediction (maybe with positional encoding),\n- for sequence analysis,\n- for multiple instance learning,\n- for learning with point sets,\n- for combining data sources by associations,\n- for constructing a memory,\n- for averaging and pooling operations, and\n- for many more. The first set of vectors consists of $S$ raw state patterns $\\boldsymbol{R}=\\left(\\boldsymbol{r}_{1}, \\ldots, \\boldsymbol{r}_{S}\\right)^{T}$ with $\\boldsymbol{r}_{s} \\in \\mathbb{R}^{d_{r}}$ and the second set of vectors consists of $N$ raw stored patterns $\\boldsymbol{Y}=\\left(\\boldsymbol{y}_{1}, \\ldots, \\boldsymbol{y}_{N}\\right)^{T}$ with $\\boldsymbol{y}_{i} \\in \\mathbb{R}^{d_{y}}$. Both the $S$ raw state patterns and $N$ raw stored patterns are mapped to an associative space in $\\mathbb{R}^{d_{k}}$ via the matrices $\\boldsymbol{W}_{Q} \\in \\mathbb{R}^{d_{r} \\times d_{k}}$ and $\\boldsymbol{W}_{K} \\in \\mathbb{R}^{d_{y} \\times d_{k}}$, respectively. We define a matrix $\\boldsymbol{Q}\\left(\\boldsymbol{\\Xi}^{T}\\right)$ of state patterns $\\boldsymbol{\\xi}_{n}=\\boldsymbol{W}_{Q} \\boldsymbol{r}_{n}$ in an associative space $\\mathbb{R}^{d_{k}}$ and a matrix $\\boldsymbol{K}\\left(\\boldsymbol{X}^{T}\\right)$ of stored patterns $\\boldsymbol{x}_{i}=\\boldsymbol{W}_{K} \\boldsymbol{y}_{s}$ in the associative space $\\mathbb{R}^{d_{k}}$ :\n\n$$\n\\begin{aligned}\n\\boldsymbol{Q} & =\\boldsymbol{\\Xi}^{T}=\\boldsymbol{R} \\boldsymbol{W}_{Q} \\\\\n\\boldsymbol{K} & =\\boldsymbol{X}^{T}=\\boldsymbol{Y} \\boldsymbol{W}_{K}\n\\end{aligned}\n$$\n\nIn the main paper, Eq. (3) defines the novel update rule:\n\n$$\n\\boldsymbol{\\xi}^{\\text {new }}=f(\\boldsymbol{\\xi})=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\xi}\\right)\n$$\n\nFor multiple patterns, Eq. (3) becomes:\n\n$$\n\\boldsymbol{\\Xi}^{\\text {new }}=f(\\boldsymbol{\\Xi})=\\boldsymbol{X} \\operatorname{softmax}\\left(\\beta \\boldsymbol{X}^{T} \\boldsymbol{\\Xi}\\right)\n$$\n\nwhere $\\boldsymbol{\\Xi}=\\left(\\boldsymbol{\\xi}_{1}, \\ldots, \\boldsymbol{\\xi}_{N}\\right)$ is the matrix of $N$ state (query) patterns, $\\boldsymbol{X}$ is the matrix of stored (key) patterns, and $\\boldsymbol{\\Xi}^{\\text {new }}$ is the matrix of new state patterns, which are averages over stored patterns. A new state pattern can also be very similar to a single stored pattern, in which case we call the stored pattern to be retrieved. These matrices allow to rewrite Eq. (552) as:\n\n$$\n\\left(\\boldsymbol{Q}^{\\text {new }}\\right)^{T}=\\boldsymbol{K}^{T} \\operatorname{softmax}\\left(\\beta \\boldsymbol{K} \\boldsymbol{Q}^{T}\\right)\n$$\n\nFor $\\beta=1 / \\sqrt{d_{k}}$ and changing in Eq. (553) softmax $\\in \\mathbb{R}^{N}$ to a row vector (and evaluating a row vector), we obtain:\n\n$$\n\\boldsymbol{Q}^{\\text {new }}=\\operatorname{softmax}\\left(1 / \\sqrt{d_{k}} \\boldsymbol{Q} \\boldsymbol{K}^{T}\\right) \\boldsymbol{K}\n$$\n\nwhere $Q^{\\text {new }}$ is again the matrix of new state patterns. The new state patterns $\\boldsymbol{\\Xi}^{\\text {new }}$ are projected via $\\boldsymbol{W}_{V}$ to the result patterns $\\boldsymbol{Z}=\\boldsymbol{\\Xi}^{\\text {new }} \\boldsymbol{W}_{V}$, where $\\boldsymbol{W}_{V} \\in \\mathbb{R}^{d_{k} \\times d_{v}}$. With the pattern projection $\\boldsymbol{V}=\\boldsymbol{K} \\boldsymbol{W}_{V}$, we obtain the update rule Eq. (10) from the main paper:\n\n$$\n\\boldsymbol{Z}=\\operatorname{softmax}\\left(1 / \\sqrt{d_{k}} \\boldsymbol{Q} \\boldsymbol{K}^{T}\\right) \\boldsymbol{V}\n$$\n\n-Multiple Updates. The update Eq. (553) can be iteratively applied to the initial state $\\boldsymbol{\\xi}$ of every Hopfield layer head. After the last update, the new states $\\boldsymbol{\\Xi}^{\\text {new }}$ are projected via $\\boldsymbol{W}_{V}$ to the result patterns $\\boldsymbol{Z}=\\boldsymbol{\\Xi}^{\\text {new }} \\boldsymbol{W}_{V}$. Therefore, the Hopfield layer allows multiple update steps in the forward pass without changing the number of parameters. The number of update steps can be given for every Hopfield head individually. Furthermore, it is possible to set a threshold for the number of updates of every Hopfield head based on $\\left\\|\\boldsymbol{\\xi}-\\boldsymbol{\\xi}^{\\text {new }}\\right\\|_{2}$. In the general case of multiple initial states $\\boldsymbol{\\Xi}$, the maximum over the individual norms is taken. -Variable $\\beta$. In the main paper, we have identified $\\beta$ as a crucial parameter for the fixed point dynamics of the Hopfield network, which governs the operating mode of the attention heads. In appendix, e.g.",
    "hopfield-52": "in Lemma A7 or in Eq. (102) and Eq. (103), we showed that the characteristics of the fixed points of the new modern Hopfield network are determined by: $\\beta, M$ (maximal pattern norm), $m_{\\max }$ (spread of the similar patterns), and $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$ (center of the similar patterns). Low values of $\\beta$ induce global averaging and higher values of $\\beta$ metastable states. In the transformer attention, the $\\beta$ parameter is set to $\\beta=1 / \\sqrt{d_{k}}$ as in Eq. (555). The Hopfield layer, however, allows to freely choose $\\beta>0$, since the fixed point dynamics does not only depend on the dimension of the associative space $d_{k}$. Additionally, $\\beta$ heavily influences the gradient flow to the matrices $\\boldsymbol{W}_{Q}$ and $\\boldsymbol{W}_{K}$. Thus, finding the right $\\beta$ for the respective application can be crucial. -Variable dimension of the associative space. Theorem A5 says that the storage capacity of the modern Hopfield network grows exponentially with the dimension of the associative space. However higher dimension of the associative space also means less averaging and smaller metastable states. The dimension of the associative space trades off storage capacity against the size of metastable states, e.g. over how many pattern is averaged.",
    "hopfield-53": "In Eq. (550) and in Eq. (549), we assumed $N$ raw state patterns $\\boldsymbol{R}=\\left(\\boldsymbol{r}_{1}, \\ldots, \\boldsymbol{r}_{N}\\right)^{T}$ and $S$ raw stored patterns $\\boldsymbol{Y}=\\left(\\boldsymbol{y}_{1}, \\ldots, \\boldsymbol{y}_{S}\\right)^{T}$ that are mapped to a $d_{k}$-dimensional associative space via the matrices $\\boldsymbol{W}_{Q} \\in \\mathbb{R}^{d_{r} \\times d_{k}}$ and $\\boldsymbol{W}_{K} \\in \\mathbb{R}^{d_{y} \\times d_{k}}$, respectively. In the associative space $\\mathbb{R}^{d_{k}}$, we obtain the state patterns $\\boldsymbol{Q}=\\boldsymbol{\\Xi}^{T}=\\boldsymbol{R} \\boldsymbol{W}_{Q}$ and the stored patterns $\\boldsymbol{K}=\\boldsymbol{X}^{T}=\\boldsymbol{Y} \\boldsymbol{W}_{K}$. The Hopfield view relates the dimension $d_{k}$ to the number of input patterns $N$ that have to be processed. The storage capacity depends exponentially on the dimension $d_{k}$ (the dimension of the associative space) and the size to metastable states is governed by this dimension, too. Consequently, $d_{k}$ should be chosen with respect to the number $N$ of patterns one wants to store and the desired size of metastable states, which is the number of patterns one wants to average over. For example, if the input consists of many low dimensional input patterns, it makes sense to project the patterns into a higher dimensional space to allow a proper fixed point dynamics. Intuitively, this coincides with the construction of a richer feature space for the patterns. -Static Patterns. In Eq. (550) and Eq. (549), the $N$ raw state patterns $\\boldsymbol{R}=\\left(\\boldsymbol{r}_{1}, \\ldots, \\boldsymbol{r}_{N}\\right)^{T}$ and $S$ raw stored patterns $\\boldsymbol{Y}=\\left(\\boldsymbol{y}_{1}, \\ldots, \\boldsymbol{y}_{S}\\right)^{T}$ are mapped to an associative space via the matrices $\\boldsymbol{W}_{Q} \\in \\mathbb{R}^{d_{r} \\times d_{k}}$ and $\\boldsymbol{W}_{K} \\in \\mathbb{R}^{d_{y} \\times d_{k}}$, which gives the state patterns $\\boldsymbol{Q}=\\boldsymbol{\\Xi}^{T}=\\boldsymbol{R} \\boldsymbol{W}_{Q}$ and the stored\npatterns $\\boldsymbol{K}=\\boldsymbol{X}^{T}=\\boldsymbol{Y} \\boldsymbol{W}_{K}$.",
    "hopfield-54": "We allow for static state and static stored patterns. Static pattern means that the pattern does not depend on the network input, i.e. it is determined by the bias weights and remains constant across different network inputs. Static state patterns allow to determine whether particular fixed patterns are among the stored patterns and vice versa. The static pattern functionality is typically needed if particular patterns must be identified in the data, e.g. as described for immune repertoire classification in the main paper, where a fixed $d_{k}$-dimensional state vector $\\boldsymbol{\\xi}$ is used. -Pattern Normalization. In the appendix, e.g. in Lemma A7 or in Eq. (102) and Eq. (103), we showed that the characteristics of the fixed points of the new modern Hopfield network are determined by: $\\beta, M$ (maximal pattern norm), $m_{\\max }$ (spread of the similar patterns), and $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$ (center of the similar patterns). We already discussed the parameter $\\beta$ while the spread of the similar patterns $m_{\\max }$ is given by the data. The remaining variables $M$ and $\\boldsymbol{m}_{\\boldsymbol{x}}$ that both control the fixed point dynamics are adjusted pattern normalization. $M$ is the maximal pattern norm and $\\boldsymbol{m}_{\\boldsymbol{x}}$ the center of the similar patterns. Theorem A5 says that larger $M$ allows for more patterns to be stored. However, the size of metastable states will decrease with increasing $M$. The vector $\\boldsymbol{m}_{\\boldsymbol{x}}$ says how well the (similar) patterns are centered. If the norm $\\left\\|\\boldsymbol{m}_{\\boldsymbol{x}}\\right\\|$ is large, then this leads to smaller metastable states. The two parameters $M$ and $\\boldsymbol{m}_{\\boldsymbol{x}}$ are controlled by pattern normalization and determine the size and convergence properties of metastable states. These two parameters are important for creating large gradients if heads start with global averaging which has small gradient. These two parameters can shift a head towards small metastable states which have largest gradient as shown in Fig. A.5(b). We allow for three different pattern normalizations, where the first is the default setting:\n\n- pattern normalization of the input patterns,\n- pattern normalization after mapping into the associative space,\n- no pattern normalization. ## A.6.3 UsAGE\n\nAs outlined in Sec. A.6.1, there are a variety of possible use cases for the Hopfield layer, e.g. to build memory networks or transformer models. The goal of the implementation is therefore to provide an easy to use Hopfield module that can be used in a wide range of applications, be it as part of a larger architecture or as a standalone module. Consequently, the focus of the Hopfield layer interface is set on its core parameters: the association of two sets, the scaling parameter $\\beta$, the maximum number of updates, the dimension of the associative space, the possible usage of static patterns, and the pattern normalization. The integration into the PyTorch framework is built such that with all the above functionalities disabled, the \"HopfieldEncoderLayer\" and the \"HopfieldDecoderLayer\", both extensions of the Hopfield module, can be used as a one-to-one plug-in replacement for the TransformerEncoderLayer and the TransformerDecoderLayer, respectively, of the PyTorch transformer module. The Hopfield layer can be used to implement or to substitute different layers:\n\n- Pooling layers: We consider the Hopfield layer as a pooling layer if only one static state (query) pattern exists. Then, it is de facto a pooling over the sequence, which results from the softmax values applied on the stored patterns. Therefore, our Hopfield layer can act as a pooling layer. - Permutation equivariant layers: Our Hopfield layer can be used as a plug-in replacement for permutation equivariant layers. Since the Hopfield layer is an associative memory it assumes no dependency between the input patterns. - GRU \\& LSTM layers: Our Hopfield layer can be used as a plug-in replacement for GRU \\& LSTM layers. Optionally, for substituting GRU \\& LSTM layers, positional encoding might be considered. - Attention layers: Our Hopfield layer can act as an attention layer, where state (query) and stored (key) patterns are different, and need to be associated. - Finally, the extensions of the Hopfield layer are able to operate as a self-attention layer (HopfieldEncoderLayer) and as cross-attention layer (HopfieldDecoderLayer), as described in (Vaswani et al., 2017a). As such, it can be used as building block of transformer-based or general architectures. ![](https://cdn.mathpix.com/cropped/2024_09_12_4f864a77dbadd9776a90g-87.jpg?height=1766&width=1143&top_left_y=364&top_left_x=491)\n\nFigure A.7: A flowchart of the Hopfield layer. First, the raw state (query) patterns $\\boldsymbol{R}$ and the raw stored (key) patterns $\\boldsymbol{Y}$ are optionally normalized (with layer normalization), projected and optionally normalized (with layer normalization) again. The default setting is a layer normalization of the input patterns, and no layer normalization of the projected patterns. The raw stored patterns $\\boldsymbol{Y}$ can in principle be also two different input tensors. Optionally, multiple updates take place in the projected space of $\\boldsymbol{Q}$ and $\\boldsymbol{K}$. This update rule is obtained e.g. from the full update Eq. (423) or the simplified update Eq. (424) in the appendix. ## REFERENCES\n\nY. Abu-Mostafa and J.-M. StJacques. Information capacity of the Hopfield model. IEEE Transactions on Information Theory, 31, 1985. doi: 10.1109/tit.1985.1057069. R. Agrawal, T. Imieliundefinedski, and A. Swami. Mining association rules between sets of items in large databases. SIGMOD Rec., 22(2):207-216, 1993. doi: 10.1145/170036.170072. R. Akbar, P. A. Robert, M. Pavlovi\u0107, J. R. Jeliazkov, I. Snapkov, A. Slabodkin, C. R. Weber, L. Scheffer, E. Miho, I.",
    "hopfield-55": "H. Haff, et al. A compact vocabulary of paratope-epitope interactions enables predictability of antibody-antigen binding.",
    "hopfield-56": "bioRxiv, 2019. F. Alzahrani and A. Salem. Sharp bounds for the lambert $w$ function. Integral Transforms and Special Functions, 29(12):971-978, 2018.",
    "hopfield-57": "S. Andrews, I. Tsochantaridis, and T. Hofmann. Support vector machines for multiple-instance learning.",
    "hopfield-58": "In S. Becker, S. Thrun, and K. Obermayer (eds.), Advances in Neural Information Processing Systems 15, pp. 577-584. MIT Press, 2003. J. Ba, G. E. Hinton, V. Mnih, J. Z. Leibo, and C. Ionescu. Using fast weights to attend to the recent past.",
    "hopfield-59": "In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp.",
    "hopfield-60": "4331-4339. Curran Associates, Inc., 2016a. J. Ba, G. E. Hinton, V. Mnih, J. Z. Leibo, and C. Ionescu. Using fast weights to attend to the recent past. ArXiv, 1610.06258, 2016b. D. Bahdanau, K. Cho, and Y. Bengio. Neural machine translation by jointly learning to align and translate. ArXiv, 1409.0473, 2014. appeared in ICRL 2015. A. Banino, A. P. Badia, R. K\u00f6ster, M. J. Chadwick, V. Zambaldi, D. Hassabis, C. Barry, M. Botvinick, D. Kumaran, and C. Blundell. MEMO: a deep network for flexible combination of episodic memories.",
    "hopfield-61": "ArXiv, 2001.10913, 2020. A. Barra, M. Beccaria, and A. Fachechi. A new mechanical approach to handle generalized Hopfield neural networks. Neural Networks, 106:205-222, 2018. doi: 10.1016/j.neunet.2018.07.010.",
    "hopfield-62": "H. H. Bauschke and P. L. Combettes. Convex Analysis and Monotone Operator Theory in Hilbert Spaces. Cham: Springer International Publishing, 2nd edition, 2017. ISBN 978-3-319-48310-8. doi: $10.1007 / 978-3-319-48311-5$. S. Boyd and L. Vandenberghe. Convex Optimization. Cambridge University Press, 7th edition, 2009. ISBN 978-0-521-83378-3. J. S. Brauchart, A. B. Reznikov, E. B. Saff, I. H. Sloan, Y. G. Wang, and R.",
    "hopfield-63": "S. Womersley. Random point sets on the sphere - hole radii, covering, and separation.",
    "hopfield-64": "Experimental Mathematics, 27(1): $62-81,2018$.",
    "hopfield-65": "doi: $10.1080 / 10586458.2016 .1226209$. L. Breiman. Random forests. Machine Learning, 45(1):5-32, 2001.",
    "hopfield-66": "doi: 10.1023/A:1010933404324. J. Bruck and V.",
    "hopfield-67": "P. Roychowdhury. On the number of spurious memories in the Hopfield model.",
    "hopfield-68": "IEEE Transactions on Information Theory, 36(2):393-397, 1990.",
    "hopfield-69": "T. Cai, J. Fan, and T. Jiang. Distributions of angles in random packing on spheres. Journal of Machine Learning Research, 14(21):1837-1864, 2013. M.-A. Carbonneau, V. Cheplygina, E.",
    "hopfield-70": "Granger, and G. Gagnon. Multiple instance learning: a survey of problem characteristics and applications. Pattern Recognition, 77:329-353, 2018. Marc-Andr\u00e9 Carbonneau, Eric Granger, Alexandre J. Raymond, and Ghyslain Gagnon. Robust multiple-instance learning ensembles using random subspace instance selection. Pattern Recognition, 58:83 - 99, 2016. ISSN 0031-3203. doi: https://doi.org/10.1016/j. patcog.2016.03.035.",
    "hopfield-71": "URL http://www.sciencedirect.com/science/article/ pii/S0031320316300346. M. Carreira-Perpi\u00f1\u00e1n and C. K. I. Williams. An isotropic Gaussian mixture can have more modes than components.",
    "hopfield-72": "Technical Report EDI-INF-RR-0185, The University of Edinburgh, School of Informatics, 2003. A. Carta, A. Sperduti, and D. Bacciu. Encoding-based memory modules for recurrent neural networks. ArXiv, 2001.11771, 2020. T. Chen and C. Guestrin. XGBoost: A scalable tree boosting system. In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 785-794. ACM, 2016. doi: $10.1145 / 2939672.2939785$. Y. Chen, J. Bi, and J.",
    "hopfield-73": "Z. Wang. MILES: Multiple-instance learning via embedded instance selection. IEEE Transactions on Pattern Analysis and Machine Intelligence, 28(12):1931-1947, 2006. V Cheplygina, DM Tax, and M Loog. Dissimilarity-based ensembles for multiple instance learning. IEEE transactions on neural networks and learning systems, 27(6):1379, 2016.",
    "hopfield-74": "K. Cho, B. vanMerri\u00ebnboer, C. Gulcehre, D. Bahdanau, F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase representations using RNN encoder-decoder for statistical machine translation. In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP), pp. 1724-1734. Association for Computational Linguistics, 2014. doi: 10.3115/v1/D14-1179. K. Clark, M.-T. Luong, Q. V. Le, and C. D. Manning. ELECTRA: Pre-training text encoders as discriminators rather than generators.",
    "hopfield-75": "ArXiv, 2003.10555, 2020. appeared in ICLR 2020. C. Cortes and V. Vapnik. Support-vector networks. Machine learning, 20(3):273-297, 1995. A. Crisanti, D. J. Amit, and H. Gutfreund. Saturation level of the Hopfield model for neural network. Europhysics Letters (EPL), 2(4):337-341, 1986. doi: 10.1209/0295-5075/2/4/012. I. Danihelka, G. Wayne, B. Uria, N. Kalchbrenner, and A. Graves. Associative long short-term memory.",
    "hopfield-76": "In M. F. Balcan and K. Q. Weinberger (eds.), Proceedings of The 33rd International Conference on Machine Learning, volume 48 of Proceedings of Machine Learning Research, pp.",
    "hopfield-77": "1986-1994, New York, USA, 2016.",
    "hopfield-78": "M. Daniluk, T. Rockt\u00e4schel, J.",
    "hopfield-79": "Welbl, and S. Riedel. Frustratingly short attention spans in neural language modeling. ArXiv, 1702.04521, 2017. appeared in ICRL 2017. M. Dehghani, S. Gouws, O. Vinyals, J. Uszkoreit, and L. Kaiser. Universal transformers. ArXiv, 1807.03819, 2018. Published at ICLR 2019. M. Demircigil, J. Heusel, M. L\u00f6we, S. Upgang, and F. Vermet. On a model of associative memory with huge storage capacity. Journal of Statistical Physics, 168(2):288-299, 2017. J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova. BERT: pre-training of deep bidirectional transformers for language understanding. ArXiv, 1810.04805, 2018. J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova. BERT: pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 4171-4186. Association for Computational Linguistics, 2019. T. G. Dietterich, R.",
    "hopfield-80": "H. Lathrop, and T. Lozano-P\u00e9rez. Solving the multiple instance problem with axis-parallel rectangles. Artificial Intelligence, 89(1-2):31-71, 1997.",
    "hopfield-81": "R. O. Emerson, W. S. DeWitt, M. Vignali, J. Gravley, J. K. Hu, E. J. Osborne, C. Desmarais, M. Klinger, C. S. Carlson, J. A. Hansen, et al. Immunosequencing identifies signatures of cytomegalovirus exposure history and HLA-mediated effects on the T cell repertoire.",
    "hopfield-82": "Nature Genetics, 49(5):659, 2017. M. Fern\u00e1ndez-Delgado, E. Cernadas, S. Barro, and D. Amorim. Do we need hundreds of classifiers to solve real world classification problems? The Journal of Machine Learning Research, 15(1): $3133-3181,2014$. V. Folli, M. Leonetti, and G. Ruocco. On the maximum storage capacity of the Hopfield model. Frontiers in Computational Neuroscience, 10(144), 2017. doi: 10.3389/fncom.2016.00144. B. Gao and L. Pavel. On the properties of the softmax function with application in game theory and reinforcement learning. ArXiv, 1704.00805, 2017.",
    "hopfield-83": "D. J. H. Garling. Analysis on Polish Spaces and an Introduction to Optimal Transportation. London Mathematical Society Student Texts. Cambridge University Press, 2017. ISBN 1108421571. doi: $10.1017 / 9781108377362$.",
    "hopfield-84": "J. Gilmer, S. S. Schoenholz, P. F. Riley, O. Vinyals, and G.",
    "hopfield-85": "E. Dahl. Neural message passing for quantum chemistry. In Proceedings of the 34th International Conference on Machine Learning (ICML), volume 70, pp. 1263-1272. JMLR.org, 2017. A. Graves, G. Wayne, and I. Danihelka. Neural turing machines. ArXiv, 1410.5401, 2014. N. Guttenberg, N. Virgo, O. Witkowski, H. Aoki, and R. Kanai. Permutation-equivariant neural networks applied to dynamics prediction. $\\operatorname{arXiv}, 1612.04530,2016$. J. Hertz, A. Krogh, and R.",
    "hopfield-86": "G. Palmer. Introduction to the Theory of Neural Computation. AddisonWesley Longman Publishing Co., Inc., Redwood City, CA, 1991. ISBN 0201503956. S. Hochreiter. Untersuchungen zu dynamischen neuronalen Netzen. Diploma thesis, Institut f\u00fcr Informatik, Lehrstuhl Prof. Brauer, Technische Universit\u00e4t M\u00fcnchen, 1991. Advisor: J. Schmidhuber. S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Comput., 9(8):1735-1780, 1997. A. Hoorfar and M. Hassani. Inequalities on the Lambert $w$ function and hyperpower function. Journal of Inequalities in Pure and Applied Mathematics, 9(2):1-5, 2008.",
    "hopfield-87": "J. J. Hopfield. Neural networks and physical systems with emergent collective computational abilities. Proceedings of the National Academy of Sciences, 79(8):2554-2558, 1982.",
    "hopfield-88": "J. J. Hopfield. Neurons with graded response have collective computational properties like those of two-state neurons.",
    "hopfield-89": "Proceedings of the National Academy of Sciences, 81(10):3088-3092, 1984. doi: 10.1073/pnas.81.10.3088. M. Ilse, J. M. Tomczak, and M. Welling. Attention-based deep multiple instance learning. International Conference on Machine Learning (ICML), pp. 3376-3391, 2018. M. Ilse, J. M. Tomczak, and M. Welling. Deep multiple instance learning for digital histopathology. In Handbook of Medical Image Computing and Computer Assisted Intervention, pp. 521-546. Elsevier, 2020. D. Jiang, Z. Wu, C.-Y. Hsieh, G. Chen, B. Liao, Z. Wang, C. Shen, D. Cao, J. Wu, and T. Hou. Could graph neural networks learn better molecular representation for drug discovery? a comparison study of descriptor-based and graph-based models. Journal of Cheminformatics, 2020. doi: 10.21203/rs.3.rs-81439/v1. M. Kandemir, C. Zhang, and F. A. Hamprecht. Empowering multiple instance histopathology cancer diagnosis by cell graphs. In International Conference on Medical Image Computing and Computer-Assisted Intervention, pp. 228-235. Springer, 2014. M. M. R. Khan, R. B. Arif, M. A. B. Siddique, and M.",
    "hopfield-90": "R. Oishe. Study and observation of the variation of accuracies of KNN, SVM, LMNN, ENN algorithms on eleven different datasets from UCI machine learning repository.",
    "hopfield-91": "In 4th International Conference on Electrical Engineering and Information \\& Communication Technology (iCEEiCT), pp. 124-129. IEEE, 2018. T. N. Kipf and M. Welling. Semi-supervised classification with graph convolutional networks. ArXiv, 1609.02907, 2016. in International Conference On Learning Representations (ICLR) 2017. G. Klambauer, T. Unterthiner, A. Mayr, and S. Hochreiter. Self-normalizing neural networks. In Advances in Neural Information Processing Systems, pp. 971-980, 2017a. G. Klambauer, T. Unterthiner, A. Mayr, and S. Hochreiter. Self-normalizing neural networks. ArXiv, $1706.02515,2017 \\mathrm{~b}$.",
    "hopfield-92": "P. Koiran. Dynamics of discrete time, continuous state Hopfield networks. Neural Computation, 6(3): 459-468, 1994. doi: $10.1162 /$ neco.1994.6.3.459. I. Korshunova, J. Degrave, F. Huszar, Y. Gal, A. Gretton, and J. Dambre. BRUNO: A deep recurrent model for exchangeable data. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. CesaBianchi, and R. Garnett (eds.), Advances in Neural Information Processing Systems 31, pp. 7190-7198. Curran Associates, Inc., 2018. D. Krotov and J. J. Hopfield. Dense associative memory for pattern recognition.",
    "hopfield-93": "In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems, pp.",
    "hopfield-94": "1172-1180. Curran Associates, Inc., 2016. D. Krotov and J. J. Hopfield. Dense associative memory is robust to adversarial inputs. Neural Computation, 30(12):3151-3167, 2018.",
    "hopfield-95": "D. Krotov and J. J. Hopfield. Large associative memory problem in neurobiology and machine learning.",
    "hopfield-96": "ArXiv, 2008.06996, 2020.",
    "hopfield-97": "E. \u015e. K\u00fc\u00e7\u00fcka\u015fC\u0131 and M.",
    "hopfield-98": "G. Baydo\u011fan. Bag encoding strategies in multiple instance learning problems. Information Sciences, 467:559-578, 2018. M. Kuhn, I. Letunic, L. J. Jensen, and P. Bork. The SIDER database of drugs and side effects. Nucleic Acids Research, 44(D1):D1075-D1079, 2016. doi: 10.1093/nar/gkv1075. Y. LeCun, Y. Bengio, and G. Hinton. Deep learning. Nature, 521:436-444, 2015.",
    "hopfield-99": "T. Lipp and S. Boyd. Variations and extension of the convex-concave procedure. Optimization and Engineering, 17(2):263-287, 2016. doi: 10.1007/s11081-015-9294-x. Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization.",
    "hopfield-100": "arXiv preprint arXiv:1711.05101, 2017. O. Maron and T. Lozano-P\u00e9rez. A framework for multiple-instance learning. In M. I. Jordan, M. J. Kearns, and S. A. Solla (eds.), Advances in Neural Information Processing Systems, pp. 570-576. MIT Press, 1998. I. F. Martins, A. L. Teixeira, L. Pinheiro, and A.",
    "hopfield-101": "O. Falcao. A Bayesian approach to in silico blood-brain barrier penetration modeling. Journal of Chemical Information and Modeling, 52(6): $1686-1697,2012$. doi: $10.1021 / \\mathrm{ci} 300124 \\mathrm{c}$. C. Mazza. On the storage capacity of nonlinear neural networks. Neural Networks, 10(4):593-597, 1997. doi: 10.1016/S0893-6080(97)00017-8. R. J. McEliece, E.",
    "hopfield-102": "C. Posner, E. R. Rodemich, and S. S. Venkatesh. The capacity of the Hopfield associative memory.",
    "hopfield-103": "IEEE Trans. Inf. Theor, 33(4):461-482, 1987. doi: 10.1109/TIT.1987.",
    "hopfield-104": "1057328 . R. R. Meyer. Sufficient conditions for the convergence of monotonic mathematical programming algorithms.",
    "hopfield-105": "Journal of Computer and System Sciences, 12(1):108-121, 1976. doi: 10.1016/ S0022-0000(76)80021-9. F. W. J. Olver, D. W. Lozier, R. F. Boisvert, and C. W. Clark. NIST handbook of mathematical functions.",
    "hopfield-106": "Cambridge University Press, 1 pap/cdr edition, 2010.",
    "hopfield-107": "ISBN 9780521192255. A. Paszke, S. Gross, S. Chintala, G. Chanan, E. Yang, Z. DeVito, Z. Lin, A. Desmaison, L. Antiga, and A. Lerer. Automatic differentiation in PyTorch. In Workshop in Advances in Neural Information Processing Systems (NeurIPS), 2017. A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, et al. PyTorch: An imperative style, high-performance deep learning library. In Advances in Neural Information Processing Systems, pp. 8026-8037, 2019. C. R. Qi, H. Su, M. Kaichun, and L. J. Guibas. PointNet: Deep learning on point sets for 3d classification and segmentation. In IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 77-85, 2017a. doi: 10.1109/CVPR.2017.16.",
    "hopfield-108": "C. R. Qi, L. Yi, H. Su, and L.",
    "hopfield-109": "J. Guibas. PointNet++: Deep hierarchical feature learning on point sets in a metric space.",
    "hopfield-110": "In 31st International Conference on Neural Information Processing Systems, pp.",
    "hopfield-111": "5105-5114. Curran Associates Inc., 2017b. A. Rangarajan, S. Gold, and E. Mjolsness. A novel optimizing network architecture with applications. Neural Computation, 8(5):1041-1060, 1996. doi: 10.1162/neco.1996.8.5.1041. A. Rangarajan, A. Yuille, and Eric E. Mjolsness. Convergence properties of the softassign quadratic assignment algorithm. Neural Computation, 11(6):1455-1474, 1999. doi: 10.1162/ 089976699300016313. S. Ravanbakhsh, J. Schneider, and B. Poczos. Deep learning with sets and point clouds. arXiv, $1611.04500,2016$. I. Schlag and J. Schmidhuber. Learning to reason with third order tensor products. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett (eds.), Advances in Neural Information Processing Systems 31, pp. 9981-9993. Curran Associates, Inc., 2018. I. Schlag, P. Smolensky, R. Fernandez, N. Jojic, J. Schmidhuber, and J. Gao. Enhancing the transformer with explicit relational encoding for math problem solving.",
    "hopfield-112": "arXiv, 1910.06611, 2019. I. Schlag, K. Irie, and J. Schmidhuber. Linear transformers are secretly fast weight memory systems.",
    "hopfield-113": "arXiv, $2102.11174,2021$.",
    "hopfield-114": "J. Schmidhuber. Learning to control fast-weight memories: An alternative to dynamic recurrent networks. In Neural Computations, Volume: 4, Issue: 1, pp. 131 - 139. MIT Press, 1992. J. Schmidhuber. Deep learning in neural networks: An overview. Neural Networks, 61:85-117, 2015. doi: $10.1016 /$ j.neunet.2014.09.003. B. Sch\u00f6lkopf and A. J. Smola. Learning with Kernels - Support Vector Machines, Regularization, Optimization, and Beyond. MIT Press, Cambridge, MA, 2002.",
    "hopfield-115": "B. K. Sriperumbudur and G.",
    "hopfield-116": "R. Lanckriet. On the convergence of the concave-convex procedure. In Y. Bengio, D. Schuurmans, J. D. Lafferty, C. K. I. Williams, and A. Culotta (eds.), Advances in Neural Information Processing Systems 22, pp.",
    "hopfield-117": "1759-1767. Curran Associates, Inc., 2009. G. Subramanian, B. Ramsundar, V. Pande, and R.",
    "hopfield-118": "A. Denny. Computational modeling of $\\beta$-Secretase 1 (BACE-1) inhibitors using ligand based approaches. Journal of Chemical Information and Modeling, 56(10):1936-1949, 2016. doi: 10.1021/acs.jcim.6b00290. S. Sukhbaatar, A. Szlam, J. Weston, and R. Fergus. End-to-end memory networks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett (eds.), Advances in Neural Information Processing Systems 28, pp.",
    "hopfield-119": "2440-2448. Curran Associates, Inc., 2015a. S. Sukhbaatar, A. Szlam, J. Weston, and R. Fergus. End-to-end memory networks. ArXiv, 1503.08895, 2015b.",
    "hopfield-120": "R. S. Sutton and A. G. Barto. Reinforcement Learning: An Introduction. MIT Press, Cambridge, MA, 2 edition, 2018. F. Tanaka and S. F. Edwards. Analytic theory of the ground state properties of a spin glass. I. Ising spin glass. Journal of Physics F: Metal Physics, 10(12):2769-2778, 1980. doi: 10.1088/0305-4608/10/ $12 / 017$. Y. Tay, D. Bahri, D. Metzler, D.-C. Juan, Z. Zhao, and C. Zheng. Synthesizer: Rethinking selfattention in transformer models.",
    "hopfield-121": "ArXiv, 2005.00743, 2020. M. Toneva and L. Wehbe. Interpreting and improving natural-language processing (in machines) with natural language-processing (in the brain).",
    "hopfield-122": "In H. Wallach, H. Larochelle, A. Beygelzimer, F. d'Alch\u00e9-Buc, E. Fox, and R. Garnett (eds.), Advances in Neural Information Processing Systems 32, pp. 14954-14964. Curran Associates, Inc., 2019a. M. Toneva and L. Wehbe. Interpreting and improving natural-language processing (in machines) with natural language-processing (in the brain). arXiv, 1905.11833, 2019b.",
    "hopfield-123": "J. J. Torres, L. Pantic, and Hilbert H.",
    "hopfield-124": "J. Kappen. Storage capacity of attractor neural networks with depressing synapses.",
    "hopfield-125": "Phys. Rev. E, 66:061910, 2002. doi: 10.1103/PhysRevE.66.061910.",
    "hopfield-126": "A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all you need. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information Processing Systems 30, pp.",
    "hopfield-127": "5998-6008. Curran Associates, Inc., 2017a. A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all you need. ArXiv, 1706.03762, 2017b. P. Veli\u010dkovi\u0107, G. Cucurull, A. Casanova, A. Romero, P. Li\u00f2, and Y. Bengio. Graph attention networks. arXiv, 1710.10903, 2018. in International Conference On Learning Representations (ICLR) 2018. M. Wainberg, B. Alipanahi, and B.",
    "hopfield-128": "J. Frey. Are random forests truly the best classifiers? The Journal of Machine Learning Research, 17(1):3837-3841, 2016. G. Wainrib and J. Touboul. Topological and dynamical complexity of random neural networks.",
    "hopfield-129": "Phys. Rev. Lett., 110:118101, 2013. doi: 10.1103/PhysRevLett.110.118101.",
    "hopfield-130": "J. Wang. Solving the multiple-instance problem: A lazy learning approach. In Proceedings of the 17th International Conference on Machine Learning (ICML), 2000. X. Wang, Y. Yan, P. Tang, X. Bai, and W. Liu. Revisiting multiple instance neural networks. Pattern Recognition, 74:15-24, 2018.",
    "hopfield-131": "C. R. Weber, R. Akbar, A. Yermanos, M. Pavlovi\u0107, I. Snapkov, G. K. Sandve, S. T. Reddy, and V. Greiff. immuneSIM: tunable multi-feature simulation of B- and T-cell receptor repertoires for immunoinformatics benchmarking. Bioinformatics, 36(11):3594-3596, 2020. doi: 10.1093/ bioinformatics/btaa158. J. Weston, S. Chopra, and A. Bordes. Memory networks. ArXiv, 1410.3916, 2014. M. Widrich, B. Sch\u00e4fl, M. Pavlovi\u0107, H. Ramsauer, L. Gruber, M. Holzleitner, J. Brandstetter, G. K. Sandve, V. Greiff, S. Hochreiter, and G. Klambauer. Modern Hopfield networks and attention for immune repertoire classification.",
    "hopfield-132": "ArXiv, 2007.13505, 2020a. M. Widrich, B. Sch\u00e4fl, M. Pavlovi\u0107, H. Ramsauer, L. Gruber, M. Holzleitner, J. Brandstetter, G. K. Sandve, V. Greiff, S. Hochreiter, and G. Klambauer. Modern Hopfield networks and attention for immune repertoire classification. In Advances in Neural Information Processing Systems. Curran Associates, Inc., 2020b. T. Wolf, L. Debut, V. Sanh, J. Chaumond, C. Delangue, A. Moi, P. Cistac, T. Rault, R. Louf, M. Funtowicz, and J. Brew. HuggingFace's transformers: State-of-the-art natural language processing. ArXiv, 1910.03771, 2019.",
    "hopfield-133": "J. C. F. Wu. On the convergence properties of the em algorithm. Ann. Statist., 11(1):95-103, 1983. doi: $10.1214 / \\mathrm{aos} / 1176346060$.",
    "hopfield-134": "X. Wu, X. Liu, W.",
    "hopfield-135": "Li, and Q. Wu. Improved expressivity through dendritic neural networks. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett (eds.), Advances in Neural Information Processing Systems 31, pp. 8057-8068. Curran Associates, Inc., 2018. Z. Wu, B. Ramsundar, E. N. Feinberg, J. Gomes, C. Geniesse, A. S. Pappu, K. Leswing, and V. Pande. MoleculeNet: A benchmark for molecular machine learning. arXiv, 1703.00564, 2017. Z. Xiong, D. Wang, X. Liu, F. Zhong, X. Wan, X. Li, Z. Li, X. Luo, K. Chen, H. Jiang, and M. Zheng. Pushing the boundaries of molecular representation for drug discovery with the graph attention mechanism. Journal of Medicinal Chemistry, 63(16):8749-8760, 2020. doi: 10.1021/acs.jmedchem. 9 b00959. Y. Xu, T. Fan, M. Xu, L. Zeng, and Y. Qiao. SpiderCNN: Deep learning on point sets with parameterized convolutional filters.",
    "hopfield-136": "In V. Ferrari, M. Hebert, C. Sminchisescu, and Y. Weiss (eds.), European Conference on Computer Vision (ECCV), pp. 90-105. Springer International Publishing, 2018. A. L. Yuille and A. Rangarajan. The concave-convex procedure (CCCP).",
    "hopfield-137": "In T. G. Dietterich, S. Becker, and Z. Ghahramani (eds.), Advances in Neural Information Processing Systems 14, pp. 1033-1040. MIT Press, 2002. A. L. Yuille and A. Rangarajan. The concave-convex procedure. Neural Computation, 15(4):915-936, 2003.",
    "hopfield-138": "doi: $10.1162 / 08997660360581958$. M. Zaheer, S. Kottur, S. Ravanbakhsh, B. Poczos, R. R. Salakhutdinov, and A. J. Smola. Deep sets. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information Processing Systems 30, pp.",
    "hopfield-139": "3391-3401. Curran Associates, Inc., 2017. W.",
    "hopfield-140": "I. Zangwill. Nonlinear programming: a unified approach. Prentice-Hall international series in management. Englewood Cliffs, N.J., 1969. ISBN 9780136235798. S. Zhai, W. Talbott, M.",
    "hopfield-141": "A. Bautista, C. Guestrin, and J.",
    "hopfield-142": "M. Susskind. Set distribution networks: a generative model for sets of images.",
    "hopfield-143": "arXiv, 2006.10705, 2020. W. Zhang and B. Zhou. Learning to update auto-associative memory in recurrent neural networks for improving sequence memorization.",
    "hopfield-144": "ArXiv, 1709.06493, 2017. Y. Zhu, R. Kiros, R. S. Zemel, R. Salakhutdinov, R. Urtasun, A. Torralba, and S. Fidler. Aligning books and movies: Towards story-like visual explanations by watching movies and reading books. Proceedings of the IEEE international conference on computer vision, pp. 19-27, 2015. arXiv 1506.06724 . "
}