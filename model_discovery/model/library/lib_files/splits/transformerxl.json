{
    "transformerxl-0": "Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context\n\nZihang Dai\u221712, Zhilin Yang\u221712, Yiming Yang1, Jaime Carbonell1, Quoc V. Le2, Ruslan Salakhutdinov1 1Carnegie Mellon University, 2Google Brain {dzihang,zhiliny,yiming,jgc,rsalakhu}@cs.cmu.edu, qvl@google.com\n\nAbstract\n\nTransformers have a potential of learning longer-term dependency, but are limited by a fixed-length context in the setting of language modeling. We propose a novel neural architecture Transformer-XL that enables learning dependency beyond a fixed length without disrupting temporal coherence. It consists of a segment-level recurrence mechanism and a novel positional encoding scheme. Our method not only enables capturing longer-term dependency, but also resolves the context fragmentation problem. As a result, Transformer-XL learns dependency that is 80% longer than RNNs and 450% longer than vanilla Transformers, achieves better performance on both short and long sequences, and is up to 1,800+ times faster than vanilla Transformers during evaluation. Notably, we improve the state-of-the-art results of bpc/perplexity to 0.99 on enwiki8, 1.08 on text8, 18.3 on WikiText-103, 21.8 on One Billion Word, and 54.5 on Penn Treebank (without finetuning). When trained only on WikiText-103, Transformer-XL manages to generate reasonably coherent, novel text articles with thousands of tokens. Our code, pretrained models, and hyperparameters are available in both Tensorflow and PyTorch111https://github.com/kimiyoung/transformer-xl.",
    "transformerxl-1": "11footnotetext: Equal contribution.",
    "transformerxl-2": "Order determined by swapping the one in Yang et al. (2017). 1 Introduction\n\nLanguage modeling is among the important problems that require modeling long-term dependency, with successful applications such as unsupervised pretraining (Dai and Le, 2015; Peters et al., 2018; Radford et al., 2018; Devlin et al., 2018). However, it has been a challenge to equip neural networks with the capability to model long-term dependency in sequential data. Recurrent neural networks (RNNs), in particular Long Short-Term Memory (LSTM) networks (Hochreiter and Schmidhuber, 1997), have been a standard solution to language modeling and obtained strong results on multiple benchmarks. Despite the wide adaption, RNNs are difficult to optimize due to gradient vanishing and explosion (Hochreiter et al., 2001), and the introduction of gating in LSTMs and the gradient clipping technique (Graves, 2013) might not be sufficient to fully address this issue. Empirically, previous work has found that LSTM language models use 200 context words on average (Khandelwal et al., 2018), indicating room for further improvement. On the other hand, the direct connections between long-distance word pairs baked in attention mechanisms might ease optimization and enable the learning of long-term dependency (Bahdanau et al., 2014; Vaswani et al., 2017). Recently, Al-Rfou et al. (2018) designed a set of auxiliary losses to train deep Transformer networks for character-level language modeling, which outperform LSTMs by a large margin. Despite the success, the LM training in Al-Rfou et al. (2018) is performed on separated fixed-length segments of a few hundred characters, without any information flow across segments. As a consequence of the fixed context length, the model cannot capture any longer-term dependency beyond the predefined context length. In addition, the fixed-length segments are created by selecting a consecutive chunk of symbols without respecting the sentence or any other semantic boundary. Hence, the model lacks necessary contextual information needed to well predict the first few symbols, leading to inefficient optimization and inferior performance. We refer to this problem as context fragmentation. To address the aforementioned limitations of fixed-length contexts, we propose a new architecture called Transformer-XL (meaning extra long).",
    "transformerxl-3": "We introduce the notion of recurrence into our deep self-attention network. In particular, instead of computing the hidden states from scratch for each new segment, we reuse the hidden states obtained in previous segments. The reused hidden states serve as memory for the current segment, which builds up a recurrent connection between the segments. As a result, modeling very long-term dependency becomes possible because information can be propagated through the recurrent connections. Meanwhile, passing information from the previous segment can also resolve the problem of context fragmentation. More importantly, we show the necessity of using relative positional encodings rather than absolute ones, in order to enable state reuse without causing temporal confusion. Hence, as an additional technical contribution, we introduce a simple but more effective relative positional encoding formulation that generalizes to attention lengths longer than the one observed during training. Transformer-XL obtained strong results on five datasets, varying from word-level to character-level language modeling. Transformer-XL is also able to generate relatively coherent long text articles with thousands of tokens (see Appendix E), trained on only 100M tokens. Our main technical contributions include introducing the notion of recurrence in a purely self-attentive model and deriving a novel positional encoding scheme. These two techniques form a complete set of solutions, as any one of them alone does not address the issue of fixed-length contexts. Transformer-XL is the first self-attention model that achieves substantially better results than RNNs on both character-level and word-level language modeling. 2 Related Work\n\nIn the last few years, the field of language modeling has witnessed many significant advances, including but not limited to devising novel architectures to better encode the context (Bengio et al., 2003; Mikolov et al., 2010; Merity et al., 2016; Al-Rfou et al., 2018), improving regularization and optimization algorithms Gal and Ghahramani (2016) , speeding up the Softmax computation (Grave et al., 2016a) , and enriching the output distribution family (Yang et al., 2017). To capture the long-range context in language modeling, a line of work directly feeds a representation of the wider context into the network as an additional input. Existing works range from ones where context representations are manually defined (Mikolov and Zweig, 2012; Ji et al., 2015; Wang and Cho, 2015) to others that rely on document-level topics learned from data (Dieng et al., 2016; Wang et al., 2017). More broadly, in generic sequence modeling, how to capture long-term dependency has been a long-standing research problem. From this perspective, since the ubiquitous adaption of LSTM, many efforts have been spent on relieving the vanishing gradient problem, including better initialization (Le et al., 2015), additional loss signal (Trinh et al., 2018), augmented memory structure (Ke et al., 2018) and others that modify the internal architecture of RNNs to ease the optimization Wu et al.",
    "transformerxl-4": "(2016); Li et al. (2018). Different from them, our work is based on the Transformer architecture and shows that language modeling as a real-world task benefits from the ability to learn longer-term dependency. 3 Model\n\nGiven a corpus of tokens , the task of language modeling is to estimate the joint probability , which is often auto-regressively factorized as .",
    "transformerxl-5": "With the factorization, the problem reduces to estimating each conditional factor. In this work, we stick to the standard neural approach to modeling the conditional probability. Specifically, a trainable neural network is used to encode the context into a fixed size hidden state, which is multiplied with the word embeddings to obtain the logits. The logits are then fed into the Softmax function, yielding a categorical probability distribution over the next token. 3.1 Vanilla Transformer Language Models\n\nIn order to apply Transformer or self-attention to language modeling, the central problem is how to train a Transformer to effectively encode an arbitrarily long context into a fixed size representation. Given infinite memory and computation, a simple solution would be to process the entire context sequence using an unconditional Transformer decoder, similar to a feed-forward neural network. However, this is usually infeasible with the limited resource in practice. One feasible but crude approximation is to split the entire corpus into shorter segments of manageable sizes, and only train the model within each segment, ignoring all contextual information from previous segments.",
    "transformerxl-6": "This is the idea adopted by Al-Rfou et al. (2018). We call it the vanilla model and visualize it in Fig. 1(a). Under this training paradigm, information never flows across segments in either the forward or backward pass. There are two critical limitations of using a fixed-length context. First, the largest possible dependency length is upper bounded by the segment length, which is a few hundred on character-level language modeling (Al-Rfou et al., 2018). Therefore, although the self-attention mechanism is less affected by the vanishing gradient problem compared to RNNs, the vanilla model is not able to fully exploit this optimization advantage. Second, though it is possible to use padding to respect the sentence or other semantic boundaries, in practice it has been standard practice to simply chunk long text into fixed-length segments due to improved efficiency (Peters et al., 2018; Devlin et al., 2018; Al-Rfou et al., 2018). However, simply chunking a sequence into fixed-length segments will lead to the context fragmentation problem as discussed in Section 1. During evaluation, at each step, the vanilla model also consumes a segment of the same length as in training, but only makes one prediction at the last position. Then, at the next step, the segment is shifted to the right by only one position, and the new segment has to be processed all from scratch. As shown in Fig. 1(b), this procedure ensures that each prediction utilizes the longest possible context exposed during training, and also relieves context fragmentation issue encountered in training. However, this evaluation procedure is extremely expensive. We will show that our proposed architecture is able to substantially improve the evaluation speed. 3.2 Segment-Level Recurrence with State Reuse\n\nTo address the limitations of using a fixed-length context, we propose to introduce a recurrence mechanism to the Transformer architecture. During training, the hidden state sequence computed for the previous segment is fixed and cached to be reused as an extended context when the model processes the next new segment, as shown in Fig. 2(a). Although the gradient still remains within a segment, this additional input allows the network to exploit information in the history, leading to an ability of modeling longer-term dependency and avoiding context fragmentation. Formally, let the two consecutive segments of length be and respectively. Denoting the -th layer hidden state sequence produced for the -th segment by , where is the hidden dimension. Then, the -th layer hidden state for segment is produced (schematically) as follows,\n\n\ud835\udc21 ~ \u03c4 + 1 n \u2212 1 = [ SG \u200b ( \ud835\udc21 \u03c4 n \u2212 1 ) \u2218 \ud835\udc21 \u03c4 + 1 n \u2212 1 ] , superscript subscript ~ \ud835\udc21 \ud835\udf0f 1 \ud835\udc5b 1 delimited-[] SG superscript subscript \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 superscript subscript \ud835\udc21 \ud835\udf0f 1 \ud835\udc5b 1 \\displaystyle\\widetilde{{\\mathbf{h}}}_{\\tau+1}^{n-1}=\\left[\\text{SG}({\\mathbf{h}}_{\\tau}^{n-1})\\circ{\\mathbf{h}}_{\\tau+1}^{n-1}\\right], \ud835\udc2a \u03c4 + 1 n , \ud835\udc24 \u03c4 + 1 n , \ud835\udc2f \u03c4 + 1 n = \ud835\udc21 \u03c4 + 1 n \u2212 1 \u200b \ud835\udc16 q \u22a4 , \ud835\udc21 ~ \u03c4 + 1 n \u2212 1 \u200b \ud835\udc16 k \u22a4 , \ud835\udc21 ~ \u03c4 + 1 n \u2212 1 \u200b \ud835\udc16 v \u22a4 , formulae-sequence superscript subscript \ud835\udc2a \ud835\udf0f 1 \ud835\udc5b superscript subscript \ud835\udc24 \ud835\udf0f 1 \ud835\udc5b superscript subscript \ud835\udc2f \ud835\udf0f 1 \ud835\udc5b superscript subscript \ud835\udc21 \ud835\udf0f 1 \ud835\udc5b 1 superscript subscript \ud835\udc16 \ud835\udc5e top superscript subscript ~ \ud835\udc21 \ud835\udf0f 1 \ud835\udc5b 1 superscript subscript \ud835\udc16 \ud835\udc58 top superscript subscript ~ \ud835\udc21 \ud835\udf0f 1 \ud835\udc5b 1 superscript subscript \ud835\udc16 \ud835\udc63 top \\displaystyle{\\mathbf{q}}_{\\tau+1}^{n},{\\mathbf{k}}_{\\tau+1}^{n},{\\mathbf{v}}_{\\tau+1}^{n}={\\mathbf{h}}_{\\tau+1}^{n-1}{\\mathbf{W}}_{q}^{\\top},\\widetilde{{\\mathbf{h}}}_{\\tau+1}^{n-1}{\\mathbf{W}}_{k}^{\\top},\\widetilde{{\\mathbf{h}}}_{\\tau+1}^{n-1}{\\mathbf{W}}_{v}^{\\top}, \ud835\udc21 \u03c4 + 1 n = Transformer-Layer \u200b ( \ud835\udc2a \u03c4 + 1 n , \ud835\udc24 \u03c4 + 1 n , \ud835\udc2f \u03c4 + 1 n ) . superscript subscript \ud835\udc21 \ud835\udf0f 1 \ud835\udc5b Transformer-Layer superscript subscript \ud835\udc2a \ud835\udf0f 1 \ud835\udc5b superscript subscript \ud835\udc24 \ud835\udf0f 1 \ud835\udc5b superscript subscript \ud835\udc2f \ud835\udf0f 1 \ud835\udc5b \\displaystyle{\\mathbf{h}}_{\\tau+1}^{n}=\\text{Transformer-Layer}\\left({\\mathbf{q}}_{\\tau+1}^{n},{\\mathbf{k}}_{\\tau+1}^{n},{\\mathbf{v}}_{\\tau+1}^{n}\\right). where the function stands for stop-gradient, the notation indicates the concatenation of two hidden sequences along the length dimension, and denotes model parameters. Compared to the standard Transformer, the critical difference lies in that the key and value are conditioned on the extended context and hence cached from the previous segment. We emphasize this particular design by the green paths in Fig. 2(a). With this recurrence mechanism applied to every two consecutive segments of a corpus, it essentially creates a segment-level recurrence in the hidden states. As a result, the effective context being utilized can go way beyond just two segments. However, notice that the recurrent dependency between and shifts one layer downwards per-segment, which differs from the same-layer recurrence in conventional RNN-LMs. Consequently, the largest possible dependency length grows linearly w.r.t.",
    "transformerxl-7": "the number of layers as well as the segment length, i.e., , as visualized by the shaded area in Fig. 2(b). This is analogous to truncated BPTT (Mikolov et al., 2010), a technique developed for training RNN-LMs. However, different from truncated BPTT, our method caches a sequence of hidden states instead of the last one, and should be applied together with the relative positional encoding technique described in Section 3.3.",
    "transformerxl-8": "Besides achieving extra long context and resolving fragmentation, another benefit that comes with the recurrence scheme is significantly faster evaluation. Specifically, during evaluation, the representations from the previous segments can be reused instead of being computed from scratch as in the case of the vanilla model. In our experiments on enwiki8, Transformer-XL is up to 1,800+ times faster than the vanilla model during evaluation (see Section 4).",
    "transformerxl-9": "Finally, notice that the recurrence scheme does not need to be restricted to only the previous segment. In theory, we can cache as many previous segments as the GPU memory allows, and reuse all of them as the extra context when processing the current segment. Thus, we can cache a predefined length- old hidden states spanning (possibly) multiple segments, and refer to them as the memory , due to a clear connection to the memory augmented neural networks (Graves et al., 2014; Weston et al., 2014). In our experiments, we set equal to the segment length during training, and increase it by multiple times during evaluation. 3.3 Relative Positional Encodings\n\nWhile we found the idea presented in the previous subsection very appealing, there is a crucial technical challenge we haven\u2019t solved in order to reuse the hidden states. That is, how can we keep the positional information coherent when we reuse the states? Recall that, in the standard Transformer, the information of sequence order is provided by a set of positional encodings, denoted as , where the -th row corresponds to the -th absolute position within a segment and prescribes the maximum possible length to be modeled. Then, the actual input to the Transformer is the element-wise addition of the word embeddings and the positional encodings. If we simply adapt this positional encoding to our recurrence mechanism, the hidden state sequence would be computed schematically by\n\n\ud835\udc21 \u03c4 + 1 subscript \ud835\udc21 \ud835\udf0f 1 \\displaystyle{\\mathbf{h}}_{\\tau+1} = f \u200b ( \ud835\udc21 \u03c4 , \ud835\udc04 \ud835\udc2c \u03c4 + 1 + \ud835\udc14 1 : L ) absent \ud835\udc53 subscript \ud835\udc21 \ud835\udf0f subscript \ud835\udc04 subscript \ud835\udc2c \ud835\udf0f 1 subscript \ud835\udc14 : 1 \ud835\udc3f \\displaystyle=f({\\mathbf{h}}_{\\tau},{\\mathbf{E}}_{{\\mathbf{s}}_{\\tau+1}}+{\\mathbf{U}}_{1:L}) \ud835\udc21 \u03c4 subscript \ud835\udc21 \ud835\udf0f \\displaystyle{\\mathbf{h}}_{\\tau} = f \u200b ( \ud835\udc21 \u03c4 \u2212 1 , \ud835\udc04 \ud835\udc2c \u03c4 + \ud835\udc14 1 : L ) , absent \ud835\udc53 subscript \ud835\udc21 \ud835\udf0f 1 subscript \ud835\udc04 subscript \ud835\udc2c \ud835\udf0f subscript \ud835\udc14 : 1 \ud835\udc3f \\displaystyle=f({\\mathbf{h}}_{\\tau-1},{\\mathbf{E}}_{{\\mathbf{s}}_{\\tau}}+{\\mathbf{U}}_{1:L}),\n\nwhere is the word embedding sequence of , and represents a transformation function. Notice that, both and are associated with the same positional encoding . As a result, the model has no information to distinguish the positional difference between and for any , resulting in a sheer performance loss. In order to avoid this failure mode, the fundamental idea is to only encode the relative positional information in the hidden states. Conceptually, the positional encoding gives the model a temporal clue or \u201cbias\u201d about how information should be gathered, i.e., where to attend. For the same purpose, instead of incorporating bias statically into the initial embedding, one can inject the same information into the attention score of each layer. More importantly, it is more intuitive and generalizable to define the temporal bias in a relative manner. For instance, when a query vector attends on the key vectors , it does not need to know the absolute position of each key vector to identify the temporal order of the segment. Instead, it suffices to know the relative distance between each key vector and itself , i.e. . Practically, one can create a set of relative positional encodings , where the -th row indicates a relative distance of between two positions. By injecting the relative distance dynamically into the attention score, the query vector can easily distinguish the representations of and from their different distances, making the state reuse mechanism feasible. Meanwhile, we won\u2019t lose any temporal information, as the absolute position can be recovered recursively from relative distances. Previously, the idea of relative positional encodings has been explored in the context of machine translation (Shaw et al., 2018) and music generation (Huang et al., 2018). Here, we offer a different derivation, arriving at a new form of relative positional encodings, which not only has a one-to-one correspondence to its absolute counterpart but also enjoys much better generalization empirically (see Section 4). Firstly, in the standard Transformer (Vaswani et al., 2017), the attention score between query and key vector within the same segment can be decomposed as\n\n\ud835\udc00 i , j abs superscript subscript \ud835\udc00 \ud835\udc56 \ud835\udc57 abs \\displaystyle{\\mathbf{A}}_{i,j}^{\\text{abs}} = \ud835\udc04 x i \u22a4 \u200b \ud835\udc16 q \u22a4 \u200b \ud835\udc16 k \u200b \ud835\udc04 x j \u23df ( a ) + \ud835\udc04 x i \u22a4 \u200b \ud835\udc16 q \u22a4 \u200b \ud835\udc16 k \u200b \ud835\udc14 j \u23df ( b ) absent subscript \u23df superscript subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc56 top superscript subscript \ud835\udc16 \ud835\udc5e top subscript \ud835\udc16 \ud835\udc58 subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc57 \ud835\udc4e subscript \u23df superscript subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc56 top superscript subscript \ud835\udc16 \ud835\udc5e top subscript \ud835\udc16 \ud835\udc58 subscript \ud835\udc14 \ud835\udc57 \ud835\udc4f \\displaystyle=\\underbrace{{\\mathbf{E}}_{x_{i}}^{\\top}{\\mathbf{W}}_{q}^{\\top}{\\mathbf{W}}_{k}{\\mathbf{E}}_{x_{j}}}_{(a)}+\\underbrace{{\\mathbf{E}}_{x_{i}}^{\\top}{\\mathbf{W}}_{q}^{\\top}{\\mathbf{W}}_{k}{\\mathbf{U}}_{j}}_{(b)} + \ud835\udc14 i \u22a4 \u200b \ud835\udc16 q \u22a4 \u200b \ud835\udc16 k \u200b \ud835\udc04 x j \u23df ( c ) + \ud835\udc14 i \u22a4 \u200b \ud835\udc16 q \u22a4 \u200b \ud835\udc16 k \u200b \ud835\udc14 j \u23df ( d ) . subscript \u23df superscript subscript \ud835\udc14 \ud835\udc56 top superscript subscript \ud835\udc16 \ud835\udc5e top subscript \ud835\udc16 \ud835\udc58 subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc57 \ud835\udc50 subscript \u23df superscript subscript \ud835\udc14 \ud835\udc56 top superscript subscript \ud835\udc16 \ud835\udc5e top subscript \ud835\udc16 \ud835\udc58 subscript \ud835\udc14 \ud835\udc57 \ud835\udc51 \\displaystyle+\\underbrace{{\\mathbf{U}}_{i}^{\\top}{\\mathbf{W}}_{q}^{\\top}{\\mathbf{W}}_{k}{\\mathbf{E}}_{x_{j}}}_{(c)}+\\underbrace{{\\mathbf{U}}_{i}^{\\top}{\\mathbf{W}}_{q}^{\\top}{\\mathbf{W}}_{k}{\\mathbf{U}}_{j}}_{(d)}.\\vspace{-0.5em}\n\nFollowing the idea of only relying on relative positional information, we propose to re-parameterize the four terms as follows\n\n\ud835\udc00 i , j rel superscript subscript \ud835\udc00 \ud835\udc56 \ud835\udc57 rel \\displaystyle{\\mathbf{A}}_{i,j}^{\\text{rel}} = \ud835\udc04 x i \u22a4 \u200b \ud835\udc16 q \u22a4 \u200b \ud835\udc16 k , E \u200b \ud835\udc04 x j \u23df ( a ) + \ud835\udc04 x i \u22a4 \u200b \ud835\udc16 q \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 i \u2212 j \u23df ( b ) absent subscript \u23df superscript subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc56 top superscript subscript \ud835\udc16 \ud835\udc5e top subscript \ud835\udc16 \ud835\udc58 \ud835\udc38 subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc57 \ud835\udc4e subscript \u23df superscript subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc56 top superscript subscript \ud835\udc16 \ud835\udc5e top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc56 \ud835\udc57 \ud835\udc4f \\displaystyle=\\underbrace{{\\mathbf{E}}_{x_{i}}^{\\top}{\\mathbf{W}}_{q}^{\\top}{\\mathbf{W}}_{k,E}{\\mathbf{E}}_{x_{j}}}_{(a)}+\\underbrace{{\\mathbf{E}}_{x_{i}}^{\\top}{\\mathbf{W}}_{q}^{\\top}{\\mathbf{W}}_{k,R}{\\color[rgb]{0,1,1}{\\mathbf{R}}_{i-j}}}_{(b)} + u \u22a4 \u200b \ud835\udc16 k , E \u200b \ud835\udc04 x j \u23df ( c ) + v \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 i \u2212 j \u23df ( d ) . subscript \u23df superscript \ud835\udc62 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc38 subscript \ud835\udc04 subscript \ud835\udc65 \ud835\udc57 \ud835\udc50 subscript \u23df superscript \ud835\udc63 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc56 \ud835\udc57 \ud835\udc51 \\displaystyle+\\underbrace{{\\color[rgb]{1,0,0}u^{\\top}}{\\mathbf{W}}_{k,E}{\\mathbf{E}}_{x_{j}}}_{(c)}+\\underbrace{{\\color[rgb]{1,0,0}v^{\\top}}{\\mathbf{W}}_{k,R}{\\color[rgb]{0,1,1}{\\mathbf{R}}_{i-j}}}_{(d)}. \u2022\n\nThe first change we make is to replace all appearances of the absolute positional embedding for computing key vectors in term and with its relative counterpart . This essentially reflects the prior that only the relative distance matters for where to attend. Note that is a sinusoid encoding matrix (Vaswani et al., 2017) without learnable parameters. \u2022\n\nSecondly, we introduce a trainable parameter to replace the query in term . In this case, since the query vector is the same for all query positions, it suggests that the attentive bias towards different words should remain the same regardless of the query position. With a similar reasoning, a trainable parameter is added to substitute in term . \u2022\n\nFinally, we deliberately separate the two weight matrices and for producing the content-based key vectors and location-based key vectors respectively. Under the new parameterization, each term has an intuitive meaning: term represents content-based addressing, term captures a content-dependent positional bias, term governs a global content bias, and encodes a global positional bias.",
    "transformerxl-10": "In comparison, the formulation in Shaw et al. (2018) only has terms and , dropping the two bias terms and . Moreover, Shaw et al. (2018) merge the multiplication into a single trainable matrix , which abandons the inductive bias built into the original sinusoid positional encoding (Vaswani et al., 2017). In contrast, our relative positional embedding adapts the sinusoid formulation. As a benefit of the inductive bias, a model trained on a memory of some certain length can automatically generalize to a memory several times longer during evaluation. Equipping the recurrence mechanism with our proposed relative positional embedding, we finally arrive at the Transformer-XL architecture. For completeness, we summarize the computational procedure for a -layer Transformer-XL with a single attention head here. For :\n\n\ud835\udc21 ~ \u03c4 n \u2212 1 = superscript subscript ~ \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 absent \\displaystyle\\widetilde{{\\mathbf{h}}}_{\\tau}^{n-1}= [ SG \u200b ( \ud835\udc26 \u03c4 n \u2212 1 ) \u2218 \ud835\udc21 \u03c4 n \u2212 1 ] delimited-[] SG superscript subscript \ud835\udc26 \ud835\udf0f \ud835\udc5b 1 superscript subscript \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 \\displaystyle\\,\\left[\\text{SG}({\\mathbf{m}}_{\\tau}^{n-1})\\circ{\\mathbf{h}}_{\\tau}^{n-1}\\right] \ud835\udc2a \u03c4 n , \ud835\udc24 \u03c4 n , \ud835\udc2f \u03c4 n = superscript subscript \ud835\udc2a \ud835\udf0f \ud835\udc5b superscript subscript \ud835\udc24 \ud835\udf0f \ud835\udc5b superscript subscript \ud835\udc2f \ud835\udf0f \ud835\udc5b absent \\displaystyle{\\mathbf{q}}_{\\tau}^{n},{\\mathbf{k}}_{\\tau}^{n},{\\mathbf{v}}_{\\tau}^{n}= \ud835\udc21 \u03c4 n \u2212 1 \u200b \ud835\udc16 q n \u22a4 , \ud835\udc21 ~ \u03c4 n \u2212 1 \u200b \ud835\udc16 k , E n \u22a4 , \ud835\udc21 ~ \u03c4 n \u2212 1 \u200b \ud835\udc16 v n \u22a4 superscript subscript \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 superscript superscript subscript \ud835\udc16 \ud835\udc5e \ud835\udc5b top superscript subscript ~ \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 superscript superscript subscript \ud835\udc16 \ud835\udc58 \ud835\udc38 \ud835\udc5b top superscript subscript ~ \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 superscript superscript subscript \ud835\udc16 \ud835\udc63 \ud835\udc5b top \\displaystyle\\,{\\mathbf{h}}_{\\tau}^{n-1}{{\\mathbf{W}}_{q}^{n}}^{\\top},\\widetilde{{\\mathbf{h}}}_{\\tau}^{n-1}{{\\mathbf{W}}_{k,E}^{n}}^{\\top},\\widetilde{{\\mathbf{h}}}_{\\tau}^{n-1}{{\\mathbf{W}}_{v}^{n}}^{\\top} \ud835\udc00 \u03c4 , i , j n = superscript subscript \ud835\udc00 \ud835\udf0f \ud835\udc56 \ud835\udc57 \ud835\udc5b absent \\displaystyle{\\mathbf{A}}_{\\tau,i,j}^{n}= \ud835\udc2a \u03c4 , i n \u22a4 \u200b \ud835\udc24 \u03c4 , j n + \ud835\udc2a \u03c4 , i n \u22a4 \u200b \ud835\udc16 k , R n \u200b \ud835\udc11 i \u2212 j superscript superscript subscript \ud835\udc2a \ud835\udf0f \ud835\udc56 \ud835\udc5b top superscript subscript \ud835\udc24 \ud835\udf0f \ud835\udc57 \ud835\udc5b superscript superscript subscript \ud835\udc2a \ud835\udf0f \ud835\udc56 \ud835\udc5b top superscript subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 \ud835\udc5b subscript \ud835\udc11 \ud835\udc56 \ud835\udc57 \\displaystyle\\,{{\\mathbf{q}}_{\\tau,i}^{n}}^{\\top}{\\mathbf{k}}_{\\tau,j}^{n}+{{\\mathbf{q}}_{\\tau,i}^{n}}^{\\top}{\\mathbf{W}}_{k,R}^{n}{\\mathbf{R}}_{i-j} + u \u22a4 \u200b \ud835\udc24 \u03c4 , j + v \u22a4 \u200b \ud835\udc16 k , R n \u200b \ud835\udc11 i \u2212 j superscript \ud835\udc62 top subscript \ud835\udc24 \ud835\udf0f \ud835\udc57 superscript \ud835\udc63 top superscript subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 \ud835\udc5b subscript \ud835\udc11 \ud835\udc56 \ud835\udc57 \\displaystyle\\,+u^{\\top}{\\mathbf{k}}_{\\tau,j}+v^{\\top}{\\mathbf{W}}_{k,R}^{n}{\\mathbf{R}}_{i-j} \ud835\udc1a \u03c4 n = superscript subscript \ud835\udc1a \ud835\udf0f \ud835\udc5b absent \\displaystyle{\\mathbf{a}}_{\\tau}^{n}= Masked-Softmax \u200b ( \ud835\udc00 \u03c4 n ) \u200b \ud835\udc2f \u03c4 n Masked-Softmax superscript subscript \ud835\udc00 \ud835\udf0f \ud835\udc5b superscript subscript \ud835\udc2f \ud835\udf0f \ud835\udc5b \\displaystyle\\,\\text{Masked-Softmax}({\\mathbf{A}}_{\\tau}^{n}){\\mathbf{v}}_{\\tau}^{n} \ud835\udc28 \u03c4 n = superscript subscript \ud835\udc28 \ud835\udf0f \ud835\udc5b absent \\displaystyle{\\mathbf{o}}_{\\tau}^{n}= LayerNorm \u200b ( Linear \u200b ( \ud835\udc1a \u03c4 n ) + \ud835\udc21 \u03c4 n \u2212 1 ) LayerNorm Linear superscript subscript \ud835\udc1a \ud835\udf0f \ud835\udc5b superscript subscript \ud835\udc21 \ud835\udf0f \ud835\udc5b 1 \\displaystyle\\,\\text{LayerNorm}(\\text{Linear}({\\mathbf{a}}_{\\tau}^{n})+{\\mathbf{h}}_{\\tau}^{n-1}) \ud835\udc21 \u03c4 n = superscript subscript \ud835\udc21 \ud835\udf0f \ud835\udc5b absent \\displaystyle{\\mathbf{h}}_{\\tau}^{n}= Positionwise-Feed-Forward \u200b ( \ud835\udc28 \u03c4 n ) Positionwise-Feed-Forward superscript subscript \ud835\udc28 \ud835\udf0f \ud835\udc5b \\displaystyle\\,\\text{Positionwise-Feed-Forward}({\\mathbf{o}}_{\\tau}^{n})\n\nwith defined as the word embedding sequence.",
    "transformerxl-11": "In addition, it is worth mentioning that a naive way to compute requires computing for all pairs , whose cost is quadratic w.r.t. the sequence length. However, noticing that the value of only ranges from zero to the sequence length, we show a simple computation procedure in Appendix B, which reduces the cost to be linear w.r.t. the sequence length. 4 Experiments\n\n4.1 Main Results\n\nWe apply Transformer-XL to a variety of datasets on both word-level and character-level language modeling to have a comparison with state-of-the-art systems, including WikiText-103 (Merity et al., 2016), enwik8 (LLC, 2009), text8 (LLC, 2009), One Billion Word (Chelba et al., 2013), and Penn Treebank (Mikolov and Zweig, 2012).",
    "transformerxl-12": "WikiText-103 is the largest available word-level language modeling benchmark with long-term dependency. It contains 103M training tokens from 28K articles, with an average length of 3.6K tokens per article, which allows testing the ability of long-term dependency modeling. We set the attention length to 384 during training and 1600 during evaluation. We adopted adaptive softmax and input representations (Baevski and Auli, 2018; Grave et al., 2016a). As shown in Table 1, Transformer-XL reduces the previous state-of-the-art (SoTA) perplexity from 20.5 to 18.3, which demonstrates the superiority of the Transformer-XL architecture. The dataset enwik8 contains 100M bytes of unprocessed Wikipedia text. We compare our architecture with the previous results in Table 2. Under the model size constraint, the 12-layer Transformer-XL achieves a new SoTA result, outperforming the 12-layer vanilla Transformer from Al-Rfou et al. (2018) by 0.05, while both Transformer variants have a large margin over conventional RNN-based models. Notably, our 12-layer architecture achieves the same result as the 64-layer network from Al-Rfou et al. (2018), using only 17% of the parameter budget. In order to see whether better performances can be obtained by increasing the model size, we train 18-layer and 24-layer Transformer-XLs with increased model sizes. With the attention length 784 during training and 3,800 during evaluation, we obtained a new SoTA result and our method is the first to break through 1.0 on widely-studied character-level benchmarks. Different from Al-Rfou et al. (2018), Transformer-XL does not need any auxiliary losses, and thus all benefits are credited to a better architecture. Similar to but different from enwik8, text8 contains 100M processed Wikipedia characters created by lowering case the text and removing any character other than the 26 letters a through z, and space.",
    "transformerxl-13": "Due to the similarity, we simply adapt the best model and the same hyper-parameters on enwik8 to text8 without further tuning. The comparison with previous methods is summarized in Table 3. Again, Transformer-XL achieves the new SoTA result with a clear margin. One Billion Word does not preserve any long-term dependency because sentences have been shuffled. Consequently, this dataset mainly tests the ability of modeling only short-term dependency. The comparison between Transformer-XL and the other methods is shown in Table 4. Although Transformer-XL is mainly designed to better capture longer-term dependency, it dramatically improves the single-model SoTA from 23.7 to 21.8. Specifically, Transformer-XL significantly outperforms a contemporary method using vanilla Transformers Baevski and Auli (2018), suggesting the advantage of Transformer-XL is generalizable to modeling short sequences. We also report the results on word-level Penn Treebank in Table 5. Similar to AWD-LSTM (Merity et al., 2017), we apply variational dropout and weight average to Transformer-XL. With proper regularization, Transformer-XL achieves a new SoTA result among models without two-step finetuning. Penn Treebank has only 1M training tokens, which implies that Transformer-XL also generalizes well even on small datasets. 4.2 Ablation Study\n\nWe conduct two sets of ablation studies to examine the effects of two proposed techniques used in Transformer-XL: the recurrence mechanism and the new positional encoding scheme. The first study is performed on WikiText-103, which requires modeling long-term dependency. The results are reported in Table 6. Among the compared encoding schemes, Shaw et al. (2018) is relative, while Vaswani et al. (2017) and Al-Rfou et al. (2018) are absolute. \u201cFull\u201d and \u201chalf\u201d losses refer to applying a cross entropy loss to all or the recent half positions in the segment. We found that absolute encodings only work well with half losses because half losses exclude positions with very short attention lengths during training for better generalization. Table 6 shows that both the recurrence mechanism and our encoding scheme are necessary to achieve the best performance, as well as generalizing to longer attention sequences during evaluation time. Although the backpropagation length during training is only 128, with the two techniques the attention length can be increased to 640 at test time. In the standard setting with 151M parameters, the perplexity decreases as the attention length increases. Since the recurrence mechanism costs additional memory, we also compare Transformer-XL with baselines under the same GPU memory constraints. As shown in Table 10 in Appendix A, despite using a shorter backpropagation length, Transformer-XL remains superior to the baselines. The second study targets at isolating the effects of resolving the context fragmentation problem from the benefit of capturing longer context length. In order to achieve this goal, we deliberately choose a dataset that does not require long-term dependency, so that any improvement from establishing the recurrence can be attributed to solving the context fragmentation. Specifically, we perform this controlled experiment on the One Billion Word dataset, which can only benefit from removing the context fragmentation. We train a 20-layer Transformer-XL with 0.3B parameters for 400K steps. As shown in Table 7, using segment-level recurrence substantially improves performance even when long-term dependency is not needed, which is consistent with our previous discussion that the recurrence mechanism resolves the context fragmentation problem. Moreover, our relative positional encodings is also superior to Shaw et al. (2018) on short sequences. 4.3 Relative Effective Context Length\n\nKhandelwal et al. (2018) proposed a method to evaluate the Effective Context Length (ECL) of a sequence model. ECL is the longest length to which increasing the context span would lead to a gain more than a threshold. However, ECL ignores the fact that it is harder to get improvement when a model already achieves a lower perplexity using only a shorter context, and thus it is not suitable for fair comparison among multiple models. We instead propose a new metric called Relative Effective Context Length (RECL). RECL is defined on a model group instead of a single model, and the gain of a long context is measure by the relative improvement over the best short context model. As such, the model group shares the same baseline to enable fair comparison. RECL also has a parameter , which means constraining the comparison on top- hard examples. See Appedix C for more details about RECL. As shown in Table 8, Transformer-XL manages to model dependency of 900 words long on average with . The RECL of Transformer-XL is 80% and 450% longer than recurrent networks and Transformer respectively. Both the recurrence mechanism and our positional encodings contribute to a longer RECL. This further substantiates our argument that Transformer-XL is able to model longer-term dependency. 4.4 Generated Text\n\nTrained only on WikiText-103 which is medium-sized, Transformer-XL is already able to generate relatively coherent articles with thousands of tokens without manual cherry picking, despite minor flaws. Please refer to Appendix E for samples. 4.5 Evaluation Speed\n\nFinally, we compare the evaluation speed of our model with the vanilla Transformer model Al-Rfou et al. (2018). As shown in Table 9, due to the state reuse scheme, Transformer-XL achieves an up to 1,874 times speedup during evaluation. 5 Conclusions\n\nTransformer-XL obtains strong perplexity results, models longer-term dependency than RNNs and Transformer, achieves substantial speedup during evaluation, and is able to generate coherent text articles. We envision interesting applications of Transformer-XL in the fields of text generation, unsupervised feature learning, image and speech modeling. Acknowledgments\n\nZD and YY were supported in part by National Science Foundation (NSF) under the grant IIS-1546329 and by the DOE-Office of Science under the grant ASCR #KJ040201. ZY and RS were supported in part by the Office of Naval Research grant N000141812861, the NSF grant IIS1763562, the Nvidia fellowship, and the Siebel scholarship. References\n\nAl-Rfou et al. (2018) Rami Al-Rfou, Dokook Choe, Noah Constant, Mandy Guo, and Llion Jones. 2018. Character-level language modeling with deeper self-attention. arXiv preprint arXiv:1808.04444. Baevski and Auli (2018) Alexei Baevski and Michael Auli. 2018. Adaptive input representations for neural language modeling. arXiv preprint arXiv:1809.10853. Bahdanau et al. (2014) Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2014. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473. Bai et al. (2018) Shaojie Bai, J Zico Kolter, and Vladlen Koltun. 2018. An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. arXiv preprint arXiv:1803.01271. Bengio et al. (2003) Yoshua Bengio, R\u00e9jean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A neural probabilistic language model. Journal of machine learning research, 3(Feb):1137\u20131155. Chelba et al. (2013) Ciprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge, Thorsten Brants, Phillipp Koehn, and Tony Robinson. 2013. One billion word benchmark for measuring progress in statistical language modeling.",
    "transformerxl-14": "arXiv preprint arXiv:1312.3005. Chung et al. (2016) Junyoung Chung, Sungjin Ahn, and Yoshua Bengio. 2016. Hierarchical multiscale recurrent neural networks. arXiv preprint arXiv:1609.01704. Cooijmans et al. (2016) Tim Cooijmans, Nicolas Ballas, C\u00e9sar Laurent, \u00c7a\u011flar G\u00fcl\u00e7ehre, and Aaron Courville. 2016. Recurrent batch normalization. arXiv preprint arXiv:1603.09025. Dai and Le (2015) Andrew M Dai and Quoc V Le. 2015. Semi-supervised sequence learning. In Advances in neural information processing systems, pages 3079\u20133087. Dauphin et al. (2016) Yann N Dauphin, Angela Fan, Michael Auli, and David Grangier. 2016. Language modeling with gated convolutional networks. arXiv preprint arXiv:1612.08083. Devlin et al. (2018) Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. Bert: Pre-training of deep bidirectional transformers for language understanding.",
    "transformerxl-15": "arXiv preprint arXiv:1810.04805. Dieng et al. (2016) Adji B Dieng, Chong Wang, Jianfeng Gao, and John Paisley. 2016. Topicrnn: A recurrent neural network with long-range semantic dependency. arXiv preprint arXiv:1611.01702. Gal and Ghahramani (2016) Yarin Gal and Zoubin Ghahramani. 2016. A theoretically grounded application of dropout in recurrent neural networks. In Advances in neural information processing systems, pages 1019\u20131027. Grave et al. (2016a) Edouard Grave, Armand Joulin, Moustapha Ciss\u00e9, David Grangier, and Herv\u00e9 J\u00e9gou. 2016a. Efficient softmax approximation for gpus. arXiv preprint arXiv:1609.04309. Grave et al. (2016b) Edouard Grave, Armand Joulin, and Nicolas Usunier. 2016b. Improving neural language models with a continuous cache. arXiv preprint arXiv:1612.04426. Graves (2013) Alex Graves. 2013. Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850. Graves et al. (2014) Alex Graves, Greg Wayne, and Ivo Danihelka. 2014. Neural turing machines. arXiv preprint arXiv:1410.5401. Ha et al. (2016) David Ha, Andrew Dai, and Quoc V Le. 2016. Hypernetworks. arXiv preprint arXiv:1609.09106. Hochreiter et al. (2001) Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, J\u00fcrgen Schmidhuber, et al. 2001. Gradient flow in recurrent nets: the difficulty of learning long-term dependencies. Hochreiter and Schmidhuber (1997) Sepp Hochreiter and J\u00fcrgen Schmidhuber. 1997. Long short-term memory. Neural computation, 9(8):1735\u20131780. Huang et al. (2018) Cheng-Zhi Anna Huang, Ashish Vaswani, Jakob Uszkoreit, Noam Shazeer, Curtis Hawthorne, Andrew M Dai, Matthew D Hoffman, and Douglas Eck. 2018. An improved relative self-attention mechanism for transformer with application to music generation. arXiv preprint arXiv:1809.04281. Inan et al. (2016) Hakan Inan, Khashayar Khosravi, and Richard Socher. 2016. Tying word vectors and word classifiers: A loss framework for language modeling. arXiv preprint arXiv:1611.01462. Ji et al. (2015) Yangfeng Ji, Trevor Cohn, Lingpeng Kong, Chris Dyer, and Jacob Eisenstein. 2015. Document context language models. arXiv preprint arXiv:1511.03962. Jozefowicz et al. (2016) Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. 2016. Exploring the limits of language modeling. arXiv preprint arXiv:1602.02410. Kalchbrenner et al. (2016) Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Koray Kavukcuoglu. 2016. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099. Kanai et al. (2018) Sekitoshi Kanai, Yasuhiro Fujiwara, Yuki Yamanaka, and Shuichi Adachi. 2018. Sigsoftmax: Reanalysis of the softmax bottleneck.",
    "transformerxl-16": "arXiv preprint arXiv:1805.10829. Ke et al. (2018) Nan Rosemary Ke, Anirudh Goyal ALIAS PARTH GOYAL, Olexa Bilaniuk, Jonathan Binas, Michael C Mozer, Chris Pal, and Yoshua Bengio. 2018. Sparse attentive backtracking: Temporal credit assignment through reminding.",
    "transformerxl-17": "In Advances in Neural Information Processing Systems, pages 7650\u20137661. Khandelwal et al. (2018) Urvashi Khandelwal, He He, Peng Qi, and Dan Jurafsky. 2018. Sharp nearby, fuzzy far away: How neural language models use context. arXiv preprint arXiv:1805.04623.",
    "transformerxl-18": "Knol (2017) Bryon Knol. 2017. cmix v13. http://www.byronknoll.com/cmix.html. Koutnik et al. (2014) Jan Koutnik, Klaus Greff, Faustino Gomez, and Juergen Schmidhuber. 2014. A clockwork rnn. arXiv preprint arXiv:1402.3511. Krause et al. (2016) Ben Krause, Liang Lu, Iain Murray, and Steve Renals. 2016. Multiplicative lstm for sequence modelling. arXiv preprint arXiv:1609.07959. Kuchaiev and Ginsburg (2017) Oleksii Kuchaiev and Boris Ginsburg. 2017. Factorization tricks for lstm networks. arXiv preprint arXiv:1703.10722. Le et al. (2015) Quoc V Le, Navdeep Jaitly, and Geoffrey E Hinton. 2015. A simple way to initialize recurrent networks of rectified linear units.",
    "transformerxl-19": "arXiv preprint arXiv:1504.00941. Li et al. (2018) Shuai Li, Wanqing Li, Chris Cook, Ce Zhu, and Yanbo Gao. 2018. Independently recurrent neural network (indrnn): Building a longer and deeper rnn.",
    "transformerxl-20": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 5457\u20135466. Liu et al. (2018) Hanxiao Liu, Karen Simonyan, and Yiming Yang. 2018. Darts: Differentiable architecture search. arXiv preprint arXiv:1806.09055.",
    "transformerxl-21": "LLC (2009) MultiMedia LLC. 2009. Large text compression benchmark. Melis et al. (2018) G\u00e1bor Melis, Charles Blundell, Tom\u00e1\u0161 Ko\u010disk\u1ef3, Karl Moritz Hermann, Chris Dyer, and Phil Blunsom. 2018. Pushing the bounds of dropout. arXiv preprint arXiv:1805.09208. Merity et al. (2017) Stephen Merity, Nitish Shirish Keskar, and Richard Socher. 2017. Regularizing and optimizing lstm language models. arXiv preprint arXiv:1708.02182. Merity et al. (2018) Stephen Merity, Nitish Shirish Keskar, and Richard Socher. 2018. An analysis of neural language modeling at multiple scales. arXiv preprint arXiv:1803.08240. Merity et al. (2016) Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. 2016. Pointer sentinel mixture models. arXiv preprint arXiv:1609.07843. Mikolov et al. (2014) Tomas Mikolov, Armand Joulin, Sumit Chopra, Michael Mathieu, and Marc\u2019Aurelio Ranzato. 2014. Learning longer memory in recurrent neural networks. arXiv preprint arXiv:1412.7753. Mikolov et al. (2010) Tom\u00e1\u0161 Mikolov, Martin Karafi\u00e1t, Luk\u00e1\u0161 Burget, Jan \u010cernock\u1ef3, and Sanjeev Khudanpur. 2010. Recurrent neural network based language model. In Eleventh Annual Conference of the International Speech Communication Association. Mikolov and Zweig (2012) Tomas Mikolov and Geoffrey Zweig. 2012. Context dependent recurrent neural network language model. SLT, 12(234-239):8. Morin and Bengio (2005) Frederic Morin and Yoshua Bengio. 2005. Hierarchical probabilistic neural network language model. In Aistats, volume 5, pages 246\u2013252. Citeseer. Mujika et al. (2017) Asier Mujika, Florian Meier, and Angelika Steger. 2017. Fast-slow recurrent neural networks. In Advances in Neural Information Processing Systems, pages 5915\u20135924. Pascanu et al. (2012) Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. 2012. Understanding the exploding gradient problem.",
    "transformerxl-22": "CoRR, abs/1211.5063. Peters et al. (2018) Matthew E Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. 2018. Deep contextualized word representations. arXiv preprint arXiv:1802.05365. Pham et al. (2018) Hieu Pham, Melody Y Guan, Barret Zoph, Quoc V Le, and Jeff Dean. 2018. Efficient neural architecture search via parameter sharing. arXiv preprint arXiv:1802.03268. Press and Wolf (2016) Ofir Press and Lior Wolf. 2016. Using the output embedding to improve language models. arXiv preprint arXiv:1608.05859. Radford et al. (2018) Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018. Improving language understanding by generative pre-training. URL https://s3-us-west-2. amazonaws. com/openai-assets/research-covers/languageunsupervised/language understanding paper.",
    "transformerxl-23": "pdf. Rae et al. (2018) Jack W Rae, Chris Dyer, Peter Dayan, and Timothy P Lillicrap. 2018. Fast parametric learning with activation memorization.",
    "transformerxl-24": "arXiv preprint arXiv:1803.10049. Shaw et al. (2018) Peter Shaw, Jakob Uszkoreit, and Ashish Vaswani. 2018. Self-attention with relative position representations. arXiv preprint arXiv:1803.02155. Shazeer et al. (2018) Noam Shazeer, Youlong Cheng, Niki Parmar, Dustin Tran, Ashish Vaswani, Penporn Koanantakool, Peter Hawkins, HyoukJoong Lee, Mingsheng Hong, Cliff Young, et al. 2018. Mesh-tensorflow: Deep learning for supercomputers. In Advances in Neural Information Processing Systems, pages 10434\u201310443. Shazeer et al. (2017) Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton, and Jeff Dean. 2017. Outrageously large neural networks: The sparsely-gated mixture-of-experts layer. arXiv preprint arXiv:1701.06538. Shazeer et al. (2014) Noam Shazeer, Joris Pelemans, and Ciprian Chelba. 2014. Skip-gram language modeling using sparse non-negative matrix probability estimation.",
    "transformerxl-25": "arXiv preprint arXiv:1412.1454. Trinh et al. (2018) Trieu H Trinh, Andrew M Dai, Thang Luong, and Quoc V Le. 2018. Learning longer-term dependencies in rnns with auxiliary losses. arXiv preprint arXiv:1803.00144. Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems, pages 5998\u20136008. Wang and Cho (2015) Tian Wang and Kyunghyun Cho. 2015. Larger-context language modelling. arXiv preprint arXiv:1511.03729. Wang et al. (2017) Wenlin Wang, Zhe Gan, Wenqi Wang, Dinghan Shen, Jiaji Huang, Wei Ping, Sanjeev Satheesh, and Lawrence Carin. 2017. Topic compositional neural language model. arXiv preprint arXiv:1712.09783. Weston et al. (2014) Jason Weston, Sumit Chopra, and Antoine Bordes. 2014. Memory networks. arXiv preprint arXiv:1410.3916. Wu et al. (2016) Yuhuai Wu, Saizheng Zhang, Ying Zhang, Yoshua Bengio, and Ruslan R Salakhutdinov. 2016. On multiplicative integration with recurrent neural networks. In Advances in neural information processing systems, pages 2856\u20132864. Yang et al. (2017) Zhilin Yang, Zihang Dai, Ruslan Salakhutdinov, and William W Cohen. 2017. Breaking the softmax bottleneck: A high-rank rnn language model. arXiv preprint arXiv:1711.03953. Zaremba et al. (2014) Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. 2014. Recurrent neural network regularization. arXiv preprint arXiv:1409.2329. Zilly et al. (2016) Julian Georg Zilly, Rupesh Kumar Srivastava, Jan Koutn\u00edk, and J\u00fcrgen Schmidhuber. 2016. Recurrent highway networks. arXiv preprint arXiv:1607.03474. Zoph and Le (2016) Barret Zoph and Quoc V Le. 2016. Neural architecture search with reinforcement learning. arXiv preprint arXiv:1611.01578. Appendix A Ablation Study with Memory Constraints\n\nTable 10 compares Transformer-XL with baseline under the same memory budget. Transformer-XL still outperforms the baseline even with a shorter backprop length. Appendix B Efficient Computation of the Attention with Relative Positional Embedding\n\nAs we discussed in section 3.3, the naive way of computing the for all pairs is subject to a quadratic cost. Here, we present a simple method with only a linear cost. Firstly, notice that the relative distance can only be integer from 0 to , where and are the memory length and segment length respectively. Hence, the rows of the matrix\n\n\ud835\udc10 \u2254 [ \ud835\udc11 M + L \u2212 1 \u22a4 \ud835\udc11 M + L \u2212 2 \u22a4 \u22ee \ud835\udc11 1 \u22a4 \ud835\udc11 0 \u22a4 ] \u200b \ud835\udc16 k , R \u22a4 = [ [ \ud835\udc16 k , R \u200b \ud835\udc11 M + L \u2212 1 ] \u22a4 [ \ud835\udc16 k , R \u200b \ud835\udc11 M + L \u2212 2 ] \u22a4 \u22ee [ \ud835\udc16 k , R \u200b \ud835\udc11 1 ] \u22a4 [ \ud835\udc16 k , R \u200b \ud835\udc11 0 ] \u22a4 ] \u2208 \u211d ( M + L ) \u00d7 d \u2254 \ud835\udc10 matrix superscript subscript \ud835\udc11 \ud835\udc40 \ud835\udc3f 1 top superscript subscript \ud835\udc11 \ud835\udc40 \ud835\udc3f 2 top \u22ee superscript subscript \ud835\udc11 1 top superscript subscript \ud835\udc11 0 top superscript subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 top matrix superscript delimited-[] subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc40 \ud835\udc3f 1 top superscript delimited-[] subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc40 \ud835\udc3f 2 top \u22ee superscript delimited-[] subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 1 top superscript delimited-[] subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 0 top superscript \u211d \ud835\udc40 \ud835\udc3f \ud835\udc51 {\\mathbf{Q}}\\coloneqq\\begin{bmatrix}{\\mathbf{R}}_{M+L-1}^{\\top}\\\\\n{\\mathbf{R}}_{M+L-2}^{\\top}\\\\\n\\vdots\\\\\n{\\mathbf{R}}_{1}^{\\top}\\\\\n{\\mathbf{R}}_{0}^{\\top}\\end{bmatrix}{{\\mathbf{W}}_{k,R}}^{\\top}=\\begin{bmatrix}\\left[{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{M+L-1}\\right]^{\\top}\\\\\n\\left[{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{M+L-2}\\right]^{\\top}\\\\\n\\vdots\\\\\n\\left[{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{1}\\right]^{\\top}\\\\\n\\left[{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{0}\\right]^{\\top}\\end{bmatrix}\\in\\mathbb{R}^{(M+L)\\times d}\n\nconsist of all possible vector outputs of for any . Note that we have defined in a reversed order, i.e., , to make further discussion easier. Next, we collect the term for all possible into the following matrix,\n\n\ud835\udc01 \ud835\udc01 \\displaystyle{\\mathbf{B}} = [ q 0 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 M \u22ef q 0 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 0 0 \u22ef 0 q 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 M + 1 \u22ef q 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 1 q 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 0 \u22ef 0 \u22ee \u22ee \u22ee \u22ee \u22f1 \u22ee q L \u2212 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 M + L \u2212 1 \u22ef q L \u2212 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 M + L \u2212 1 q L \u2212 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 L \u2212 1 \u22ef q L \u2212 1 \u22a4 \u200b \ud835\udc16 k , R \u200b \ud835\udc11 0 ] absent matrix superscript subscript \ud835\udc5e 0 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc40 \u22ef superscript subscript \ud835\udc5e 0 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 0 0 \u22ef 0 superscript subscript \ud835\udc5e 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc40 1 \u22ef superscript subscript \ud835\udc5e 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 1 superscript subscript \ud835\udc5e 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 0 \u22ef 0 \u22ee \u22ee \u22ee \u22ee \u22f1 \u22ee superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc40 \ud835\udc3f 1 \u22ef superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc40 \ud835\udc3f 1 superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 \ud835\udc3f 1 \u22ef superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc16 \ud835\udc58 \ud835\udc45 subscript \ud835\udc11 0 \\displaystyle=\\begin{bmatrix}q_{0}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{M}&\\cdots&q_{0}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{0}&0&\\cdots&0\\\\\nq_{1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{M+1}&\\cdots&q_{1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{1}&q_{1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{0}&\\cdots&0\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\\nq_{L-1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{M+L-1}&\\cdots&q_{L-1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{M+L-1}&q_{L-1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{L-1}&\\cdots&q_{L-1}^{\\top}{\\mathbf{W}}_{k,R}{\\mathbf{R}}_{0}\\\\\n\\end{bmatrix} = [ q 0 \u22a4 \u200b \ud835\udc10 L \u2212 1 \u22ef q 0 \u22a4 \u200b \ud835\udc10 M + L \u2212 1 0 \u22ef 0 q 1 \u22a4 \u200b \ud835\udc10 L \u2212 2 \u22ef q 1 \u22a4 \u200b \ud835\udc10 M + L \u2212 2 q 1 \u22a4 \u200b \ud835\udc10 M + L \u2212 1 \u22ef 0 \u22ee \u22ee \u22f1 \u22ee \u22f1 \u22ee q L \u2212 1 \u22a4 \u200b \ud835\udc10 0 \u22ef q L \u2212 1 \u22a4 \u200b \ud835\udc10 M q L \u2212 1 \u22a4 \u200b \ud835\udc10 M + 1 \u22ef q L \u2212 1 \u22a4 \u200b \ud835\udc10 M + L \u2212 1 ] absent matrix superscript subscript \ud835\udc5e 0 top subscript \ud835\udc10 \ud835\udc3f 1 \u22ef superscript subscript \ud835\udc5e 0 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 0 \u22ef 0 superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 \ud835\udc3f 2 \u22ef superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 2 superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \u22ef 0 \u22ee \u22ee \u22f1 \u22ee \u22f1 \u22ee superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 0 \u22ef superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 \ud835\udc40 superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 \ud835\udc40 1 \u22ef superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \\displaystyle=\\begin{bmatrix}q_{0}^{\\top}{\\mathbf{Q}}_{L-1}&\\cdots&q_{0}^{\\top}{\\mathbf{Q}}_{M+L-1}&0&\\cdots&0\\\\\nq_{1}^{\\top}{\\mathbf{Q}}_{L-2}&\\cdots&q_{1}^{\\top}{\\mathbf{Q}}_{M+L-2}&q_{1}^{\\top}{\\mathbf{Q}}_{M+L-1}&\\cdots&0\\\\\n\\vdots&\\vdots&\\ddots&\\vdots&\\ddots&\\vdots\\\\\nq_{L-1}^{\\top}{\\mathbf{Q}}_{0}&\\cdots&q_{L-1}^{\\top}{\\mathbf{Q}}_{M}&q_{L-1}^{\\top}{\\mathbf{Q}}_{M+1}&\\cdots&q_{L-1}^{\\top}{\\mathbf{Q}}_{M+L-1}\\\\\n\\end{bmatrix}\n\nThen, we further define\n\n\ud835\udc01 ~ = \ud835\udc2a\ud835\udc10 \u22a4 = [ q 0 \u22a4 \u200b \ud835\udc10 0 \u22ef q 0 \u22a4 \u200b \ud835\udc10 M q 0 \u22a4 \u200b \ud835\udc10 M + 1 \u22ef q 0 \u22a4 \u200b \ud835\udc10 M + L \u2212 1 q 1 \u22a4 \u200b \ud835\udc10 0 \u22ef q 1 \u22a4 \u200b \ud835\udc10 M q 1 \u22a4 \u200b \ud835\udc10 M + 1 \u22ef q 1 \u22a4 \u200b \ud835\udc10 M + L \u2212 1 \u22ee \u22ee \u22f1 \u22ee \u22f1 \u22ee q L \u2212 1 \u22a4 \u200b \ud835\udc10 0 \u22ef q L \u2212 1 \u22a4 \u200b \ud835\udc10 M q L \u2212 1 \u22a4 \u200b \ud835\udc10 M + 1 \u22ef q L \u2212 1 \u22a4 \u200b \ud835\udc10 M + L \u2212 1 ] . ~ \ud835\udc01 superscript \ud835\udc2a\ud835\udc10 top matrix superscript subscript \ud835\udc5e 0 top subscript \ud835\udc10 0 \u22ef superscript subscript \ud835\udc5e 0 top subscript \ud835\udc10 \ud835\udc40 superscript subscript \ud835\udc5e 0 top subscript \ud835\udc10 \ud835\udc40 1 \u22ef superscript subscript \ud835\udc5e 0 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 0 \u22ef superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 \ud835\udc40 superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 \ud835\udc40 1 \u22ef superscript subscript \ud835\udc5e 1 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \u22ee \u22ee \u22f1 \u22ee \u22f1 \u22ee superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 0 \u22ef superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 \ud835\udc40 superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 \ud835\udc40 1 \u22ef superscript subscript \ud835\udc5e \ud835\udc3f 1 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \\widetilde{{\\mathbf{B}}}={\\mathbf{q}}{\\mathbf{Q}}^{\\top}=\\begin{bmatrix}q_{0}^{\\top}{\\mathbf{Q}}_{0}&\\cdots&q_{0}^{\\top}{\\mathbf{Q}}_{M}&q_{0}^{\\top}{\\mathbf{Q}}_{M+1}&\\cdots&q_{0}^{\\top}{\\mathbf{Q}}_{M+L-1}\\\\\nq_{1}^{\\top}{\\mathbf{Q}}_{0}&\\cdots&q_{1}^{\\top}{\\mathbf{Q}}_{M}&q_{1}^{\\top}{\\mathbf{Q}}_{M+1}&\\cdots&q_{1}^{\\top}{\\mathbf{Q}}_{M+L-1}\\\\\n\\vdots&\\vdots&\\ddots&\\vdots&\\ddots&\\vdots\\\\\nq_{L-1}^{\\top}{\\mathbf{Q}}_{0}&\\cdots&q_{L-1}^{\\top}{\\mathbf{Q}}_{M}&q_{L-1}^{\\top}{\\mathbf{Q}}_{M+1}&\\cdots&q_{L-1}^{\\top}{\\mathbf{Q}}_{M+L-1}\\\\\n\\end{bmatrix}.",
    "transformerxl-26": "Now, it is easy to see an immediate relationship between and , where the -th row of is simply a left-shifted version of -th row of . Hence, the computation of only requires a matrix multiplication to compute and then a set of left-shifts. Similarly, we can collect all term for all possible into another matrix ,\n\n\ud835\udc03 \ud835\udc03 \\displaystyle{\\mathbf{D}} = [ v \u22a4 \u200b \ud835\udc10 L \u2212 1 \u22ef v \u22a4 \u200b \ud835\udc10 M + L \u2212 1 0 \u22ef 0 v \u22a4 \u200b \ud835\udc10 L \u2212 2 \u22ef v \u22a4 \u200b \ud835\udc10 M + L \u2212 2 v \u22a4 \u200b \ud835\udc10 M + L \u2212 1 \u22ef 0 \u22ee \u22ee \u22f1 \u22ee \u22f1 \u22ee v \u22a4 \u200b \ud835\udc10 0 \u22ef v \u22a4 \u200b \ud835\udc10 M v \u22a4 \u200b \ud835\udc10 M + 1 \u22ef v \u22a4 \u200b \ud835\udc10 M + L \u2212 1 ] . absent matrix superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc3f 1 \u22ef superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 0 \u22ef 0 superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc3f 2 \u22ef superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 2 superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \u22ef 0 \u22ee \u22ee \u22f1 \u22ee \u22f1 \u22ee superscript \ud835\udc63 top subscript \ud835\udc10 0 \u22ef superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 1 \u22ef superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \\displaystyle=\\begin{bmatrix}v^{\\top}{\\mathbf{Q}}_{L-1}&\\cdots&v^{\\top}{\\mathbf{Q}}_{M+L-1}&0&\\cdots&0\\\\\nv^{\\top}{\\mathbf{Q}}_{L-2}&\\cdots&v^{\\top}{\\mathbf{Q}}_{M+L-2}&v^{\\top}{\\mathbf{Q}}_{M+L-1}&\\cdots&0\\\\\n\\vdots&\\vdots&\\ddots&\\vdots&\\ddots&\\vdots\\\\\nv^{\\top}{\\mathbf{Q}}_{0}&\\cdots&v^{\\top}{\\mathbf{Q}}_{M}&v^{\\top}{\\mathbf{Q}}_{M+1}&\\cdots&v^{\\top}{\\mathbf{Q}}_{M+L-1}\\\\\n\\end{bmatrix}. Then, we can follow the same procedure to define\n\n\ud835\udc1d ~ = [ \ud835\udc10 \u200b v ] \u22a4 = [ v \u22a4 \u200b \ud835\udc10 0 \u22ef v \u22a4 \u200b \ud835\udc10 M v \u22a4 \u200b \ud835\udc10 M + 1 \u22ef v \u22a4 \u200b \ud835\udc10 M + L \u2212 1 ] . ~ \ud835\udc1d superscript delimited-[] \ud835\udc10 \ud835\udc63 top matrix superscript \ud835\udc63 top subscript \ud835\udc10 0 \u22ef superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 1 \u22ef superscript \ud835\udc63 top subscript \ud835\udc10 \ud835\udc40 \ud835\udc3f 1 \\widetilde{{\\mathbf{d}}}=\\left[{\\mathbf{Q}}v\\right]^{\\top}=\\begin{bmatrix}v^{\\top}{\\mathbf{Q}}_{0}&\\cdots&v^{\\top}{\\mathbf{Q}}_{M}&v^{\\top}{\\mathbf{Q}}_{M+1}&\\cdots&v^{\\top}{\\mathbf{Q}}_{M+L-1}\\end{bmatrix}.",
    "transformerxl-27": "Again, each row of is simply a left-shift version of . Hence, the main computation cost comes from the matrix-vector multiplication , which is not expensive any more. Appendix C Details About RECL\n\nIn this section, we describe the details of the metric RECL. Let be a model group consisting of models. Let denote the loss of model on the -th token in the corpus with a context length . Concretely, the loss can be written as\n\nl i \u200b ( c , t ) = \u2212 log \u2061 P m i \u200b ( x t | x t \u2212 1 , \u22ef , x t \u2212 c ) subscript \ud835\udc59 \ud835\udc56 \ud835\udc50 \ud835\udc61 subscript \ud835\udc43 subscript \ud835\udc5a \ud835\udc56 conditional subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc65 \ud835\udc61 1 \u22ef subscript \ud835\udc65 \ud835\udc61 \ud835\udc50 l_{i}(c,t)=-\\log P_{m_{i}}(x_{t}|x_{t-1},\\cdots,x_{t-c})\n\nwhere is the probability distribution given by model , and is the -th token in the corpus. Given a short context length and a long context length such that , we can further define a baseline for each position ,\n\nb \u200b ( c , t ) = min i = 1 N \u2061 l i \u200b ( c , t ) \ud835\udc4f \ud835\udc50 \ud835\udc61 superscript subscript \ud835\udc56 1 \ud835\udc41 subscript \ud835\udc59 \ud835\udc56 \ud835\udc50 \ud835\udc61 b(c,t)=\\min_{i=1}^{N}l_{i}(c,t)\n\nThe relative loss of w.r.t. the model group is written as\n\nf i \u200b ( c , c \u2032 ) = 1 | \ud835\udcaf | \u200b \u2211 t \u2208 \ud835\udcaf min \u2061 ( b \u200b ( c , t ) , l i \u200b ( c \u2032 , t ) ) subscript \ud835\udc53 \ud835\udc56 \ud835\udc50 superscript \ud835\udc50 \u2032 1 \ud835\udcaf subscript \ud835\udc61 \ud835\udcaf \ud835\udc4f \ud835\udc50 \ud835\udc61 subscript \ud835\udc59 \ud835\udc56 superscript \ud835\udc50 \u2032 \ud835\udc61 f_{i}(c,c^{\\prime})=\\frac{1}{|\\mathcal{T}|}\\sum_{t\\in\\mathcal{T}}\\min\\left(b(c,t),l_{i}(c^{\\prime},t)\\right)\n\nThe above equation uses the minimum loss of all models on the short length as a baseline, and only losses smaller than the baseline will be effectively counted towards the relative loss. This enables fair comparison between multiple models because all models with a long context length need to improve over the same baseline. Sometimes we only care about those positions where the baseline performs poorly (which means short-term dependency with context length is not sufficient), so given a ratio parameter , we define the set is the above equation as\n\n\ud835\udcaf = top- \u200b r \u200b positions \u200b t \u200b with largest \u200b b \u200b ( c , t ) \ud835\udcaf top- \ud835\udc5f positions \ud835\udc61 with largest \ud835\udc4f \ud835\udc50 \ud835\udc61 \\mathcal{T}=\\text{top-}r\\text{\\leavevmode\\nobreak\\ positions\\leavevmode\\nobreak\\ }t\\text{\\leavevmode\\nobreak\\ with largest\\leavevmode\\nobreak\\ }b(c,t)\n\nThe relative gain is subsequently defined as the relative perplexity reduction:\n\ng i \u200b ( c , c \u2032 ) = exp \u2061 f i \u200b ( c , c ) \u2212 exp \u2061 f i \u200b ( c , c \u2032 ) exp \u2061 f i \u200b ( c , c ) subscript \ud835\udc54 \ud835\udc56 \ud835\udc50 superscript \ud835\udc50 \u2032 subscript \ud835\udc53 \ud835\udc56 \ud835\udc50 \ud835\udc50 subscript \ud835\udc53 \ud835\udc56 \ud835\udc50 superscript \ud835\udc50 \u2032 subscript \ud835\udc53 \ud835\udc56 \ud835\udc50 \ud835\udc50 g_{i}(c,c^{\\prime})=\\frac{\\exp f_{i}(c,c)-\\exp f_{i}(c,c^{\\prime})}{\\exp f_{i}(c,c)}\n\nGiven a step size , we then use an algorithm to find the RECL by thresholding the relative gain:\n\n1.",
    "transformerxl-28": "Set initial short context length , and long context length\n\n2.",
    "transformerxl-29": "Compute . If , return . If , set and go to step 1. In Figure 3, we visualize the unnormalized relative perplexity gains with various pairs of when . It is clear that Transformer-XL has a longer RECL compared to RNNs and other baselines because the relative gains are substantially larger.",
    "transformerxl-30": "For reference, we plot the perplexities with varying context lengths in Figure 4. The y-axis denotes the \u201cnormal\u201d perplexity (not calibrated by baselines). Appendix D Attention Visualization\n\nIn this section, we provide some visualization of the attention learned by the SoTA model on the WikiText-103 validation set. Recall that, this model has 16 10-head transformer layers and relies on a memory of length 640. The first visualization aims at revealing the overall trend of where the model is attending. Specifically, for each attention head of each layer, we average the attention distributions of all tokens in the validation set.",
    "transformerxl-31": "This is shown in Fig. 5. As we can see, the overall trend is to focus more on the nearby tokens than the faraway ones. However, it is also very clear that some attention heads have a wider attention distribution over the entire memory span, notably the head 8 from layer 1, head 78 from layer 8, and the head 158 from layer 16. Since we are focused on learning long-range dependency, we are especially interested in these heads with a wider attention span. Thus, in the second set of visualization, we pick the three notable heads mentioned above, and visualize their attention behavior for a randomly chosen position, as shown in Fig. 6. Here, we see three different patterns of wider attention:\n\n\u2022\n\nFor the head 8 in the 1st layer, we see an almost uniform attention over the entire memory span. This is quite intuitive, as lower-level layers needs to screen the entire memory span to decide where to focus for higher-level layers\n\n\u2022\n\nFor the head 78 in the 8th layer (a middle-level layer), we see a very sparse attention pattern scattered in all ranges of the memory. Again, this well fits our intuition that as information accumulates, the network may focus on some particular position with special interests. \u2022\n\nFor the head 158 in the 16th layer (i.e. the last layer), each target location (corresponding to each row) has its own distinct sparse focus, differing from head 78 where target locations largely share the same attentive location in memory. Meanwhile, the pattern is also different from the case of head 8, where a few locations are clearly attended more than others. Finally, as we have discussed in section 3.3, the attention score can be decomposed into four intuitive terms. Here, we want to further investigate how these four terms contribute to the overall attention trend in Fig. 5. Since the term represents the global content bias, i.e., the prior importance of each word regardless of the context, we will leave it out and focus on the terms , and . So, for each term, we take the Softmax w.r.t. the memory span and average the resulted distribution of all tokens in the validation set. The results are visualized in Fig. 7:\n\n\u2022\n\nSince term is fully content-based addressing, when averaging over all target words, the result is essentially uniform over the entire context, except for a few very close words, which are likely to be semantically similar to the target word. \u2022\n\nThe overall trend of term highly resembles that of the entire attention distribution in Fig. 5. It suggests that the global trend of focusing on the nearby context is largely contributed by this content-dependent positional bias. \u2022\n\nThe overall trend of term is also focusing more on nearby words. However, compared to the trend of term , it is clearly flatter and biases towards a longer context. Appendix E Generated Text\n\nIn this section, we present some generated text from our best model trained the Wikitext-103 dataset. We seed the our Transformer-XL with a context of at most 512 consecutive tokens randomly sampled from the test set of Wikitext-103. Then, we run Transformer-XL to generate a pre-defined number of tokens (500 or 1,000 in our case). For each generation step, we first find the top-40 probabilities of the next-step distribution and sample from top-40 tokens based on the re-normalized distribution. To help reading, we detokenize the context, the generated text and the reference text. Three generated examples are shown in Tables 11, 12, and LABEL:tab:gen-3. Note that we do not perform any cherry picking and present the first three examples we generate in the paper. In the text, \u201c= text =\u201d, \u201c= = text = =\u201d and \u201c= = = text = = =\u201d denote the Wikipedia page tile, section title and subsection title, respectively, due to the original data preprocessing procedure of Wikitext-103 Merity et al. (2016). As we can see, though only trained on 100M tokens, Transformer-XL is a strong model at generating long text articles, particularly in the following aspects:\n\n\u2022\n\nTransformer-XL is able to structurally maintain the sectional arrangement of Wikipedia. \u2022\n\nTransformer-XL manages to semantically stay on the same topic throughout the course of generation. \u2022\n\nLong-range references are common in the generated text. \u2022\n\nTransformer-XL often generates novel content that is not present in the training data. For more detailed explanation of the interesting observations in each example, please refer to the corresponding caption. Despite the overall excellence of the generation quality, the model can only perceive the seed context and hallucinate what to generate based on the limited knowledge (100M tokens only) it is trained on. As a result, the generated text sometimes looks clearly relevant but not close enough or to the point compared to what human writer would do. That said, we believe this issue is mostly a problem of limited training data size and could be alleviated by using a larger training set. \u25c4 Feeling lucky? Conversion report Report an issue View original on arXiv\u25ba\n\nCopyright Privacy Policy\n\nGenerated on Sat Mar 16 08:51:28 2024 by LaTeXML"
}