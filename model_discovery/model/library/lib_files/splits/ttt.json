{
    "ttt-0": "Learning to (Learn at Test Time): RNNs with Expressive Hidden States\n\nYu Sun, Xinhao Li\u22172, Karan Dalal\u22173, Jiarui Xu2, Arjun Vikram1, Genghan Zhang1, Yann Dubois1, Xinlei Chen\u20204, Xiaolong Wang\u20202, Sanmi Koyejo\u20201, Tatsunori Hashimoto\u20201, Carlos Guestrin\u20201 Core contributors.",
    "ttt-1": "\u2020 Joint advising. See author contributions at the end of the paper. 1 Stanford University. 2 UC San Diego. 3 UC Berkeley. 4 Meta AI. Correspondence to: yusun@cs.stanford.edu, xil202@ucsd.edu, kdalal@berkeley.edu. Code available in JAX and PyTorch. Abstract\n\nSelf-attention performs well in long context but has quadratic complexity. Existing RNN layers have linear complexity, but their performance in long context is limited by the expressive power of their hidden state. We propose a new class of sequence modeling layers with linear complexity and an expressive hidden state. The key idea is to make the hidden state a machine learning model itself, and the update rule a step of self-supervised learning. Since the hidden state is updated by training even on test sequences, our layers are called Test-Time Training (TTT) layers. We consider two instantiations: TTT-Linear and TTT-MLP, whose hidden state is a linear model and a two-layer MLP respectively. We evaluate our instantiations at the scale of 125M to 1.3B parameters, comparing with a strong Transformer and Mamba, a modern RNN. Both TTT-Linear and TTT-MLP match or exceed the baselines. Similar to Transformer, they can keep reducing perplexity by conditioning on more tokens, while Mamba cannot after 16k context. With preliminary systems optimization, TTT-Linear is already faster than Transformer at 8k context and matches Mamba in wall-clock time. TTT-MLP still faces challenges in memory I/O, but shows larger potential in long context, pointing to a promising direction for future research. 1 Introduction\n\nIn 2020, the OpenAI scaling law paper (Kaplan et. al [40]) showed that LSTMs (a type of RNN) could not scale similarly to Transformers or effectively use long context. Now, with modern RNNs and best practices, we re-evaluate these findings in Figure 2. On the left, we observe that Mamba [26] \u2013 one of the most popular RNNs today \u2013 scales similarly to a strong Transformer, showing great progress since the LSTMs in 2020. However, on the right, we observe the same issue with Mamba as Kaplan et al.",
    "ttt-2": "did with LSTMs. Tokens later in a sequence should be easier to predict on average, since they condition on more information. This is indeed the case for Transformer, whose average perplexity at each token index decreases throughout its 32k context. In contrast, the same metric plateaus for Mamba after 16k. This result represents an awkward reality for existing RNNs. On one hand, the main advantage of RNNs (vs. Transformers) is their linear (vs. quadratic) complexity. This asymptotic advantage is only realized in practice for long context, which according to Figure 3 is after 8k. On the other hand, once context is long enough, existing RNNs such as Mamba struggle to actually take advantage of the extra information being conditioned on. The difficulty with long context is inherent to the very nature of RNN layers: Unlike self-attention, RNN layers have to compress context into a hidden state of fixed size. As a compression heuristic, the update rule needs to discover the underlying structures and relationships among thousands or potentially millions of tokens. In this paper, we begin with the observation that self-supervised learning can compress a massive training set into the weights of a model such as an LLM, which often exhibits deep understanding about the semantic connections among its training data \u2013 exactly what we need from a compression heuristic. TTT layers. Motivated by this observation, we design a new class of sequence modeling layers where the hidden state is a model, and the update rule is a a step of self-supervised learning. Because the process of updating the hidden state on a test sequence is equivalent to training a model at test time, this new class of layers is called Test-Time Training (TTT) layers. We introduce two simple instantiations within this class: TTT-Linear and TTT-MLP, where the hidden state is a linear model and a two-layer MLP, respectively. TTT layers can be integrated into any network architecture and optimized end-to-end, similar to RNNs layers and self-attention. Wall-clock time. While the TTT layer is already efficient in FLOPs, we propose two practical innovations to make it efficient in wall-clock time. First, similar to the standard practice of taking gradient steps on mini-batches of sequences during regular training for better parallelism, we use mini-batches of tokens during TTT. Second, we develop a dual form for operations inside each TTT mini-batch, to better take advantage of modern GPUs and TPUs. The dual form is equivalent in output to the naive implementation, but trains more than faster. As shown in Figure 3, TTT-Linear is faster than Transformer at 8k context and matches Mamba. Evaluations and open problems. While we have highlighted some results for TTT-Linear at the beginning of the paper, Section 3 presents more comprehensive evaluations for both TTT-Linear and TTT-MLP, and open problems exposed by our evaluations. For example, our evaluations following the Chinchilla recipe [34] do not cleanly fit a linear scaling trend even for the Transformer baseline.",
    "ttt-3": "Constrained by our academic resources, we encourage the community to join us in exploring solutions to these problems.",
    "ttt-4": "Summary of contributions. 1. We propose TTT layers, a new class of sequence modeling layers where the hidden state is a model, and the update rule is self-supervised learning. Our perspective that the forward pass of a layer contains a training loop itself opens up a new direction for future research. 2. TTT-Linear, one simple instantiation of TTT layers, outperforms Transformers and Mamba in our evaluations ranging from 125M to 1.3B parameters. 3. We improve the hardware efficiency of TTT layers through mini-batch TTT and the dual form, making TTT-Linear already a practical building block for LLMs. 2 Method\n\nAll sequence modeling layers can be viewed from the perspective of storing historic context into a hidden state, as shown in Figure 4.111 We define a sequence modeling layer as an autoregressive mapping from one sequence to another. For example, RNN layers \u2013 such as LSTM [33], RWKV [56] and Mamba [26] layers \u2013 compress context into a state of fixed size across time. This compression has two consequences. On one hand, mapping an input token to output token is efficient, because both the update rule and output rule take constant time per token. On the other hand, the performance of RNN layers in long context is limited by the expressive power of its hidden state . Self-attention can also be viewed from the perspective above, except that its hidden state, commonly known as the Key-Value (KV) cache, is a list that grows linearly with . Its update rule simply appends the current KV tuple to this list, and the output rule scans over all tuples up to to form the attention matrix. The hidden state explicitly stores all historic context without compression, making self-attention more expressive than RNN layers for long context. However, scanning this linearly growing hidden state also takes linearly growing time per token. To remain both efficient and expressive in long context, we need a better compression heuristic. Specifically, we need to compress thousands or potentially millions of tokens into a hidden state that can effectively capture their underlying structures and relationships. This might sound like a tall order, but all of us are actually already familiar with such a heuristic. 2.1 TTT as updating a hidden state\n\nThe process of parametric learning can be viewed as compressing a massive training set into the weights of a model. Specifically, we know that models trained with self-supervision can capture the underlying structures and relationships behind their training data [48] \u2013 exactly what we need from a compression heuristic. LLMs themselves are great examples. Trained with the self-supervised task of next-token prediction, their weights can be viewed as a compressed form of storage for existing knowledge on the internet. By querying LLMs, we can extract knowledge from their weights. More importantly, LLMs often exhibit a deep understanding of the semantic connections among existing knowledge to express new pieces of reasoning [1]. Our key idea is to use self-supervised learning to compress the historic context into a hidden state , by making the context an unlabeled dataset and the state a model. Concretely, the hidden state is now equivalent to , the weights of a model , which can be a linear model, a small neural network, or anything else. The output rule is simply:\n\nz t = f \u200b ( x t ; W t ) . subscript \ud835\udc67 \ud835\udc61 \ud835\udc53 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 z_{t}=f(x_{t};W_{t}). (1)\n\nIntuitively, the output token is just the prediction on , made by with the updated weights . The update rule is a step of gradient descent on some self-supervised loss :\n\nW t = W t \u2212 1 \u2212 \u03b7 \u200b \u2207 \u2113 \u200b ( W t \u2212 1 ; x t ) , subscript \ud835\udc4a \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 1 \ud835\udf02 \u2207 \u2113 subscript \ud835\udc4a \ud835\udc61 1 subscript \ud835\udc65 \ud835\udc61 W_{t}=W_{t-1}-\\eta\\,\\nabla\\ell(W_{t-1};x_{t}), (2)\n\nwith learning rate .222 For now, consider . We will discuss more sophisticated techniques for initializing in Subsection 2.7. From the compression point of view, every heuristic needs to decide which input to remember or forget. Our remembers inputs that produce large gradients \u2013 intuitively, inputs that make learn a lot. One choice of is reconstructing itself. To make the learning problem nontrivial, we first process into a corrupted input (details in Subsection 2.3), then optimize:\n\n\u2113 \u200b ( W ; x t ) = \u2016 f \u200b ( x ~ t ; W ) \u2212 x t \u2016 2 . \u2113 \ud835\udc4a subscript \ud835\udc65 \ud835\udc61 superscript norm \ud835\udc53 subscript ~ \ud835\udc65 \ud835\udc61 \ud835\udc4a subscript \ud835\udc65 \ud835\udc61 2 \\ell(W;x_{t})=\\|f(\\tilde{x}_{t};W)-x_{t}\\|^{2}. (3)\n\nSimilar to denoising autoencoders [75], needs to discover the correlations between dimensions of in order to reconstruct it from partial information .333 In past experiments, we have also tried adding another model (decoder) after (encoder), such that the reconstruction is produced by instead of only itself. While this heftier design did slightly improve results, it made overall training less stable and added significant computational cost. Therefore we focus on the encoder-only design. As shown in Figure 5, gradient descent is able to reduce , but cannot reduce it to zero. We discuss more sophisticated formulations of the self-supervised task in Subsection 2.3. As with other RNN layers and self-attention, our algorithm that maps an input sequence to output sequence can be programmed into the forward pass of a sequence modeling layer, using the hidden state, update rule, and output rule above. Even at test time, our new layer still trains a different sequence of weights for every input sequence. Therefore, we call it the Test-Time Training (TTT) layer. 2.2 Training a network with TTT layers\n\nThe forward pass of a TTT layer also has a corresponding backward pass. Our forward pass only consists of standard differentiable operators except the gradient operator . However, just maps one function to another, in this case to , and is also composed of differentiable operators. Conceptually, calling backward on means taking gradients of gradients \u2013 a well explored technique in meta-learning [51]. TTT layers have the same interface as RNN layers and self-attention, therefore can be replaced in any larger network architecture, which usually contains many of these sequence modeling layers. Training a network with TTT layers also works the same way as training any other language model, such as a Transformer. The same data, recipe, and objective such as next-token prediction can be used to optimize parameters of the rest of the network. We refer to training the larger network as the outer loop, and training within each TTT layer as the inner loop. An important difference between the two nested learning problems is that the inner-loop gradient is taken w.r.t. , the parameters of , while the outer-loop gradient is taken w.r.t the parameters of the rest of the network, which we will denote by . Throughout this paper, outer-loop parameters are always denoted by with various subscripts. So far, the TTT layer has no outer-loop parameters, in contrast to other RNN layers and self-attention. In Subsection 2.3, we add outer-loop parameters to the TTT layer to improve its self-supervised task. Then in Subsection 2.4 and 2.5, we discuss two ways to improve the wall-clock time of TTT layers. 2.3 Learning a self-supervised task for TTT\n\nArguably the most important part of TTT is the self-supervised task, because it determines the kind of features that will learn from the test sequence. So how should we design this task? The final goal of TTT is for to perform well on language modeling. Instead of handcrafting a self-supervised task from human priors, we take a more end-to-end approach \u2013 directly optimizing the self-supervised task for the final goal of next-token prediction. Concretely, we learn the self-supervised task as part of the outer loop. Starting from the naive reconstruction task in Equation 3, we add some outer-loop parameters to make this task learnable. In Subsection 2.1, we did not specify the corruption that produces from . One design is to make it a low-rank projection , where is a learnable matrix.444 The subscript hints at a connection to self-attention, as we will establish in Subsection 2.6. Following the terminology of multi-view reconstruction, is called a training view [14]. Moreover, perhaps not all the information in is worth remembering, so the reconstruction label can be another low-rank projection instead of . Here is called the label view, where is also learnable. In summary, our new self-supervised loss is:\n\n\u2113 \u200b ( W ; x t ) = \u2016 f \u200b ( \u03b8 K \u200b x t ; W ) \u2212 \u03b8 V \u200b x t \u2016 2 . \u2113 \ud835\udc4a subscript \ud835\udc65 \ud835\udc61 superscript norm \ud835\udc53 subscript \ud835\udf03 \ud835\udc3e subscript \ud835\udc65 \ud835\udc61 \ud835\udc4a subscript \ud835\udf03 \ud835\udc49 subscript \ud835\udc65 \ud835\udc61 2 \\ell(W;x_{t})=\\big{\\|}f\\left(\\theta_{K}x_{t};W\\right)-\\theta_{V}x_{t}\\big{\\|}^{2}. (4)\n\nSince both and various s appear together in Equation 4, we emphasize again their difference in nature. In the inner loop, only is optimized, therefore written as an argument of ; the s are \"hyper-parameters\" of this loss function. In the outer loop, are optimized alongside , and is merely a hidden state, not a parameter. Figure 6 illustrates this difference with code, where and are implemented as parameters of the TTT layer, analogous to the Key and Value parameters of self-attention. Lastly, the training view has fewer dimensions than , so we can no longer use the output rule in Equation 1. The simplest solution is to create a test view , and change our output rule to:\n\nz t = f \u200b ( \u03b8 Q \u200b x t ; W t ) . subscript \ud835\udc67 \ud835\udc61 \ud835\udc53 subscript \ud835\udf03 \ud835\udc44 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 z_{t}=f\\left(\\theta_{Q}x_{t};W_{t}\\right). (5)\n\nThis solution has an additional benefit. The training and label views specify the information in that is compressed into and propagated forward through time. The test view specifies potentially different information that is mapped to the current output token and propagated forward through network layers, therefore adds more flexibility to the self-supervised task. Altogether, the set of all possible choices for induces a family of multi-view reconstruction tasks, and the outer loop can be interpreted as selecting a task from this family. Here we have designed all views as linear projections for simplicity. Future work might experiment with more flexible transformations, or bigger and different families of self-supervised tasks. 2.4 Parallelization with mini-batch TTT\n\nThe naive TTT layer developed so far is already efficient in the number of floating point operations (FLOPs). However, its update rule cannot be parallelized, because depends on in two places: before the minus sign and inside . Since contains the bulk of the computation, we focus on making this second part parallel. We approach this systems challenge through concepts in the TTT framework. There are many variants of gradient descent (GD). The general update rule of GD can be expressed as:\n\nW t = W t \u2212 1 \u2212 \u03b7 \u200b G t = W 0 \u2212 \u03b7 \u200b \u2211 s = 1 t G s , subscript \ud835\udc4a \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 1 \ud835\udf02 subscript \ud835\udc3a \ud835\udc61 subscript \ud835\udc4a 0 \ud835\udf02 superscript subscript \ud835\udc60 1 \ud835\udc61 subscript \ud835\udc3a \ud835\udc60 W_{t}=W_{t-1}-\\eta\\,G_{t}=W_{0}-\\eta\\sum_{s=1}^{t}G_{s}, (6)\n\nwhere is the descent direction. Note that once we have calculated for , we can then obtain all the s through a cumsum by the second half of Equation 6. Our naive update rule, known as online gradient descent, uses . To parallelize for , we can take all of them w.r.t. . This variant with is known as batch gradient descent, since is the same as the gradient w.r.t. over as a batch. However, in batch GD, is effectively only one gradient step away from , in contrast to online GD, where is steps away from . Therefore, batch GD has a smaller effective search space, which ends up hurting performance for language modeling. Our proposed solution \u2013 mini-batch gradient descent \u2013 is shown in Figure 7. Denote the TTT batch size by . We use , where mod is the last timestep of the previous mini-batch (or 0 for the first mini-batch), so we can parallelize gradient computations at a time. Empirically, controls a trade-off between speed and quality, as shown in Figure LABEL:fig:batch-size. We chose for all experiments in this paper. In summary, there are two potential channels to propagate information from to where : cumsum and the gradient operator. The cumsum is always active, but the gradient channel is only active when is from a previous mini-batch. Different variants of gradient descent only affect the gradient channel, i.e., the descent direction , specifically w.r.t. which the gradient is taken. However, the descent step always starts from , due to the autoregressive nature of the update rule, which is orthogonal to the choice of . 2.5 Dual form\n\nThe parallelization introduced above is necessary but not sufficient for efficiency in wall-clock time. Modern accelerators specialize in matrix-matrix multiplications, known as matmuls. For example, the NVIDIA A100 GPU contains highly optimized units called TensorCores that can only perform a single operation \u2013 multiplying two matrices each of size . Without enough of these matmuls, the TensorCores are idle, and most of the potential for the A100 is unrealized. Unfortunately, the TTT layer developed so far even with mini-batch still has very few matmuls. Consider the simplest case of , where , for only the first TTT mini-batch of size . In addition, consider as a linear model. Copying Equation 3, our loss at time is:\n\n\u2113 \u200b ( W 0 ; x t ) = \u2016 f \u200b ( x t ; W 0 ) \u2212 x t \u2016 2 = \u2016 W 0 \u200b x t \u2212 x t \u2016 2 . \u2113 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 superscript norm \ud835\udc53 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 2 superscript norm subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc65 \ud835\udc61 2 \\ell\\left(W_{0};x_{t}\\right)=\\|f(x_{t};W_{0})-x_{t}\\|^{2}=\\|W_{0}x_{t}-x_{t}\\|^{2}. As discussed in Subsection 2.4, we can parallelize the computation of:\n\nG t = \u2207 \u2113 \u200b ( W 0 ; x t ) = 2 \u200b ( W 0 \u200b x t \u2212 x t ) \u200b x t T , subscript \ud835\udc3a \ud835\udc61 \u2207 \u2113 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 2 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc65 \ud835\udc61 superscript subscript \ud835\udc65 \ud835\udc61 \ud835\udc47 G_{t}=\\nabla\\ell\\left(W_{0};x_{t}\\right)=2(W_{0}x_{t}-x_{t})x_{t}^{T},\n\nfor . However, we cannot compute all of the s through a single matmul. Instead, we need outer products to compute them one by one. To make matters worse, for each , is , which incurs much heavier memory footprint and I/O cost than for large . To solve these two problems, we make a simple observation: We do not actually need to materialize as long as we can compute at the end of the mini-batch, and the output tokens (see Figure 7). Now we demonstrate these computations with the simplified TTT-Linear case above. Denote , then:\n\nW b = W 0 \u2212 \u03b7 \u200b \u2211 t = 1 b G t = W 0 \u2212 2 \u200b \u03b7 \u200b \u2211 t = 1 b ( W 0 \u200b x t \u2212 x t ) \u200b x T = W 0 \u2212 2 \u200b \u03b7 \u200b ( W 0 \u200b X \u2212 X ) \u200b X T . subscript \ud835\udc4a \ud835\udc4f subscript \ud835\udc4a 0 \ud835\udf02 superscript subscript \ud835\udc61 1 \ud835\udc4f subscript \ud835\udc3a \ud835\udc61 subscript \ud835\udc4a 0 2 \ud835\udf02 superscript subscript \ud835\udc61 1 \ud835\udc4f subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc65 \ud835\udc61 superscript \ud835\udc65 \ud835\udc47 subscript \ud835\udc4a 0 2 \ud835\udf02 subscript \ud835\udc4a 0 \ud835\udc4b \ud835\udc4b superscript \ud835\udc4b \ud835\udc47 W_{b}=W_{0}-\\eta\\sum_{t=1}^{b}G_{t}=W_{0}-2\\eta\\sum_{t=1}^{b}(W_{0}x_{t}-x_{t})x^{T}=W_{0}-2\\eta(W_{0}X-X)X^{T}. So can be conveniently computed with a matmul. To compute , we know that:\n\nz t = f \u200b ( x t ; W t ) = W t \u200b x t = ( W 0 \u2212 \u03b7 \u200b \u2211 s = 1 t G t ) \u200b x t = W 0 \u200b x t \u2212 2 \u200b \u03b7 \u200b \u2211 s = 1 t ( W 0 \u200b x s \u2212 x s ) \u200b x s T \u200b x s . subscript \ud835\udc67 \ud835\udc61 \ud835\udc53 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a 0 \ud835\udf02 superscript subscript \ud835\udc60 1 \ud835\udc61 subscript \ud835\udc3a \ud835\udc61 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 2 \ud835\udf02 superscript subscript \ud835\udc60 1 \ud835\udc61 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc60 subscript \ud835\udc65 \ud835\udc60 superscript subscript \ud835\udc65 \ud835\udc60 \ud835\udc47 subscript \ud835\udc65 \ud835\udc60 z_{t}=f(x_{t};W_{t})=W_{t}x_{t}=\\left(W_{0}-\\eta\\sum_{s=1}^{t}G_{t}\\right)x_{t}=W_{0}x_{t}-2\\eta\\sum_{s=1}^{t}(W_{0}x_{s}-x_{s})x_{s}^{T}x_{s}. (7)\n\nDenote and the matrix . We can derive that:\n\n\u0394 = mask \u200b ( X T \u200b X ) \u200b ( W 0 \u200b X \u2212 X ) , \u0394 mask superscript \ud835\udc4b \ud835\udc47 \ud835\udc4b subscript \ud835\udc4a 0 \ud835\udc4b \ud835\udc4b \\Delta=\\texttt{mask}\\left(X^{T}X\\right)\\left(W_{0}X-X\\right),\n\nwhere mask is the lower triangular mask with zeros (similar to the attention mask, but with zeros instead of infinities), and the term can be reused from the computation of .",
    "ttt-5": "Now is also conveniently computed with matmuls. Plugging back into Equation 7, we obtain . We call this procedure the dual form, in contrast to the primal form before this subsection, where the s and s are explicitly materialized. As discussed, the two forms are equivalent in output. The terminology of primal and dual follows prior work that has explored similar mathematical formulations outside of TTT [36, 8, 59]. In Appendix A, we show that the dual form still works when is a neural network with nonlinear layers, except with more complicated notation. Time complexity of the primal form within a TTT mini-batch is . Time complexity of the dual form is for computing alone, then an additional for computing . Compared to the primal, the dual form sacrifices theoretical complexity for hardware utilization. In practice, is typically a few hundred and is chosen to be only 16. As a consequence, wall-clock time for computing is relatively small, as observed in the right panel of Figure LABEL:fig:batch-size. In our JAX implementation, training with the dual form is more than faster than with primal. 2.6 Theoretical equivalences\n\nIn Subsection 2.1, we mentioned that can be a linear model or a neural network. In Subsection 2.4, we also discussed three variants of the update rule: online GD, batch GD, and mini-batch GD. Each of these combinations induces a different instantiation of the TTT layer, as illustrated in Figure 9. We now show that among these induced instantiations, the TTT layer with a linear model and batch GD is equivalent to linear attention [41], a widely known RNN layer.777 In a nutshell, linear attention [41] is simply self-attention without the softmax. Recall the definition of self-attention: . Without softmax, this becomes , which is the simplest formulation of linear attention. Similar to other RNN layers, it can be written in a recurrent form, where is the hidden state. Since can be computed in a cumsum for every , linear attention also has linear complexity w.r.t.",
    "ttt-6": ". Theorem 1. Consider the TTT layer with as the inner-loop model, batch gradient descent with as the update rule, and . Then, given the same input sequence , the output rule defined in Equation 5 produces the same output sequence as linear attention.",
    "ttt-7": "Proof. By definition of in Equation 4, . By definition of batch GD in Equation 6 :\n\nW t = W t \u2212 1 \u2212 \u03b7 \u200b \u2207 \u2113 \u200b ( W 0 ; x t ) = W 0 \u2212 \u03b7 \u200b \u2211 s = 1 t \u2207 \u2113 \u200b ( W 0 ; x s ) = \u2211 s = 1 t ( \u03b8 V \u200b x s ) \u200b ( \u03b8 K \u200b x s ) T . subscript \ud835\udc4a \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 1 \ud835\udf02 \u2207 \u2113 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a 0 \ud835\udf02 superscript subscript \ud835\udc60 1 \ud835\udc61 \u2207 \u2113 subscript \ud835\udc4a 0 subscript \ud835\udc65 \ud835\udc60 superscript subscript \ud835\udc60 1 \ud835\udc61 subscript \ud835\udf03 \ud835\udc49 subscript \ud835\udc65 \ud835\udc60 superscript subscript \ud835\udf03 \ud835\udc3e subscript \ud835\udc65 \ud835\udc60 \ud835\udc47 W_{t}=W_{t-1}-\\eta\\nabla\\ell\\left(W_{0};x_{t}\\right)=W_{0}-\\eta\\sum_{s=1}^{t}\\nabla\\ell\\left(W_{0};x_{s}\\right)=\\sum_{s=1}^{t}(\\theta_{V}x_{s})(\\theta_{K}x_{s})^{T}. Plugging into the output rule in Equation 5, we obtain the output token:\n\nz t = f \u200b ( \u03b8 Q \u200b x t ; W t ) = \u2211 s = 1 t ( \u03b8 V \u200b x s ) \u200b ( \u03b8 K \u200b x s ) T \u200b ( \u03b8 Q \u200b x t ) , subscript \ud835\udc67 \ud835\udc61 \ud835\udc53 subscript \ud835\udf03 \ud835\udc44 subscript \ud835\udc65 \ud835\udc61 subscript \ud835\udc4a \ud835\udc61 superscript subscript \ud835\udc60 1 \ud835\udc61 subscript \ud835\udf03 \ud835\udc49 subscript \ud835\udc65 \ud835\udc60 superscript subscript \ud835\udf03 \ud835\udc3e subscript \ud835\udc65 \ud835\udc60 \ud835\udc47 subscript \ud835\udf03 \ud835\udc44 subscript \ud835\udc65 \ud835\udc61 z_{t}=f\\left(\\theta_{Q}x_{t};W_{t}\\right)=\\sum_{s=1}^{t}(\\theta_{V}x_{s})(\\theta_{K}x_{s})^{T}(\\theta_{Q}x_{t}),\\vspace{-1ex}\n\nwhich is the definition of linear attention. \u220e\n\nIn Table 1, we first empirically verify the equivalence above with an improved implementation of linear attention.888 The original formulation of linear attention in [41] contains a normalizer and a feature expansion on , which can still be included in an equivalent TTT layer. However, prior work has found that these two additions can hurt performance [58], which we have verified in our own experiment (first vs. second row of Table 1). Therefore, we only construct a TTT layer equivalent to the simplest formulation of linear attention without the two additions. Then, to illustrate the contribution of each of our components (including some that will be introduced in the next subsection), we add them row by row to the TTT layer that is equivalent to linear attention, and ultimately obtain our proposed instantiation called TTT-Linear. The change from batch GD to mini-batch GD contributes the most improvement by a large margin. While the space of models optimizers in Figure 9 is already large, machine learning is much richer than optimizing the parameters of a model . There are also nonparametric learners, such as nearest neighbors, support vector machines (SVMs), and kernel ridge regression. By definition, nonparametric learners do not have parameters , and instead directly uses training data . Hence we use the notation . We now show that for a particular nonparametric learner, the induced TTT layer is equivalent to self-attention. Theorem 2. Consider the TTT layer with the Nadaraya-Watson estimator [7, 12], defined as:\n\nf \u200b ( x ; x 1 , \u2026 , x t ) = 1 \u2211 s = 1 t \u03ba \u200b ( x , x s ) \u200b \u2211 s = 1 t \u03ba \u200b ( x , x s ) \u200b y s , \ud835\udc53 \ud835\udc65 subscript \ud835\udc65 1 \u2026 subscript \ud835\udc65 \ud835\udc61 1 superscript subscript \ud835\udc60 1 \ud835\udc61 \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc60 superscript subscript \ud835\udc60 1 \ud835\udc61 \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc60 subscript \ud835\udc66 \ud835\udc60 f(x;x_{1},\\dots,x_{t})=\\frac{1}{\\sum_{s=1}^{t}\\kappa(x,x_{s})}\\sum_{s=1}^{t}\\kappa(x,x_{s})~{}y_{s}, (8)\n\nwhere is the label view discussed in Subsection 2.3, and\n\n\u03ba \u200b ( x , x \u2032 ; \u03b8 K , \u03b8 Q ) \u221d e ( \u03b8 K \u200b x ) T \u200b \u03b8 Q \u200b x \u2032 proportional-to \ud835\udf05 \ud835\udc65 superscript \ud835\udc65 \u2032 subscript \ud835\udf03 \ud835\udc3e subscript \ud835\udf03 \ud835\udc44 superscript \ud835\udc52 superscript subscript \ud835\udf03 \ud835\udc3e \ud835\udc65 \ud835\udc47 subscript \ud835\udf03 \ud835\udc44 superscript \ud835\udc65 \u2032 \\kappa\\left(x,x^{\\prime};\\theta_{K},\\theta_{Q}\\right)\\propto e^{(\\theta_{K}x)^{T}\\theta_{Q}x^{\\prime}} (9)\n\nis a kernel with bandwidth hyper-parameters and . Then given the same input sequence , the output rule defined in Equation 5 produces the same output sequence as self-attention.",
    "ttt-8": "Proof. Plugging and above into Equation 8 gives us the definition of self-attention. \u220e\n\nAppendix B contains a detailed explanation of the Nadaraya-Watson estimator and kernel above. In contrast to Theorem 1, Theorem 2 does not produce a different implementation from attention. For the TTT layer above, the hidden state is or a similar list of processed training data, the update rule adds to the list, and the output rule scans the list with . In previous subsections, our hidden state has been defined as , the update rule a gradient step, and the output rule a call to . To unify these two constructions, we define a new abstraction called a learner, which uniquely induces a TTT layer. Similar to its definition in standard machine learning packages [54], all learners need to implement two methods: train and predict. Now we redefine the hidden state of the induced TTT layer as the internal storage of the learner, and the update and output rules as the train and predict methods. Under this new definition of TTT layers, both parametric learners such as that in Theorem 1 and nonparametric learners such as that in Theorem 2 can be included. Figure 10 summarizes this general definition of TTT layers in the broader scope of all sequence modeling layers. This general definition has an additional benefit for parametric learners: There can be more objects other than in the internal storage of parametric learners, such as the optimizer state, which will also be included in the hidden state of the induced TTT layer. This extension allows TTT layers to use more sophisticated optimizers such as Adam [42] in future work. 2.7 Implementation details\n\nInstantiations of . We propose two variants of TTT layers \u2013 TTT-Linear and TTT-MLP, differing only in their instantiations of . For TTT-Linear, , where is square. For TTT-MLP, has two layers similar to the MLPs in Transformers. Specifically, the hidden dimension is the input dimension, followed by a GELU activation [31]. For better stability during TTT, always contains a Layer Normalization (LN) and residual connection.",
    "ttt-9": "That is, where can be or . Learnable . The TTT initialization is shared between all sequences, even though subsequent weights are different for each input sequence. Instead of setting , we can learn it as part of the outer loop. Since outer-loop parameters are always denoted by s instead of s, we assign an alias . In practice, adds a negligible amount of parameters comparing to the reconstruction views , because both its input and output are low dimensional.",
    "ttt-10": "Empirically, we observe that learning significantly improves training stability. Learnable . The learning rate is usually the most important hyper-parameter for gradient descent, so we experiment with learning the inner-loop learning rate in Equation 6 as part of the outer loop. We make a function of the input token (therefore different across time) for additional flexibility. Concretely, we design , where the learnable vector is an outer-loop parameter, is the sigmoid function, and the scalar is the base learning rate, set to 1 for TTT-Linear and 0.1 for TTT-MLP. Alternatively, can also be interpreted as a gate for . Backbone architecture. The cleanest way to integrate any RNN layer into a larger architecture would be to directly replace self-attention in a Transformer, known in this context as a backbone. However, existing RNNs such as Mamba [26] and Griffin [18] all use a different backbone from Transformers. Most notably, their backbone contains temporal convolutions before the RNN layers, which might help collect local information across time. After experimenting with the Mamba backbone, we find that it also improves perplexity for TTT layers, so we incorporate it into our proposed method. See Figure 16 (in Appendix) for details. 3 Experiments\n\nWe evaluate TTT-Linear and TTT-MLP by comparing with two baselines \u2013 Transformer and Mamba, a modern RNN. Our main codebase is based on EasyLM [25], an open-source project for training and serving LLMs in JAX. All experiments can be reproduced using the publicly available code and datasets provided at the bottom of the first page. Datasets. Following the Mamba paper [26], we perform standard experiments with 2k and 8k context lengths on the Pile [24], a popular dataset of documents for training open-source LLMs [9]. However, the Pile contains few sequences of length greater than 8k [19]. To evaluate capabilities in long context, we also experiment with context lengths ranging from 1k to 32k in increments, using a subset of the Pile called Books3, which has been widely used to train LLMs in long context [49, 3]. Backbone architecture. As discussed in Subsection 2.7, Transformer and Mamba use different backbones, and TTT-Linear and TTT-MLP always use the Mamba backbone unless noted otherwise. As an ablation study, Figure 11 and Figure 12 contain TTT layers within the Transformer backbone. When a figure contains both the Transformer backbone and Mamba backbone, we denote them by (T) and (M), respectively. Protocols. To ensure fairness to our baselines, we strictly follow the evaluation protocols in the Mamba paper when possible:\n\n\u2022\n\nFor each evaluation setting (e.g., dataset, context length, and method), we experiment with four model sizes: 125M, 350M, 760M, and 1.3B parameters. For Mamba, the corresponding sizes are 130M, 370M, 790M, and 1.4B, as Mamba does not follow the Transformer configurations. \u2022\n\nAll models are trained with the Chinchilla recipe999 The Chinchilla paper is another highly influential study of empirical scaling laws [34]. From large-scale experiments with many hyper-parameters, they observe that the compute-optimal models follow a particular training recipe. We only follow the Chinchilla recipe used in the Mamba paper, which may be slightly different from the original recipe in [34]. described in the Mamba paper and reproduced in our Appendix C. Our Transformer baseline, based on the Llama architecture [73], also follows the baseline in the Mamba paper. As verification, our baselines can reproduce the numbers reported in the Mamba paper in their evaluation settings.101010 The only difference between our protocol and that in the Mamba paper is the tokenizer. The Mamba paper uses two different tokenizers \u2013 GPT-2 and GPT-NeoX \u2013 for various experiments. For consistency, we adhere to a single tokenizer throughout this paper and choose the Llama tokenizer [73], which is the modern state-of-the-art. \u2022\n\nWe do not experiment with hybrid architectures (e.g. Griffin [18]), because our baselines are not hybrid. While hybrid architectures that use both self-attention and TTT layers may improve performance, they would reduce the clarity of our academic evaluation. 3.1 Short context: the Pile\n\nFrom Figure 11, we make a few observations:\n\n\u2022\n\nAt 2k context, TTT-Linear (M), Mamba, and Transformer have comparable performance, as the lines mostly overlap. TTT-MLP (M) performs slightly worse under large FLOP budgets. Even though TTT-MLP has better perplexity than TTT-Linear at every model size, the extra cost in FLOPs offsets the advantage. \u2022\n\nAt 8k context, both TTT-Linear (M) and TTT-MLP (M) perform significantly better than Mamba, in contrast to the observation at 2k. Even TTT-MLP (T) with the Transformer backbone performs slightly better than Mamba around 1.3B. A robust phenomenon we observe throughout this paper is that as context length grows longer, the advantage of TTT layers over Mamba widens. \u2022\n\nAt 8k context, Transformer still has good (if not the best) perplexity at every model size, but its line is not competitive because of the cost in FLOPs. Effect of backbone. Switching the TTT layers from Mamba backbone into Transformer backbone has two effects. First, TTT layers with Mamba backbone perform better in our evaluations so far. Second, with Mamba backbone, TTT-MLP at best is only comparable to TTT-Linear; but with Transformer backbone, TTT-MLP is clearly better. We hypothesize that the temporal convolutions in the Mamba backbone help more when the sequence modeling layer has a less expressive hidden state.",
    "ttt-11": "The linear model is less expressive than the MLP, therefore benefits more from the convolutions. We will revisit this hypothesis in the next subsection. Lack of linear fit. The Chinchilla paper empirically observed that the compute-optimal models following their recipe fall onto a line in the log-log plot of FLOPs vs. perplexity, as is often the case for scaling law experiments [34]. However, we do not observe a clean linear fit in Figure 11 or Figure 12 (the analogous experiments in Books), not even for Transformers. This is not surprising given the differences in dataset, context length, tokenizer, and architecture. Following the Mamba paper, we connect the points instead of fitting them with linear regression due to the large error.111111 Ideally, we would have rerun all the hyper-parameters and derived a potentially new recipe for each method based on our evaluation setting, following the process in the Chinchilla paper. If the new compute-optimal models do fall onto a line, we could then predict performance beyond the current FLOPs regime [40, 34]. However, this empirical study would require orders of magnitude more resources than ours. 3.2 Long context: Books\n\nTo evaluate capabilities in long context, we experiment with context lengths ranging from 1k to 32k in increments, using a popular subset of the Pile called Books3. The training recipe here is the same as for the Pile, and all experiments for the TTT layers are performed in one training run.121212 Following the Mamba paper, we always use 0.5M tokens per training batch regardless of context length. That means for context length we have sequences per batch (assume divisible). From the subset of results in Figure 12, we make a few observations:\n\n\u2022\n\nAt 2k context on Books, all the observations from Pile 2k still hold, except that Mamba now performs slightly better than TTT-Linear (whereas their lines roughly overlapped for Pile 2k). \u2022\n\nAt 32k context, both TTT-Linear (M) and TTT-MLP (M) perform better than Mamba, similar to the observation from Pile 8k. Even TTT-MLP (T) with the Transformer backbone performs slightly better than Mamba at 32k context. \u2022\n\nTTT-MLP (T) is only slightly worse than TTT-MLP (M) at 1.3B scale. As discussed, it is hard to derive an empirical scaling law due to the lack of a clean linear fit. However, the strong trend for TTT-MLP (T) suggests that the Transformer backbone might be more suitable for larger models and longer context beyond our evaluations. We only ablate the backbones for 2k and 32k due to the cost of training LLMs. For future work, we believe that given TTT layers with even more expressive hidden states, the Mamba backbone with temporal convolutions will become unnecessary. Transformer finetuning. While we have been training Transformers from scratch following the Mamba paper, in practice this approach is rarely used for long context. The standard practice is to train a Transformer in short context, then finetune in long context. To reflect this practice, we add another baseline, TF finetune, for context lengths 4k and above. This baseline starts from the model trained (according to the Chinchilla recipe) on Books 2k, then uses 20% more tokens to finetune at the designated context length, following the Llama Long paper [78]. See details of the TF finetune recipe in Appendix C. Our complete results for context lengths 1k, 2k, 4k, 8k, 16k, 32k, including TF finetune, are in Figure 18 (in Appendix). Context length as a hyper-parameter. While the length of the input sequence is determined by the user, the context length at which the language model processes the input is determined by the engineer as a design choice. Therefore, context length is a hyper-parameter that can be selected just as other ones.131313 To be precise, there are two hyper-parameters: the context length at which the LLM is trained, and one at which the LLM is evaluated. Both of them can be different from the sequence length, which is determined by the user. Transformers tend to perform poorly when the evaluation context is longer than the training context [18]. Therefore, we always evaluate at the training context length, making the two hyper-parameters the same. For LLMs with linear complexity, we select the argmin in perplexity, since every context length has the same FLOPs. For Transformers, longer context costs more FLOPs, so we form a convex hull of all the points in the log-log plot and connect those on the boundary. From Figure 13, we make a few observations:\n\n\u2022\n\nThe lines of TTT-Linear and TTT-MLP, the best-performing methods, almost completely overlap. The lines of Mamba and TF finetune also mostly overlap after FLOPs. \u2022\n\nTF finetune performs significantly better than TF pretrain, as it benefits from long context without incurring extremely large cost in training FLOPs. Note that the inference FLOPs of TF finetune and pretrain are equally poor, which is not reflected in this plot. \u2022\n\nFor all methods trained from scratch (including TF pretrain), perplexity becomes worse once the context length becomes too large.",
    "ttt-12": "This trend is highlighted in Figure 19 (in Appendix). We leave further investigation of this trend to future work. The left panel of Figure 2 is a zoomed-in view of Figure 13. For clarity, we leave TF pretrain out of Figure 2 and only show TF finetune (labeled as Transformer) since it is the stronger baseline. Figure 14 reproduces the right panel of Figure 2, now with TTT-MLP and additional discussion. 3.3 Wall-clock time\n\nLLM training and inference can be decomposed into forward, backward, and generate. Prompt processing during inference, also known as prefill, is the same operation as forward during training, except that the intermediate activations do not need to be stored for backward. Since both forward (during training and inference) and backward can be parallelized, we use the dual form. Generating new tokens, also known as decode, is inherently sequential, so we use the primal form. Due to resource constraints, our experiments are written in JAX and run on TPUs. On a v5e-256 TPU pod, the Transformer baseline takes 0.30s per iteration of training at context 2k, while TTT-Linear takes 0.27s per iteration, already 10% faster without any systems optimization. However, Mamba (implemented in PyTorch, Triton, and CUDA) can only run on GPUs, so for fair comparison, we also rewrite our method with preliminary systems optimization to run on GPUs. Specifically, we write a GPU kernel for forward in ThunderKittens [66]. Historically, RNNs have been inefficient during forward and backward due to poor use of parallelism and matmuls. Our goal with the forward kernel is to demonstrate the effectiveness of mini-batch TTT and the dual form for these problems. A kernel for backward should have the same properties in efficiency as forward, but requires more complex logic for manual differentiation, therefore is left for future work. The left panel of Figure 15 shows the latency for batch size 16 of our forward kernel. All models are 1.3B (1.4B for Mamba). Time per token grows linearly for Transformer as context length increases, but stays roughly constant for the other methods.141414 We observe that forward latency of the network increases slightly for TTT-Linear, TTT-MLP, and Mamba, even though latency of each sequence modeling layer alone stays constant.",
    "ttt-13": "Consider the operation , where is and is . Its latency (normalized over ) is expected to be constant, but in practice grows slightly with . One possible cause of this phenomenon is the GPU throttling after gets very large [30]. Note that our Transformer baseline is significantly faster that in the Mamba paper, because we use vLLM [46], a state-of-the-art serving system, instead of the HuggingFace Transformer [77]. In addition, we write another GPU kernel for generate in Triton [72], and benchmark its speed in the right panel of Figure 15 for batch size 512. Another popular metric for wall-clock time is throughput, which takes into account the potential benefit of being able to use a larger batch size.151515 To calculate throughput for each method, we increase its batch size in increments until GPU runs out of memory, measure the tokens per second for every batch size, and select the highest.",
    "ttt-14": "For completeness, we report the throughput for forward and generate in Figure 20 (in Appendix). All the observations and ordering between methods above still hold for throughput. 4 Related Work\n\n4.1 Modern RNNs\n\nMamba is one of the many Structured State-Space Models [27, 21, 57, 18]. The hidden state in these models is a vector, similar to in LSTMs. For TTT-Linear or TTT-MLP, the hidden state is a matrix or two matrices, therefore larger. In Figure 14, we find that TTT layers can take advantage of their larger hidden states to compress more information in long context, where TTT-MLP outperforms TTT-Linear, which in turn outperforms Mamba. Similar to TTT-Linear, RWKV [55, 56], xLSTM [5], and Gated Linear Attention (GLA) [79] also have matrix hidden states, which are inherited from linear attention [41]. Modern RNNs such as GLA use chunk-wise parallelism to improve hardware efficiency, so tokens inside a chunk can be processed with matmuls instead of a cumsum. However, chunk-wise parallelism does not change the expressiveness of the model, since all temporal dependencies are still equivalent to a cumsum. In contrast, mini-batch TTT allows more complex temporal dependencies across mini-batches. Each hidden state depends on previous s within its mini-batch still through a cumsum, but depends on s in previous mini-batches also through the gradient operator. As illustrated Figure LABEL:fig:batch-size, mini-batch TTT enables a trade-off between expressiveness and hardware efficiency, since a smaller batch size leads to better perplexity at the cost of higher latency. This trade-off is a unique and important feature of TTT. As shown in Table 1, the intermediate batch size significantly outperforms which is fully cumsum. 4.2 Learning at Test Time\n\nThe idea of learning at test time has a long history in machine learning. One of the earliest versions of this idea is called local learning (Bottou and Vapnik [10]): For each test input, train on its neighbors before making a prediction. This procedure has been effectively applied to models ranging from SVMs [81] to modern LLMs [29]. Another early version of learning at test time is called transductive learning [22]. The principle of transduction, as stated by Vladimir Vapnik [74], is to \"\u2026 get the answer that you really need, but not a more general one.\" Practical implementations of transductive learning use test data to add constraints to the margin of SVMs [39, 17]. However, transductive learning usually needs multiple test instances to be empirically effective, unlike many instantiations of test-time training, which only need a test single instance (image, video, or natural language sequence) at a time. In computer vision, the idea of learning at test time has been applied for decades to applications such as face detection [38], object detection [53], image super-resolution [65], and 3D reconstruction [50]. More recently, the same idea has also been applied to natural language processing, where it is called dynamic evaluation [44, 45]. The basic approach is to directly finetune a language model on the test sequence, which often comes in the form of a prompt. Next, we discuss two relevant lines of work in detail: test-time training and fast weights. 4.2.1 Test-Time Training\n\nThe core idea of Test-Time Training (TTT) is that each test instance defines its own learning problem, where this test instance alone is the target of generalization [69]. Concretely, for each test instance , the conventional practice is to predict , using a predictor that is optimized for all training instances on average. TTT first formulates a learning problem defined by , then trains a model on (often with as initialization), and predicts . Since the test instance comes without its label, the learning problem can only be formulated with a self-supervised task. Prior work has shown that TTT with reconstruction significantly improves performance especially on outliers [23]. Improvements become even more pronounced when testing on video frames that arrive in a stream and TTT is autoregressive [76], as is trained on past frames . The autoregressive connection makes [76] most relevant to our paper. Conceptually, the biggest difference between our paper and prior work is that our reconstruction task is learned in an outer loop, instead of handcrafted with human priors. Follow-up work to TTT has explored applications such as robot manipulation [28] and locomotion [68], among others, that often require different designs for the self-supervised task. 4.2.2 Fast Weights\n\nThe general idea of fast weights is to update the parameters of a \u201cfast\u201d model on only the most relevant data, as opposed to the conventional practice of updating a \u201cslow\u201d model on all data [71]. This idea has existed since the 1980s [32]. The most relevant data can be the test instance itself, therefore TTT can be viewed as a special case of fast weights. Prior work in fast weights usually avoids forming an explicit learning problem that optimizes some objective on data. For example, the update rule of Hebbian learning and Hopfield networks [35] simply adds (or some variant thereof) [4] to the fast weights given each input . In contrast, TTT embraces the idea of formulating an explicit learning problem, where the test instance is the target of generalization. Our update rule is also an explicit step of optimization. The idea of fast weight programmers (FWPs) is to update the fast weights with a \u201cslow\u201d model [62]. Our inner-loop weights can be viewed as \u201cfast\u201d and outer-loop weights as \u201cslow\u201d. Therefore, networks containing TTT layers can be viewed as a special case of FWPs [43], similar to how TTT can be viewed as a special case of fast weights. The FWP with the Hebbian update rule above is equivalent to linear attention [60], therefore also to naive TTT-Linear with batch gradient descent. The definition of FWPs is very broad. In fact, all networks with some gating mechanism, such as Transformers with SwiGLU blocks [63], can also be viewed as a special case of FWPs161616 Consider a simple gate , where is the input, is the output, and are learnable weight matrices, is element-wise multiplication, and is the sigmoid function. A well known interpretation is to view as the fast weights controlled by slow weights , then equivalently, is simply a two-layer MLP with fast weights [26]. . Recent work has been experimenting with FWPs for language modeling: Irie et al. [37] design \u201cfast\u201d networks with weights produced as output of a \u201cslow\u201d networks. Clark et al. [16] give a Transformer a final layer of fast weights, whose initialization is trained as slow weights. Our contribution relative to existing work on FWPs, again, is formulating an explicit learning problem for the update, which enables us to borrow tools from learning such as mini-batch and LN. 4.3 Learning to Learn\n\nFor decades, researchers have been arguing that learning to learn, also known as meta-learning or bi-level optimization, should be a critical component of intelligence [61, 6, 70, 47]. In prior work such as [2], [20] and [52], the inner loop learns from an entire dataset at a time instead of a sequence, so the outer loop needs a collection of datasets or tasks. In short, the outer loop is \u201cone level above\u201d regular training. Since it is hard to collect millions of datasets, this outer loop is hard to scale. In contrast, for TTT, each sequence itself is a dataset and defines its own generalization problem. The inner loop is \u201cone level below\u201d regular training, so our outer loop is only another solution to the canonical problem of supervised learning, instead of a new problem setting like generalization across datasets. As illustrated in Table 2, our outer loop is \u201cat the same level\u201d as regular training. This makes our outer loop easier to scale. 5 Discussion\n\nWe have reformulated the canonical problem of supervised learning as learning to (learn at test time). Our formulation produces an alternative conceptual framework for building what is traditionally known as network architectures. We summarize our current instantiation in Table 2. The search space for effective instantiations inside this framework is huge, and our paper has only taken a baby step. Fortunately, if our perspective holds, then heuristics from regular training can transfer to test-time training, and search can be efficient. Next we outline some especially promising directions for future work. \u2022\n\nOuter-loop parameterization. There are many other ways to parameterize a family of multi-view reconstruction tasks, or perhaps a more general family of self-supervised tasks. It would be a big coincidence if the first one we have tried turns out to be the best. \u2022\n\nSystems optimization. Our systems optimization in Subsection 3.3 has been preliminary at best, and there are many ways to improve it. In addition, pipeline parallelism through time might allow us to process long sequences of millions of tokens on multiple devices together. \u2022\n\nLonger context and larger models. Constrained by our academic resources, we have not trained with millions or billions in context length, which would also require larger models according to Figure 19. The advantage of TTT layers should become more pronounced in longer context. \u2022\n\nMore ambitious instantiations of . When context length becomes longer, would also need to be larger. For video tasks and embodied agents, whose context length can easily scale up to millions or billions, could be a convolutional neural network. \u2022\n\nMulti-level learning to learn. If itself is a self-attention layer, then by Theorem 2 it can be interpreted as yet another inner loop nested inside the existing one. In this fashion, we can potentially build many levels of nested learning problems. Why do we study TTT? First a more basic question: Why study AI? For some of us, AI is a playground to probe about the nature of human intelligence. Prior work often tries to model human learning with machine learning, where training is on a shuffled dataset with i.i.d. instances, and inference is on a separate test set. However, humans do not naturally learn with i.i.d. instances or have a train-test split. We believe that human learning has a more promising connection with TTT, our inner loop, whose data is a potentially very long sequence with strong temporal dependencies, and any piece of data can be used for both training and testing. This is why we study TTT. Author Contributions\n\nYu Sun started this project with Xinhao Li in November 2022, and has been working on it full-time since June 2023. Yu proposed the conceptual framework of the project, designed mini-batch TTT and the dual form, wrote the paper with help from others, and led the daily operations of the team. Xinhao Li started this project with Yu Sun in November 2022, and has been working on it full-time since then. Xinhao and Karan co-led the development of our current codebase. Before March 2024, Xinhao was the primary contributor to our earlier codebases that shaped this project. Xinhao made significant contributions to the project direction in discussions. Karan Dalal joined this project full-time in June 2023. In collaboration with Xinhao, he co-led the development of our current codebase. Karan managed the experiments in Section 3, helped write the paper, and made significant contributions to the project direction in discussions. Jiarui Xu joined this project in March 2024. He led our architectural development since he joined, and made significant contributions to the project direction in discussions. Arjun Vikram joined this project in September 2023. He made significant contributions to our systems optimization, as well as current and earlier codebases. Genghan Zhang joined this project in January 2024. He provided critical insights and made significant improvements to our systems optimization. Yann Dubois joined this project in February 2024. He proposed our current instantiation of , and made significant contributions to the project direction in discussions. Xinlei Chen and Xiaolong Wang have been supporting this project since November 2022, and the direction of test-time training for many years. Without their support in compute and organization, this project could not have survived its early stage. They gave invaluable advice to our experiments. Sanmi Koyejo, Tatsunori Hashimoto, and Carlos Guestrin have been supporting this project since May 2023. They gave invaluable advice to our experiments and presentation. For example, Sanmi suggested us to focus on TTT-Linear, Tatsu suggested the experiments in Figure 2 (left), and Carlos outlined Section 2. Acknowledgements\n\nPart of the compute for this project is generously supported by the Google TPU Research Cloud program. XW is supported, in part, by the Amazon Research Award, the Cisco Faculty Award and the Qualcomm Innovation Fellowship. SK acknowledges support by NSF 2046795 and 2205329, NIFA award 2020-67021-32799, the Alfred P. Sloan Foundation, and Google Inc. TH is supported by a Sony Faculty Innovation Award and a gift from Panasonic. CG acknowledges support by the Air Force Office of Scientific Research (AFOSR), FA9550-20-1-0427, Stanford Human-Centered Artificial Intelligence (HAI) Institute, and gifts from Google and IBM. We would like to thank Rohan Taori, Xuechen Li, Allan Zhou, Ke Chen, and Guandao Yang for many helpful discussions, Menghao Guo for help with code release, Xinyang Geng for help with EasyLM, Hao Liu for help with the LWM codebase, David Hall for help with Levanter, Yossi Gandelsman and Yutong Bai for help at an early stage of the project, Mert Yuksekgonul for help with figures in the paper, Horace He and Azalia Mirhoseini for help with systems, Sharad Vikram and Roy Frostig for answering our questions about JAX and Pallas, Albert Gu and Tri Dao for helping us reproduce experiments in the Mamba paper, and Kilian Weinberger and Percy Liang for advice on presentation. Yu Sun is grateful to his PhD advisors, Alexei A. Efros and Moritz Hardt, for their many insights from years ago that eventually became part of this paper. References\n\n[1] Josh Achiam, Steven Adler, Sandhini Agarwal, Lama Ahmad, Ilge Akkaya, Florencia Leoni Aleman, Diogo Almeida, Janko Altenschmidt, Sam Altman, Shyamal Anadkat, et al. Gpt-4 technical report. arXiv preprint arXiv:2303.08774, 2023. [2] Marcin Andrychowicz, Misha Denil, Sergio Gomez, Matthew W Hoffman, David Pfau, Tom Schaul, Brendan Shillingford, and Nando De Freitas. Learning to learn by gradient descent by gradient descent. Advances in neural information processing systems, 29, 2016. [3] Authors Guild. You just found out your book was used to train ai.",
    "ttt-15": "now what?, 2023. Accessed: 2024-06-24. [4] Jimmy Ba, Geoffrey E Hinton, Volodymyr Mnih, Joel Z Leibo, and Catalin Ionescu. Using fast weights to attend to the recent past.",
    "ttt-16": "Advances in neural information processing systems, 29, 2016. [5] Maximilian Beck, Korbinian P\u00f6ppel, Markus Spanring, Andreas Auer, Oleksandra Prudnikova, Michael Kopp, G\u00fcnter Klambauer, Johannes Brandstetter, and Sepp Hochreiter. xlstm: Extended long short-term memory. arXiv preprint arXiv:2405.04517, 2024. [6] Yoshua Bengio, Samy Bengio, and Jocelyn Cloutier. Learning a synaptic learning rule.",
    "ttt-17": "Citeseer, 1990. [7] Hermanus Josephus Bierens. The nadaraya-watson kernel regression function estimator. (Serie Research Memoranda; No. 1988-58). Faculty of Economics and Business Administration, Vrije Universiteit Amsterdam., 1988. [8] Christopher M Bishop and Nasser M Nasrabadi. Pattern recognition and machine learning, volume 4. Springer, 2006. [9] Sid Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor Leahy, Kyle McDonell, Jason Phang, et al. Gpt-neox-20b: An open-source autoregressive language model. arXiv preprint arXiv:2204.06745, 2022. [10] L\u00e9on Bottou and Vladimir Vapnik. Local learning algorithms. Neural computation, 4(6):888\u2013900, 1992. [11] Leo Breiman, William Meisel, and Edward Purcell. Variable kernel estimates of multivariate densities. Technometrics, 19(2):135\u2013144, 1977. [12] Zongwu Cai. Weighted nadaraya\u2013watson regression estimation. Statistics & probability letters, 51(3):307\u2013318, 2001. [13] Tianqi Chen, Bing Xu, Chiyuan Zhang, and Carlos Guestrin. Training deep nets with sublinear memory cost, 2016. [14] Xinlei Chen, Haoqi Fan, Ross Girshick, and Kaiming He. Improved baselines with momentum contrastive learning.",
    "ttt-18": "arXiv preprint arXiv:2003.04297, 2020. [15] Yen-Chi Chen. A tutorial on kernel density estimation and recent advances.",
    "ttt-19": "Biostatistics & Epidemiology, 1(1):161\u2013187, 2017. [16] Kevin Clark, Kelvin Guu, Ming-Wei Chang, Panupong Pasupat, Geoffrey Hinton, and Mohammad Norouzi. Meta-learning fast weight language models. arXiv preprint arXiv:2212.02475, 2022. [17] Ronan Collobert, Fabian Sinz, Jason Weston, L\u00e9on Bottou, and Thorsten Joachims. Large scale transductive svms.",
    "ttt-20": "Journal of Machine Learning Research, 7(8), 2006. [18] Soham De, Samuel L Smith, Anushan Fernando, Aleksandar Botev, George Cristian-Muraru, Albert Gu, Ruba Haroun, Leonard Berrada, Yutian Chen, Srivatsan Srinivasan, et al. Griffin: Mixing gated linear recurrences with local attention for efficient language models.",
    "ttt-21": "arXiv preprint arXiv:2402.19427, 2024. [19] Harm de Vries. In the long (context) run, 2023. Accessed: 2024-06-24. [20] Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of deep networks.",
    "ttt-22": "In International conference on machine learning, pages 1126\u20131135. PMLR, 2017. [21] Daniel Y Fu, Tri Dao, Khaled K Saab, Armin W Thomas, Atri Rudra, and Christopher R\u00e9. Hungry hungry hippos: Towards language modeling with state space models.",
    "ttt-23": "arXiv preprint arXiv:2212.14052, 2022. [22] A. Gammerman, V. Vovk, and V. Vapnik. Learning by transduction. In In Uncertainty in Artificial Intelligence, pages 148\u2013155. Morgan Kaufmann, 1998. [23] Yossi Gandelsman, Yu Sun, Xinlei Chen, and Alexei A. Efros. Test-time training with masked autoencoders. Advances in Neural Information Processing Systems, 2022. [24] Leo Gao, Stella Biderman, Sid Black, Laurence Golding, Travis Hoppe, Charles Foster, Jason Phang, Horace He, Anish Thite, Noa Nabeshima, Shawn Presser, and Connor Leahy. The pile: An 800gb dataset of diverse text for language modeling, 2020. [25] Xinyang Geng. EasyLM: A Simple And Scalable Training Framework for Large Language Models. https://github.com/young-geng/EasyLM, mar 2023. https://github.com/young-geng/EasyLM. [26] Albert Gu and Tri Dao. Mamba: Linear-time sequence modeling with selective state spaces. arXiv preprint arXiv:2312.00752, 2023. [27] Albert Gu, Karan Goel, and Christopher R\u00e9. Efficiently modeling long sequences with structured state spaces. arXiv preprint arXiv:2111.00396, 2021. [28] Nicklas Hansen, Rishabh Jangir, Yu Sun, Guillem Aleny\u00e0, Pieter Abbeel, Alexei A Efros, Lerrel Pinto, and Xiaolong Wang. Self-supervised policy adaptation during deployment. arXiv preprint arXiv:2007.04309, 2020. [29] Moritz Hardt and Yu Sun. Test-time training on nearest neighbors for large language models.",
    "ttt-24": "arXiv preprint arXiv:2305.18466, 2023. [30] Horace He. Strangely, matrix multiplications on gpus run faster when given \"predictable\" data!",
    "ttt-25": "[short], 2024. Accessed: 2024-06-30. [31] Dan Hendrycks and Kevin Gimpel. Gaussian error linear units (gelus).",
    "ttt-26": "arXiv preprint arXiv:1606.08415, 2016. [32] Geoffrey E Hinton and David C Plaut. Using fast weights to deblur old memories. In Proceedings of the ninth annual conference of the Cognitive Science Society, pages 177\u2013186, 1987. [33] Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural computation, 9(8):1735\u20131780, 1997. [34] Jordan Hoffmann, Sebastian Borgeaud, Arthur Mensch, Elena Buchatskaya, Trevor Cai, Eliza Rutherford, Diego de Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, Tom Hennigan, Eric Noland, Katie Millican, George van den Driessche, Bogdan Damoc, Aurelia Guy, Simon Osindero, Karen Simonyan, Erich Elsen, Jack W. Rae, Oriol Vinyals, and Laurent Sifre. Training compute-optimal large language models, 2022. [35] John J Hopfield. Neural networks and physical systems with emergent collective computational abilities. Proceedings of the national academy of sciences, 79(8):2554\u20132558, 1982. [36] Kazuki Irie, R\u00f3bert Csord\u00e1s, and J\u00fcrgen Schmidhuber. The dual form of neural networks revisited: Connecting test time predictions to training patterns via spotlights of attention.",
    "ttt-27": "In International Conference on Machine Learning, pages 9639\u20139659. PMLR, 2022. [37] Kazuki Irie, Imanol Schlag, R\u00f3bert Csord\u00e1s, and J\u00fcrgen Schmidhuber. Going beyond linear transformers with recurrent fast weight programmers.",
    "ttt-28": "Advances in Neural Information Processing Systems, 34:7703\u20137717, 2021. [38] Vidit Jain and Erik Learned-Miller. Online domain adaptation of a pre-trained cascade of classifiers. In CVPR 2011, pages 577\u2013584. IEEE, 2011. [39] Thorsten Joachims. Learning to classify text using support vector machines, volume 668. Springer Science & Business Media, 2002. [40] Jared Kaplan, Sam McCandlish, Tom Henighan, Tom B Brown, Benjamin Chess, Rewon Child, Scott Gray, Alec Radford, Jeffrey Wu, and Dario Amodei. Scaling laws for neural language models. arXiv preprint arXiv:2001.08361, 2020. [41] Angelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and Fran\u00e7ois Fleuret. Transformers are rnns: Fast autoregressive transformers with linear attention.",
    "ttt-29": "In International conference on machine learning, pages 5156\u20135165. PMLR, 2020. [42] Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014. [43] Louis Kirsch and J\u00fcrgen Schmidhuber. Meta learning backpropagation and improving it. Advances in Neural Information Processing Systems, 34:14122\u201314134, 2021. [44] Ben Krause, Emmanuel Kahembwe, Iain Murray, and Steve Renals. Dynamic evaluation of neural sequence models. In International Conference on Machine Learning, pages 2766\u20132775. PMLR, 2018. [45] Ben Krause, Emmanuel Kahembwe, Iain Murray, and Steve Renals. Dynamic evaluation of transformer language models. arXiv preprint arXiv:1904.08378, 2019. [46] Woosuk Kwon, Zhuohan Li, Siyuan Zhuang, Ying Sheng, Lianmin Zheng, Cody Hao Yu, Joseph Gonzalez, Hao Zhang, and Ion Stoica. Efficient memory management for large language model serving with pagedattention. In Proceedings of the 29th Symposium on Operating Systems Principles, pages 611\u2013626, 2023. [47] Brenden M Lake, Tomer D Ullman, Joshua B Tenenbaum, and Samuel J Gershman. Building machines that learn and think like people. Behavioral and brain sciences, 40:e253, 2017. [48] Quoc V Le. Building high-level features using large scale unsupervised learning. In 2013 IEEE international conference on acoustics, speech and signal processing, pages 8595\u20138598. IEEE, 2013. [49] Hao Liu, Wilson Yan, Matei Zaharia, and Pieter Abbeel. World model on million-length video and language with blockwise ringattention. arXiv preprint arXiv:2402.08268, 2024. [50] Xuan Luo, Jia-Bin Huang, Richard Szeliski, Kevin Matzen, and Johannes Kopf. Consistent video depth estimation. ACM Transactions on Graphics (ToG), 39(4):71\u20131, 2020. [51] Dougal Maclaurin, David Duvenaud, and Ryan Adams. Gradient-based hyperparameter optimization through reversible learning. In International conference on machine learning, pages 2113\u20132122. PMLR, 2015. [52] Luke Metz, Niru Maheswaranathan, Brian Cheung, and Jascha Sohl-Dickstein. Meta-learning update rules for unsupervised representation learning.",
    "ttt-30": "arXiv preprint arXiv:1804.00222, 2018. [53] Ravi Teja Mullapudi, Steven Chen, Keyi Zhang, Deva Ramanan, and Kayvon Fatahalian. Online model distillation for efficient video inference.",
    "ttt-31": "arXiv preprint arXiv:1812.02699, 2018. [54] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine learning in Python. Journal of Machine Learning Research, 12:2825\u20132830, 2011. [55] Bo Peng, Eric Alcaide, Quentin Anthony, Alon Albalak, Samuel Arcadinho, Stella Biderman, Huanqi Cao, Xin Cheng, Michael Chung, Matteo Grella, et al. Rwkv: Reinventing rnns for the transformer era. arXiv preprint arXiv:2305.13048, 2023. [56] Bo Peng, Daniel Goldstein, Quentin Anthony, Alon Albalak, Eric Alcaide, Stella Biderman, Eugene Cheah, Teddy Ferdinan, Haowen Hou, Przemys\u0142aw Kazienko, et al. Eagle and finch: Rwkv with matrix-valued states and dynamic recurrence.",
    "ttt-32": "arXiv preprint arXiv:2404.05892, 2024. [57] Michael Poli, Stefano Massaroli, Eric Nguyen, Daniel Y Fu, Tri Dao, Stephen Baccus, Yoshua Bengio, Stefano Ermon, and Christopher R\u00e9. Hyena hierarchy: Towards larger convolutional language models.",
    "ttt-33": "arXiv preprint arXiv:2302.10866, 2023. [58] Zhen Qin, Xiaodong Han, Weixuan Sun, Dongxu Li, Lingpeng Kong, Nick Barnes, and Yiran Zhong. The devil in linear transformer. arXiv preprint arXiv:2210.10340, 2022. [59] Frank Rosenblatt. The perceptron: a probabilistic model for information storage and organization in the brain. Psychological review, 65(6):386, 1958. [60] Imanol Schlag, Kazuki Irie, and J\u00fcrgen Schmidhuber. Linear transformers are secretly fast weight programmers. In International Conference on Machine Learning, pages 9355\u20139366. PMLR, 2021. [61] J\u00fcrgen Schmidhuber. Evolutionary principles in self-referential learning, or on learning how to learn: the meta-meta-\u2026 hook. PhD thesis, Technische Universit\u00e4t M\u00fcnchen, 1987. [62] J\u00fcrgen Schmidhuber. Learning to control fast-weight memories: An alternative to dynamic recurrent networks. Neural Computation, 4(1):131\u2013139, 1992. [63] Noam Shazeer. Glu variants improve transformer, 2020. [64] Sam Shleifer, Jason Weston, and Myle Ott. Normformer: Improved transformer pretraining with extra normalization.",
    "ttt-34": "arXiv preprint arXiv:2110.09456, 2021. [65] Assaf Shocher, Nadav Cohen, and Michal Irani. \u201czero-shot\u201d super-resolution using deep internal learning. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 3118\u20133126, 2018. [66] Benjamin Spector, Aaryan Singhal, Simran Arora, and Chris Re. Thunderkittens. https://github.com/HazyResearch/ThunderKittens, 2023. [67] Jianlin Su, Yu Lu, Shengfeng Pan, Ahmed Murtadha, Bo Wen, and Yunfeng Liu. Roformer: Enhanced transformer with rotary position embedding, 2023. [68] Yu Sun, Wyatt L Ubellacker, Wen-Loong Ma, Xiang Zhang, Changhao Wang, Noel V Csomay-Shanklin, Masayoshi Tomizuka, Koushil Sreenath, and Aaron D Ames. Online learning of unknown dynamics for model-based controllers in legged locomotion. IEEE Robotics and Automation Letters, 6(4):8442\u20138449, 2021. [69] Yu Sun, Xiaolong Wang, Zhuang Liu, John Miller, Alexei Efros, and Moritz Hardt. Test-time training with self-supervision for generalization under distribution shifts.",
    "ttt-35": "In International Conference on Machine Learning, pages 9229\u20139248. PMLR, 2020. [70] Sebastian Thrun and Lorien Pratt. Learning to learn: Introduction and overview. In Learning to learn, pages 3\u201317. Springer, 1998. [71] Tijmen Tieleman and Geoffrey Hinton. Using fast weights to improve persistent contrastive divergence. In Proceedings of the 26th annual international conference on machine learning, pages 1033\u20131040, 2009. [72] Philippe Tillet, Hsiang-Tsung Kung, and David Cox. Triton: an intermediate language and compiler for tiled neural network computations. In Proceedings of the 3rd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages, pages 10\u201319, 2019. [73] Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, Dan Bikel, Lukas Blecher, Cristian Canton Ferrer, Moya Chen, Guillem Cucurull, David Esiobu, Jude Fernandes, Jeremy Fu, Wenyin Fu, Brian Fuller, Cynthia Gao, Vedanuj Goswami, Naman Goyal, Anthony Hartshorn, Saghar Hosseini, Rui Hou, Hakan Inan, Marcin Kardas, Viktor Kerkez, Madian Khabsa, Isabel Kloumann, Artem Korenev, Punit Singh Koura, Marie-Anne Lachaux, Thibaut Lavril, Jenya Lee, Diana Liskovich, Yinghai Lu, Yuning Mao, Xavier Martinet, Todor Mihaylov, Pushkar Mishra, Igor Molybog, Yixin Nie, Andrew Poulton, Jeremy Reizenstein, Rashi Rungta, Kalyan Saladi, Alan Schelten, Ruan Silva, Eric Michael Smith, Ranjan Subramanian, Xiaoqing Ellen Tan, Binh Tang, Ross Taylor, Adina Williams, Jian Xiang Kuan, Puxin Xu, Zheng Yan, Iliyan Zarov, Yuchen Zhang, Angela Fan, Melanie Kambadur, Sharan Narang, Aurelien Rodriguez, Robert Stojnic, Sergey Edunov, and Thomas Scialom. Llama 2: Open foundation and fine-tuned chat models, 2023. [74] Vladimir Vapnik. The nature of statistical learning theory. Springer science & business media, 2013. [75] Pascal Vincent, Hugo Larochelle, Yoshua Bengio, and Pierre-Antoine Manzagol. Extracting and composing robust features with denoising autoencoders. In ICML, page 1096\u20131103, 2008. [76] Renhao Wang, Yu Sun, Yossi Gandelsman, Xinlei Chen, Alexei A Efros, and Xiaolong Wang. Test-time training on video streams. arXiv preprint arXiv:2307.05014, 2023. [77] Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, R\u00e9mi Louf, Morgan Funtowicz, et al. Huggingface\u2019s transformers: State-of-the-art natural language processing. arXiv preprint arXiv:1910.03771, 2019. [78] Wenhan Xiong, Jingyu Liu, Igor Molybog, Hejia Zhang, Prajjwal Bhargava, Rui Hou, Louis Martin, Rashi Rungta, Karthik Abinav Sankararaman, Barlas Oguz, Madian Khabsa, Han Fang, Yashar Mehdad, Sharan Narang, Kshitiz Malik, Angela Fan, Shruti Bhosale, Sergey Edunov, Mike Lewis, Sinong Wang, and Hao Ma. Effective long-context scaling of foundation models, 2023. [79] Songlin Yang, Bailin Wang, Yikang Shen, Rameswar Panda, and Yoon Kim. Gated linear attention transformers with hardware-efficient training. arXiv preprint arXiv:2312.06635, 2023. [80] Biao Zhang and Rico Sennrich. Root mean square layer normalization, 2019. [81] Hao Zhang, Alexander C Berg, Michael Maire, and Jitendra Malik. Svm-knn: Discriminative nearest neighbor classification for visual category recognition.",
    "ttt-36": "In 2006 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR\u201906), volume 2, pages 2126\u20132136. IEEE, 2006. Appendix A Dual Form\n\nThe goal of this section is to derive the dual form for general MLPs of arbitrary depth, with nonlinear activations. Without loss of generality, consider for convenience, and consider only the first mini-batch, where . Denote\n\nx ^ t = \u03b8 K \u200b x t , y t = \u03b8 V \u200b x t , x \u00af t = \u03b8 Q \u200b x t . formulae-sequence subscript ^ \ud835\udc65 \ud835\udc61 subscript \ud835\udf03 \ud835\udc3e subscript \ud835\udc65 \ud835\udc61 formulae-sequence subscript \ud835\udc66 \ud835\udc61 subscript \ud835\udf03 \ud835\udc49 subscript \ud835\udc65 \ud835\udc61 subscript \u00af \ud835\udc65 \ud835\udc61 subscript \ud835\udf03 \ud835\udc44 subscript \ud835\udc65 \ud835\udc61 \\hat{x}_{t}=\\theta_{K}x_{t},~{}~{}~{}y_{t}=\\theta_{V}x_{t},~{}~{}~{}\\bar{x}_{t}=\\theta_{Q}x_{t}. Also denote , and and analogously. In general, uppercase letters denote matrices whose columns are vectors denoted by the corresponding lowercase letter. For a network with layers, denote the initial parameters in layer by . Our convention is to use superscripts for the layer and subscripts for time. A.1 Forward pass\n\nDuring the initial forward pass of TTT, we denote the input to layer by , with . Now we write the forward pass of TTT using these notations. For :\n\n\u2022\n\n\u2022\n\nwhere for can be any element-wise operation () with derivative . Given , we compute the loss:\n\nl = 1 2 \u200b \u2113 \u200b ( W 0 1 , \u2026 , W 0 K ; X ^ ) = 1 2 \u200b \u2016 X ^ K + 1 \u2212 Y \u2016 F 2 = \u2211 t = 1 b l t , \ud835\udc59 1 2 \u2113 superscript subscript \ud835\udc4a 0 1 \u2026 superscript subscript \ud835\udc4a 0 \ud835\udc3e ^ \ud835\udc4b 1 2 superscript subscript norm superscript ^ \ud835\udc4b \ud835\udc3e 1 \ud835\udc4c \ud835\udc39 2 superscript subscript \ud835\udc61 1 \ud835\udc4f subscript \ud835\udc59 \ud835\udc61 l=\\frac{1}{2}\\ell\\left(W_{0}^{1},\\dots,W_{0}^{K};\\hat{X}\\right)=\\frac{1}{2}\\big{\\|}\\hat{X}^{K+1}-Y\\big{\\|}_{F}^{2}=\\sum_{t=1}^{b}l_{t},\n\nwhere is the same as defined in Equation 4, except scaled by for convenience.",
    "ttt-37": "All the operations above (except ) are matmuls and sums, therefore are hardware efficient. Both the primal form and the dual form share these initial operations. A.2 Primal form\n\nThe primal form first computes for , then updates . Finally, given , the primal form repeats the forward pass with the updated s. For :\n\n\u2022\n\n, for\n\n\u2022\n\n, for\n\nwhere contains the output tokens. Note that a standard backward pass only computes the sum of the gradients:\n\n\u2207 W 0 k l = \u2211 t = 1 b \u2207 W 0 k l t = \u2211 t = 1 b G t k , subscript \u2207 superscript subscript \ud835\udc4a 0 \ud835\udc58 \ud835\udc59 superscript subscript \ud835\udc61 1 \ud835\udc4f subscript \u2207 subscript superscript \ud835\udc4a \ud835\udc58 0 subscript \ud835\udc59 \ud835\udc61 superscript subscript \ud835\udc61 1 \ud835\udc4f subscript superscript \ud835\udc3a \ud835\udc58 \ud835\udc61 \\nabla_{W_{0}^{k}}l=\\sum_{t=1}^{b}\\nabla_{W^{k}_{0}}l_{t}=\\sum_{t=1}^{b}G^{k}_{t},\n\nso the computation of the individual terms in the sum for cannot be batched together into matmuls. Similarly, the forward pass in primal form uses a different for each , therefore also cannot be batched in the same way as a standard forward pass. These non-standard passes have poor hardware efficiency. A.3 Dual form\n\nAs discussed in Subsection 2.5, the goal of the dual form is to compute and with only matmuls and light-weight operations such as sums, , and . To achieve this goal, we avoid explicitly computing the intermediate variables: and for . The dual form first computes , then takes a standard backward pass. For :\n\n\u2022\n\n\u2022\n\n\u2022\n\nNow we can already compute . To compute the output tokens, we do another forward pass. For :\n\n\u2022\n\n\u2022\n\nBy the end of the forward pass, we have computed . While this forward pass is non-standard, it only contains matmuls, sums, , and mask, therefore is efficient like the standard forward pass. A.4 Derivation\n\nTo derive the dual form, we show that:\n\nZ \u00af k = W k \u200b X \u00af k \u2212 \u2207 Z k l \u22c5 mask \u200b ( ( X ^ k ) T \u200b X \u00af k ) superscript \u00af \ud835\udc4d \ud835\udc58 superscript \ud835\udc4a \ud835\udc58 superscript \u00af \ud835\udc4b \ud835\udc58 subscript \u2207 superscript \ud835\udc4d \ud835\udc58 \u22c5 \ud835\udc59 mask superscript superscript ^ \ud835\udc4b \ud835\udc58 \ud835\udc47 superscript \u00af \ud835\udc4b \ud835\udc58 \\bar{Z}^{k}=W^{k}\\bar{X}^{k}-\\nabla_{Z^{k}}l\\cdot\\texttt{mask}\\left(\\left(\\hat{X}^{k}\\right)^{T}\\bar{X}^{k}\\right)\n\nis the same as what would be computed in the primal form.",
    "ttt-38": "Specifically, we show that each column of in the forward pass of the dual equals to in the forward pass of the primal.",
    "ttt-39": "We invoke a simple fact. Fact 1. Define matrices , , and .171717 Our matrix would usually be denoted by in another context. We use to avoid confusion with the layer number . Define , and , then . Now plug , , , and into the fact above, we have shown the desired equality. Note that the and used above can be extended to arbitrary functions that are not necessarily element-wise operations, including normalization layers. This extension can be achieved through, for example, vjp (vector-Jacobian product) in standard libraries for automatic differentiation such as JAX and PyTorch. However, the dual form cannot accelerate operations inside or its vjp. Appendix B Nadaraya-Watson estimator\n\nDerivation for the Nadaraya-Watson estimator. Throughout this section, we use to denote the input token as a random variable. Our desired output is the corresponding output token, another random variable . This is formulated as estimating the conditional expectation of :\n\n\ud835\udd3c \u200b [ \ud835\udc33 | \ud835\udc31 = x ] = \u222b p \u200b ( z | x ) \u200b z \u200b \ud835\udc51 z = \u222b p \u200b ( x , z ) p \u200b ( x ) \u200b z \u200b \ud835\udc51 z . \ud835\udd3c delimited-[] conditional \ud835\udc33 \ud835\udc31 \ud835\udc65 \ud835\udc5d conditional \ud835\udc67 \ud835\udc65 \ud835\udc67 differential-d \ud835\udc67 \ud835\udc5d \ud835\udc65 \ud835\udc67 \ud835\udc5d \ud835\udc65 \ud835\udc67 differential-d \ud835\udc67 \\mathbb{E}[\\mathbf{z}|\\mathbf{x}=x]=\\int p(z|x)~{}z~{}dz=\\int\\frac{p(x,z)}{p(x)}~{}z~{}dz. Since the true probability distributions and are unknown, we replace them with their kernel density estimations. Specifically, the kernel density estimation for is:\n\np ^ \u200b ( x ) = 1 n \u200b \u2211 i = 1 n \u03ba \u200b ( x , x i ) , ^ \ud835\udc5d \ud835\udc65 1 \ud835\udc5b superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 \\hat{p}(x)=\\frac{1}{n}\\sum_{i=1}^{n}\\kappa(x,x_{i}),\n\nwhere each is a piece of training data in general. (Recall that for our paper, is specifically training data for the inner loop, i.e. a token, which matches our notation in the main text.)\n\nFor estimating , we use the product kernel:\n\np ^ \u200b ( x , z ) = 1 n \u200b \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b \u03ba \u2032 \u200b ( z , z i ) . ^ \ud835\udc5d \ud835\udc65 \ud835\udc67 1 \ud835\udc5b superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 superscript \ud835\udf05 \u2032 \ud835\udc67 subscript \ud835\udc67 \ud835\udc56 \\hat{p}(x,z)=\\frac{1}{n}\\sum_{i=1}^{n}\\kappa(x,x_{i})~{}\\kappa^{\\prime}(z,z_{i}). At first sight, it seems absurd to factor the joint probability into two seemingly independent kernels.",
    "ttt-40": "But in this case, can actually be any dependent on , since it will be integrated out. So the two kernels do not need to be independent. Plugging in those estimations, we obtain the Nadaraya-Watson estimator:\n\n\ud835\udd3c ^ \u200b [ \ud835\udc33 | \ud835\udc31 = x ] ^ \ud835\udd3c delimited-[] conditional \ud835\udc33 \ud835\udc31 \ud835\udc65 \\displaystyle\\hat{\\mathbb{E}}[\\mathbf{z}|\\mathbf{x}=x] = \u222b p ^ \u200b ( x , z ) p ^ \u200b ( x ) \u200b z \u200b \ud835\udc51 z absent ^ \ud835\udc5d \ud835\udc65 \ud835\udc67 ^ \ud835\udc5d \ud835\udc65 \ud835\udc67 differential-d \ud835\udc67 \\displaystyle=\\int\\frac{\\hat{p}(x,z)}{\\hat{p}(x)}~{}z~{}dz = 1 p ^ \u200b ( x ) \u200b \u222b p ^ \u200b ( x , z ) \u200b z \u200b \ud835\udc51 z absent 1 ^ \ud835\udc5d \ud835\udc65 ^ \ud835\udc5d \ud835\udc65 \ud835\udc67 \ud835\udc67 differential-d \ud835\udc67 \\displaystyle=\\frac{1}{\\hat{p}(x)}\\int\\hat{p}(x,z)~{}z~{}dz = 1 \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b \u222b \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b \u03ba \u2032 \u200b ( z , z i ) \u200b z \u200b d \u200b z absent 1 superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 superscript \ud835\udf05 \u2032 \ud835\udc67 subscript \ud835\udc67 \ud835\udc56 \ud835\udc67 \ud835\udc51 \ud835\udc67 \\displaystyle=\\frac{1}{\\sum_{i=1}^{n}\\kappa(x,x_{i})}\\int\\sum_{i=1}^{n}\\kappa(x,x_{i})~{}\\kappa^{\\prime}(z,z_{i})~{}z~{}dz = 1 \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b \u222b \u03ba \u2032 \u200b ( z , z i ) \u200b z \u200b \ud835\udc51 z absent 1 superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 superscript \ud835\udf05 \u2032 \ud835\udc67 subscript \ud835\udc67 \ud835\udc56 \ud835\udc67 differential-d \ud835\udc67 \\displaystyle=\\frac{1}{\\sum_{i=1}^{n}\\kappa(x,x_{i})}\\sum_{i=1}^{n}\\kappa(x,x_{i})~{}\\int\\kappa^{\\prime}(z,z_{i})~{}z~{}dz = 1 \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b \u2211 i = 1 n \u03ba \u200b ( x , x i ) \u200b z i .",
    "ttt-41": "absent 1 superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 superscript subscript \ud835\udc56 1 \ud835\udc5b \ud835\udf05 \ud835\udc65 subscript \ud835\udc65 \ud835\udc56 subscript \ud835\udc67 \ud835\udc56 \\displaystyle=\\frac{1}{\\sum_{i=1}^{n}\\kappa(x,x_{i})}\\sum_{i=1}^{n}\\kappa(x,x_{i})~{}z_{i}.",
    "ttt-42": "Asymmetric kernels. In modern days, people think of kernels as positive semi-definite, which might not be guaranteed for unless . However, people working on kernels decades ago, around the time when the Nadaraya-Watson estimator was popular, have been very lenient with the choice of kernels, and asymmetric kernels such as our in Equation 9 have enjoyed a long tradition: When a kernel estimator uses , it is known as a balloon estimator [15].",
    "ttt-43": "Papers such as Breiman et al. [11] have even used as a function of , known as sample-adaptive smoothing. Appendix C Experiment details\n\nArchitectures. Our Transformer strictly follows the construction in the Mamba paper, where Transformer is called Transformer++. Specifically, the Transformer architecture is based on Llama [73], with rotary positional encodings (RoPE) [67], SwiGLU MLP blocks [63], and RMSNorm [80] instead of LayerNorm. Our Mamba baseline uses the public code provided by the authors. We have verified that our baselines can reproduce the numbers reported in [26]. Training configurations. Our training configurations are in Table 3, which simply reproduces Table 12 in the Mamba paper. As discussed in Footnote 12, all models are trained with a batch size of 0.5M tokens regardless of context length. All of our optimization hyper-parameters follow the \u201cimproved recipe\" in Appendix E.2 of the Mamba paper, reproduced below:\n\n\u2022\n\nAdamW optimizer:\n\n\u2022\n\nCosine schedule: decay to end learning rate\n\n\u2022\n\nLinear learning rate warmup over 10% of the training steps\n\n\u2022\n\nWeight decay: 0.1\n\n\u2022\n\nGradient clipping: 1.0\n\n\u2022\n\nNo Dropout\n\n\u2022\n\nMixed Precision\n\nAs discussed in Footnote 10, all models are trained using the Llama tokenizer [73]. For experiments on the Pile, this is the only difference with the recipe in the Mamba paper, which uses two other tokenizers. For experiments on Books, we find that the original angle of the RoPE encoding [67] is sub-optimal for our Transformer baseline in long context. Starting at context length 4k, we try following the Llama Long paper [78], and use the better perplexity for Transformer (both pretrain and finetune). Transformer finetuning. Finetuning starts a new cosine schedule with the same optimization hyper-parameter as training from scratch, except the peak learning rate. We try three peak learning rates for finetuning: 1e-5, 1e-4, and 1e-3, and select for the best perplexity. We observe that 1e-4 works the best for the 125M models, while 1e-5 works the best for 350M and larger. This observation is reasonable considering that the end learning rate for the Chinchilla recipe is 1e-5. Learning rate for TTT. As mentioned in Subsection 2.7, the inner-loop base learning rate is set to 1 for TTT-Linear and 0.1 for TTT-MLP. Our heuristic for setting is similar to how people set the outer-loop learning rate for regular training: We tried and used the largest value that does not cause instabilities. For TTT-MLP, we use linear warmup for over 10% of the training steps, similar to regular training. The number of training steps in the inner loop is (assume divisible). For TTT-Linear, we tried linear warmup in the inner loop but did not observe a difference. Experiments in Figure 2 (right) and Figure 14. To ensure fairness to Mamba, all methods in these experiments have matched training FLOPs and are trained with the same recipe (last row of Table 3) as Mamba 1.4B. To match FLOPs with Mamba, Transformer has 19 blocks instead of 24. For TTT-Linear and TTT-MLP, their FLOPs are already close to those of Mamba, so we change the hidden dimension of the MLP blocks from 5504 to 5808 (TTT-Linear) and 5248 (TTT-MLP). Gradient checkpointing through time. By default, libraries such as JAX and PyTorch save the intermediate activations during a forward pass so they can be reused during the backward pass. However, for a TTT layer with as hidden state, this default saves , which uses too much memory. With TTT mini-batch and the dual form, we still need to save (assume divisible) s at the end of the mini-batches. A standard technique to save memory in this scenario is gradient checkpointing [13], which is usually applied through layers, but we apply it through time. \u25c4 Feeling lucky? Conversion report Report an issue View original on arXiv\u25ba\n\nCopyright Privacy Policy\n\nGenerated on Mon Aug 5 18:07:45 2024 by LaTeXML"
}