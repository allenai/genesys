{
    "xlstm-0": "xLSTM: Extended Long Short-Term Memory\n\nMaximilian Beck* 1, 2 Korbinian P\u00f6ppel* 1, 2 Markus Spanring 1 Andreas Auer 1, 2 Oleksandra Prudnikova 1 Michael Kopp G\u00fcnter Klambauer 1, 2 Johannes Brandstetter 1, 2, 3 Sepp Hochreiter 1, 2, 3 *Equal contribution 1ELLIS Unit, LIT AI Lab, Institute for Machine Learning, JKU Linz, Austria 2NXAI Lab, Linz, Austria, 3NXAI GmbH, Linz, Austria\n\nAbstract\n\nIn the 1990s, the constant error carousel and gating were introduced as the central ideas of the Long Short-Term Memory (LSTM).",
    "xlstm-1": "Since then, LSTMs have stood the test of time and contributed to numerous deep learning success stories, in particular they constituted the first Large Language Models (LLMs). However, the advent of the Transformer technology with parallelizable self-attention at its core marked the dawn of a new era, outpacing LSTMs at scale. We now raise a simple question: How far do we get in language modeling when scaling LSTMs to billions of parameters, leveraging the latest techniques from modern LLMs, but mitigating known limitations of LSTMs? Firstly, we introduce exponential gating with appropriate normalization and stabilization techniques. Secondly, we modify the LSTM memory structure, obtaining: (i) sLSTM with a scalar memory, a scalar update, and new memory mixing, (ii) mLSTM that is fully parallelizable with a matrix memory and a covariance update rule. Integrating these LSTM extensions into residual block backbones yields xLSTM blocks that are then residually stacked into xLSTM architectures. Exponential gating and modified memory structures boost xLSTM capabilities to perform favorably when compared to state-of-the-art Transformers and State Space Models, both in performance and scaling. Introduction\n\nThe Long Short-Term Memory (LSTM) ideas , i.e., the constant error carousel and gating, were introduced to overcome the vanishing gradient problem of recurrent neural networks : $$\\begin{aligned} \\label{eq:lstm_idea} \\eqnmarkbox[OliveGreen]{}{c_t} \\ = \\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ \\eqnmarkbox[OliveGreen]{}{c_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ \\eqnmarkbox[OliveGreen]{}{z_t} \\ , \\quad h_t \\ = \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ro_t} \\ \\psi({\\eqnmarkbox[OliveGreen]{}{c_t}}) \\ . \\end{aligned}$$ The constant error carousel is the additive update of the cell state ct \u2212 1 (green) by cell inputs zt and moderated by sigmoid gates (blue). The input gate $\\Ri_t$ and the forget gate $\\Rf_t$ control this update, while the output gate $\\Ro_t$ controls the output of the memory cell, i.e. the hidden state ht. The cell state is normalized or squashed by \u03c8 and then output gating gives the hidden state. LSTMs have been successfully applied to various domains , and prevailed over text generation until the dawn of Transformers in 2017 . The effectiveness of LSTMs has been demonstrated at numerous sequence-related tasks such as generating text , generating handwritings , sequence-to-sequence translation , evaluating computer programs , generating image captions , generating source code , rainfall-runoff modeling , or hydrological models for flooding warnings . In reinforcement learning, LSTMs are the best performing sequence models, e.g., the AlphaStar model for StarCraft II , the OpenAI Five model for Dota 2 , and models of the magnetic controller for nuclear fusion . LSTMs excel at learning abstractions, i.e., adeptly extracting semantic information and storing it in their memory cells , which for example became evident by number and syntax neurons , linguistic neurons , and sentiment neurons . LSTMs are still used in highly relevant applications and have stood the test of time. r.6\n\nDespite their tremendous successes, LSTMs have three main limitations: (i) Inability to revise storage decisions. We exemplify this limitation via the Nearest Neighbor Search problem (see also Appendix 8.0.0.2): With a reference vector given, a sequence must be scanned sequentially for the most similar vector in order to provide its attached value at sequence end. The left panel of Figure [fig:lstmProblems] shows the mean squared error at this task. LSTM struggles to revise a stored value when a more similar vector is found, while our new xLSTM remediates this limitation by exponential gating. (ii) Limited storage capacities, i.e., information must be compressed into scalar cell states. We exemplify this limitation via Rare Token Prediction. In the right panel of Figure [fig:lstmProblems], the perplexity of token prediction on Wikitext-103 is given for buckets of different token frequency. LSTM performs worse on rare tokens because of its limited storage capacities. Our new xLSTM solves this problem by a matrix memory. (iii) Lack of parallelizability due to memory mixing, i.e., the hidden-hidden connections between hidden states from one time step to the next, which enforce sequential processing. These limitations of LSTM have paved the way for the emergence of Transformers in language modeling. What performances can we achieve in language modeling when overcoming these limitations and scaling LSTMs to the size of current Large Language Models? Extended Long Short-Term Memory\n\nTo overcome the LSTM limitations, Extended Long Short-Term Memory (xLSTM) introduces two main modifications to the LSTM idea of Equation [eq:lstm_idea]. Those modifications \u2013 exponential gating and novel memory structures \u2013 enrich the LSTM family by two members: (i) the new sLSTM (see Section 2.2) with a scalar memory, a scalar update, and memory mixing, and (ii) the new mLSTM (see Section 2.3) with a matrix memory and a covariance (outer product) update rule, which is fully parallelizable. Both sLSTM and mLSTM enhance the LSTM through exponential gating. To enable parallelization, the mLSTM abandons memory mixing, i.e., the hidden-hidden recurrent connections. Both mLSTM and sLSTM can be extended to multiple memory cells, where sLSTM features memory mixing across cells. Further, the sLSTM can have multiple heads without memory mixing across the heads, but only memory mixing across cells within each head. This introduction of heads for sLSTM together with exponential gating establishes a new way of memory mixing. For mLSTM multiple heads and multiple cells are equivalent. Integrating these new LSTM variants into residual block modules results in xLSTM blocks (see Section 2.4.0.1). Residually stacking those xLSTM blocks in architectures provides xLSTM architectures (see Section 2.4.0.2). See Figure 1 for the xLSTM architecture with its components. Review of the Long Short-Term Memory\n\nThe original LSTM idea introduced the scalar memory cell as a central processing and storage unit that avoids vanishing gradients through the constant error carousel (the cell state update). The memory cell contains three gates: input, output, and forget gate. The forget gate has been introduced by . The LSTM memory cell update rules at time step t are: $$\\begin{aligned} \\eqnmarkbox[OliveGreen]{}{c_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ \\eqnmarkbox[OliveGreen]{}{c_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ \\eqnmarkbox[OliveGreen]{}{z_t} & & &\\text{cell state} \\\\ h_t \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ro_t} \\ \\tilde{h}_t \\ , & \\tilde{h}_t \\ &= \\ \\psi \\left( \\eqnmarkbox[OliveGreen]{}{c_t}\\right) &\\text{hidden state} \\\\ \\eqnmarkbox[OliveGreen]{}{z_t} \\ &= \\ \\varphi \\left( \\tilde{z}_t \\right) \\ , &\\tilde{z}_t \\ &= \\ \\Bw^\\top_{z} \\ \\Bx_t \\ + \\ r_{z} h_{t-1} \\ + \\ b_{z} \\ \\ &\\text{cell input} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ &= \\ \\sigma \\left( \\tilde{\\Ri}_t \\right) \\ , &\\tilde{\\Ri}_t \\ &= \\ \\Bw^\\top_{\\Ri} \\ \\Bx_t \\ + \\ r_{\\Ri} \\ h_{t-1} \\ + \\ b_{\\Ri} \\ \\ &\\text{input gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ &= \\ \\sigma \\left( \\tilde{\\Rf}_t \\right) \\ , &\\tilde{\\Rf}_t \\ &= \\ \\Bw^\\top_{\\Rf} \\ \\Bx_t \\ + \\ r_{\\Rf} \\ h_{t-1} \\ + \\ b_{\\Rf} \\ \\ &\\text{forget gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Ro_t} \\ &= \\ \\sigma \\left( \\tilde{\\Ro}_t \\right) \\ , &\\tilde{\\Ro}_t \\ &= \\ \\Bw^\\top_{\\Ro} \\ \\Bx_t \\ + \\ r_{\\Ro} \\ h_{t-1} \\ + \\ b_{\\Ro} \\ \\ &\\text{output gate} \\end{aligned}$$ The weight vectors $\\Bw_{z}$, $\\Bw_{\\Ri}$, $\\Bw_{\\Rf}$, and $\\Bw_{\\Ro}$ correspond to the input weight vectors between inputs $\\Bx_t$ and cell input, input gate, forget gate, and output gate, respectively.",
    "xlstm-2": "The weights rz, $r_{\\Ri}$, $r_{\\Rf}$, and $r_{\\Ro}$ correspond to the recurrent weights between hidden state ht \u2212 1 and cell input, input gate, forget gate, and output gate, respectively. bz, $b_{\\Ri}$, $b_{\\Rf}$, and $b_{\\Ro}$ are the corresponding bias terms. \u03c6 and \u03c8 are the cell input and hidden state activation functions (typically tanh ). \u03c8 is used to normalize or squash the cell state, which would be unbounded otherwise. All gate activation functions are sigmoid, i.e., \u03c3(x) = 1/(1+exp(\u2212x)). In later formulations, multiple memory cells were combined in a vector, which allows the usage of recurrent weight matrices to mix the cell outputs of memory cells , for more details see Appendix 7.1. Ablation studies showed that all components of the memory cell are crucial . sLSTM\n\nTo empower LSTMs with the ability to revise storage decisions, we introduce exponential gates (red) together with normalization and stabilization. In particular, input and forget gates can have exponential activation functions. For normalization, we introduce a normalizer state that sums up the product of input gate times all future forget gates. The sLSTM forward pass is: $$\\begin{aligned} \\label{eq:slstmforward} \\eqnmarkbox[OliveGreen]{}{c_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ \\eqnmarkbox[OliveGreen]{}{c_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ \\eqnmarkbox[OliveGreen]{}{z_t} & & &\\text{cell state} \\\\ \\eqnmarkbox[OliveGreen]{}{n_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ \\eqnmarkbox[OliveGreen]{}{n_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} & & &\\text{normalizer state} \\\\ h_t \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ro_t} \\ \\tilde{h}_t \\ , &\\tilde{h}_t \\ &= \\ \\eqnmarkbox[OliveGreen]{}{c_t} / \\eqnmarkbox[OliveGreen]{}{n_t} &\\text{hidden state} \\\\ \\eqnmarkbox[OliveGreen]{}{z_t} \\ &= \\ \\varphi \\left( \\tilde{z}_t \\right) \\ , &\\tilde{z}_t \\ &= \\ \\Bw^\\top_{z} \\ \\Bx_t \\ + \\ r_{z} h_{t-1} \\ + \\ b_{z} &\\text{cell input} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ &= \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\left( \\tilde{\\Ri}_t \\right) \\ , &\\tilde{\\Ri}_t \\ &= \\ \\Bw^\\top_{\\Ri} \\ \\Bx_t \\ + \\ r_{\\Ri} \\ h_{t-1} \\ + \\ b_{\\Ri} &\\text{input gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ &= \\ \\sigma \\left( \\tilde{\\Rf}_t \\right) \\ \\text{OR} \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\left( \\tilde{\\Rf}_t \\right) \\ , &\\tilde{\\Rf}_t \\ &= \\ \\Bw^\\top_{\\Rf} \\ \\Bx_t \\ + \\ r_{\\Rf} \\ h_{t-1} \\ + \\ b_{\\Rf} &\\text{forget gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Ro_t} \\ &= \\ \\sigma \\left( \\tilde{\\Ro}_t \\right) \\ , &\\tilde{\\Ro}_t \\ &= \\ \\Bw^\\top_{\\Ro} \\ \\Bx_t \\ + \\ r_{\\Ro} \\ h_{t-1} \\ + \\ b_{\\Ro} &\\text{output gate} \\end{aligned}$$\n\nWe broadcast the original LSTM gating techniques, i.e., input- and/or hidden-dependent gating plus bias term, to the new architectures. Exponential activation functions can lead to large values that cause overflows. Therefore, we stabilize gates with an additional state $\\eqnmarkbox[OliveGreen]{}{m_t}$ : $$\\begin{aligned} \\label{eq:slstmstabil} \\eqnmarkbox[OliveGreen]{}{m_t} \\ &= \\ \\max \\left( \\log ( \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} ) + \\eqnmarkbox[OliveGreen]{}{m_{t-1}} , \\log ( \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} ) \\right) &\\text{stabilizer state} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri'_t} \\ &= \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\left( \\log \\left ( \\Ri_t \\right) - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) \\ = \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\left( \\tilde{\\Ri}_t - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) \\ \\, &\\text{stabil. input gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf'_t} \\ &= \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\left( \\log \\left( \\Rf_t \\right) + \\eqnmarkbox[OliveGreen]{}{m_{t-1}} - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) \\ \\, &\\text{stabil. forget gate} \\end{aligned}$$\n\nWe show in Appendix 7.2, that replacing $\\Rf_t$ by $\\Rf'_t$ and $\\Ri_t$ by $\\Ri'_t$ in the forward pass does neither change the output of the whole network nor the derivatives of the loss with respect to the parameters. New Memory Mixing. sLSTM can have multiple memory cells like the original LSTM (see Appendix 7.2). Multiple memory cells enable memory mixing via recurrent connections $\\BR_{\\Bz}$, $\\BR_{\\bfi}$, $\\BR_{\\bff}$, $\\BR_{\\bfo}$ from hidden state vector $\\Bh$ to memory cell input $\\Bz$ and the gates $\\bfi$, $\\bff$, $\\bfo$, respectively. A new aspect in memory mixing is the effect of exponential gating. The new sLSTM can have multiple heads with memory mixing within each head but not across heads. The introduction of heads for sLSTM together with exponential gating establishes a new way of memory mixing. mLSTM\n\nTo enhance storage capacities of LSTMs, we increase the LSTM memory cell from a scalar $c \\in \\dR$ to a matrix $\\BC \\in \\dR^{d \\times d}$. Hence, retrieval is performed via a matrix multiplication. At time t, we want to store a pair of vectors, the key $\\Bk_t \\in \\dR^d$ and the value $\\Bv_t \\in \\dR^d$ (we use the Transformer terminology). Later at time t + \u03c4, the value $\\Bv_t$ should be retrieved by a query vector $\\Bq_{t+\\tau} \\in \\dR^d$. This is the setting of Bidirectional Associative Memories (BAMs) . The covariance update rule for storing a key-value pair is $$\\begin{aligned} \\BC_t \\ &= \\ \\BC_{t-1} \\ + \\ \\Bv_{t} \\ \\Bk_t^\\top \\ . \\end{aligned}$$ We assume a layer-norm before projecting inputs to keys and values, therefore they have zero mean. The covariance update rule is optimal for a maximal separability of retrieved binary vectors, which is equivalent to a maximal signal/noise ratio. Higher separability is possible when limiting retrieval to pairwise interactions and conceding quadratic complexity like attention . The covariance update rule is equivalent to Fast Weight Programmers , which have later been equipped with a constant decay rate multiplied to $\\BC_{t-1}$ and a constant learning rate multiplied to $\\Bv_{t} \\Bk_t ^\\top$ . In this spirit, we integrate the covariance update rule into the LSTM framework, where the forget gate corresponds to decay rate and the input gate to the learning rate, while the output gate scales the retrieved vector. For this matrix memory, the normalizer state is the weighted sum of key vectors, where each key vector is weighted by the input gate and all future forget gates. Again, the normalizer state keeps record of the strength of the gates. Since the dot product between query and normalizer state can be close to zero, we use the absolute value of this dot product and lower bound it by a threshold (typically 1.0) as done previously . The mLSTM forward pass is: $$\\begin{aligned} \\label{eq:mlstm_recurrent_begin} \\eqnmarkbox[OliveGreen]{}{\\BC_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ \\eqnmarkbox[OliveGreen]{}{\\BC_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ \\eqnmarkbox[OliveGreen]{}{\\Bv_t \\ \\Bk_t^\\top} & & &\\text{cell state} \\\\ \\eqnmarkbox[OliveGreen]{}{\\Bn_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ \\eqnmarkbox[OliveGreen]{}{\\Bn_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ \\eqnmarkbox[OliveGreen]{}{\\Bk_t} & & &\\text{normalizer state} \\\\ \\Bh_t \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\bfo_t} \\ \\odot \\ \\tilde{\\Bh}_t \\ , \\qquad \\qquad \\tilde{\\Bh}_t \\ = \\ \\eqnmarkbox[OliveGreen]{}{\\BC_t} \\eqnmarkbox[OliveGreen]{}{\\Bq_t} \\ / \\ \\max \\left\\{ \\ABS{\\eqnmarkbox[OliveGreen]{}{\\Bn_t^\\top} \\eqnmarkbox[OliveGreen]{}{\\Bq_t}}, 1 \\right\\} &&&\\text{hidden state} \\\\ \\Bq_t \\ &= \\ \\BW_q \\ \\Bx_t \\ + \\ \\Bb_q & & &\\text{query input} \\\\ \\Bk_t \\ &= \\ \\frac{1}{\\sqrt{d}} \\BW_k \\ \\Bx_t \\ + \\ \\Bb_k & & &\\text{key input} \\\\ \\Bv_t \\ &= \\ \\BW_v \\ \\Bx_t \\ + \\ \\Bb_v & & &\\text{value input} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Ri_t} \\ &= \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\!",
    "xlstm-3": "\\! \\left( \\tilde{\\Ri}_t \\right) \\ , \\qquad \\qquad \\ \\ \\ \\ \\, \\tilde{\\Ri}_t \\ = \\ \\Bw^\\top_{\\Ri} \\ \\Bx_t \\ + \\ b_{\\Ri} \\ \\ \\ &&&\\text{input gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\Rf_t} \\ &= \\ \\sigma \\! \\left( \\tilde{\\Rf}_t \\right) \\ \\text{OR} \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\exp} \\!",
    "xlstm-4": "\\! \\left( \\tilde{\\Rf}_t \\right) , \\ \\ \\: \\! \\tilde{\\Rf}_t \\ = \\ \\Bw^\\top_{\\Rf} \\ \\Bx_t \\ + \\ b_{\\Rf} &&& \\text{forget gate} \\\\ \\label{eq:mlstm_recurrent_end} \\eqnmarkbox[xLSTMBlue]{}{\\bfo_t} \\ &= \\ \\sigma \\left( \\tilde{\\bfo}_t \\right) \\ , \\qquad \\qquad \\quad \\ \\ \\ \\, \\tilde{\\bfo}_t \\ = \\ \\BW_{\\bfo} \\ \\Bx_t \\ + \\ \\Bb_{\\bfo} &&&\\text{output gate} \\end{aligned}$$\n\nmLSTM can have multiple memory cells like the original LSTM. For mLSTM, multiple heads and multiple cells are equivalent as there is no memory mixing. In order to stabilize the exponential gates of mLSTM, we use the same stabilization techniques as for sLSTM, see Equation [eq:slstmstabil]. Since the mLSTM has no memory mixing, this recurrence can be reformulated in a parallel version. For more details we refer to Appendix 7.3. xLSTM Architecture\n\nr.6\n\nxLSTM Blocks. An xLSTM block should non-linearly summarize the past in a high-dimensional space to better separate different histories or contexts. Separating histories is the prerequisite to correctly predict the next sequence element such as the next token. We resort to Cover\u2019s Theorem , which states that in a higher dimensional space non-linearly embedded patterns can more likely be linearly separated than in the original space. We consider two residual block architectures: (i) A residual block with post up-projection (like Transformers), which non-linearly summarizes the past in the original space, then linearly maps into a high-dimensional space, applies a non-linear activation function, and linearly maps back to the original space; see left panel of Figure [fig:Backbones] and third column in Figure 1. A more detailed version is depicted in Figure 6 in the appendix. (ii) A residual block with pre up-projection (like State Space Models), which linearly maps to a high-dimensional space, non-linearly summarizes the past in the high-dimensional space and then linearly maps back to the original space. For an xLSTM block containing an sLSTM, we mostly use the post up-projection block. For an xLSTM block containing an mLSTM, we use the pre up-projection block since the memory capacity becomes larger in the high-dimensional space. See left panel of Figure [fig:Backbones] and third column in Figure 1, or Figure 6 in the appendix for more details. xLSTM Architecture. An xLSTM architecture is constructed by residually stacking building blocks . We rely on the most commonly used pre-LayerNorm residual backbones as used in contemporary Large Language Models. See last column in Figure 1. Memory and Speed Considerations\n\nContrary to Transformers, xLSTM networks have a linear computation and a constant memory complexity with respect to the sequence length. Since the xLSTM memory is compressive, it is well suited for industrial applications and implementations on the edge. The memory of mLSTM does not require parameters but is computationally expensive through its d \u00d7 d matrix memory and d \u00d7 d update. We trade off memory capacity against computational complexity. Nevertheless, the computations can be done in parallel on GPUs, therefore these computations have only a minor effect on the wall clock time. While mLSTM is parallelizable analog to FlashAttention or GLA , sLSTM is not parallelizable due to the memory mixing (hidden-hidden connections). However, we developed a fast CUDA implementation with GPU memory optimizations to the register level which is typically less than two times slower than mLSTM. Related Work\n\nLinear Attention. Several methods have been suggested to overcome the quadratic complexity in terms of context length of the Transformer and make attention linear in the context length. The Synthesizer learns synthetic attention weights without token-token interactions . Linformer realizes self-attention by a low-rank matrix and even linearly approximates it . Linear Transformer linearizes the attention mechanism . Performer linearly approximates the attention softmax by positive orthogonal random features approach . Attention has been replaced by fast long convolutions in the Structured Global Convolution (SGConv) and the Hyena Hierarchy . State Space Models. Recently, State Space Models (SSMs) became very popular since they are linear in the context length and show promising performance compared to Transformers. One of the first proposed models was Structured State Space sequence model (S4) , followed by Diagonal State Space (DSS) model , Gated State Space (GSS) models , S5 model , Bidirectional Gated SSM (BiGS) , H3 model , and Mamba .",
    "xlstm-5": "Recurrent Neural Networks. Recurrent Neural Networks (RNNs) have been suggested to replace Transformer and attention due to their linearity in the context length. RNNs with Deep Linear Recurrent Units (LRUs) showed promising results for language modeling , as did Hierarchically Gated Linear RNN (HGRN) and HGRN2 . A well-known RNN approach to large language modeling is RWKV , showcasing competitive performance to Transformers. Gating. One of the key ideas of LSTM is gating, which was rediscovered and reinterpreted in many recent approaches. Gating was used in HGRN , HGRN2 , Gated Linear Attention (GLA) , Gated State Space (GSS) models , Bidirectional Gated SSM (BiGS) , Moving Average Equipped Gated Attention (MEGA) , RWKV , and Mamba .",
    "xlstm-6": "Covariance Update Rule. To enhance storage capacities, we equipped the mLSTM cell with a matrix memory with a covariance update rule. Other methods which build on such an update mechanism are Fast Weight Programmers , RWKV-5 and RWKV-6 , Retention , Linear Transformer , and HGRN2 . Most Related. Conceptually the closest models to xLSTM are Retention , RWKV , and HGRN2 . These models share the concepts matrix memory and/or gating. However, in contrast to the new sLSTM, these approaches do not allow memory mixing. Memory mixing enables to solve state tracking problems, and therefore LSTMs are more expressive than State Space Models (SSMs) and Transformers . State tracking is required to evaluate code or to track entities in a long narrative. Residually Stacking Architectures. Like almost all contemporary large deep learning models, xLSTM architectures are constructed by residually stacking building blocks . This construction enabled deep convolutional networks and Transformers . Transformers are the ultimate force behind Large Language Models (LLMs) like GPT-3 , ChatGPT , GPT-4 , Megatron-LM , Gopher , ERNIE 3.0 Titan , GLaM , Chinese M6 , mutilingual AlexaTM 20B , OPT , Chinchilla , BLOOM , GLM-130B , LaMDA , PaLM , Llama , Gemini . Experiments\n\nIn this section, we experimentally evaluate xLSTM and compare it to existing methods with a focus on language modeling. We investigate xLSTM\u2019s specific capabilities on synthetic tasks in Section 4.1. In Section 4.2, we compare the validation set perplexity of various current language modeling methods that were trained on 15B tokens from SlimPajama . On the same dataset, we perform ablation studies for xLSTM. Then, we assess the scaling behavior of the different methods analogous to and . In Section 4.3, we conduct a more thorough language modeling experiment. We compare xLSTM and the best performing methods from Section 4.2 after being trained on 300B tokens from SlimPajama . First, we assess how well the methods perform in extrapolating to longer contexts, secondly we test the methods via validation perplexity and performance on downstream tasks , thirdly we evaluate the methods on 571 text domains of the PALOMA language benchmark dataset , fourthly we again assess the scaling behavior of the different methods, but now with 20 times more training data.",
    "xlstm-7": "For all experiments, we use the notation xLSTM[a:b] for the ratio a/b of mLSTM-based versus sLSTM-based xLSTM blocks. For example, xLSTM[7:1] means that out of eight blocks, seven are mLSTM-based blocks and one is an sLSTM-based block. For a common total block number of 48, this translates to 6 sLSTM-based blocks and 42 mLSTM-based blocks. Further, for all experiments, we use pre and post up-projection blocks for mLSTM and sLSTM, respectively. Synthetic Tasks and Long Range Arena\n\nFirst, we test the effectiveness of xLSTM\u2019s new exponential gating with memory mixing on formal languages . Then, we assess the effectiveness of xLSTM\u2019s new matrix memory on the Multi-Query Associative Recall task . Finally, xLSTM\u2019s performance at processing long sequences in the Long Range Arena is evaluated . Test of xLSTM\u2019s Exponential Gating with Memory Mixing. We test xLSTM\u2019s new exponential gating with memory mixing, which should enable it to solve state tracking problems . We implement and extend the formal language tasks from to enable multi-length training for length extrapolation. For a detailed description of all tasks and extended results see Appendix 8.1.1. We compare xLSTM to other methods including Transformers, State Space Models, and Recurrent Neural Networks. The accuracy of the tested methods is evaluated on those tokens relevant to the task. The accuracy is scaled between 0 (random) and 1 (perfect). We compare 2-block architectures of the following methods on these tasks: xLSTM[0:1] (i.e., only sLSTM), xLSTM[1:0] (i.e., only mLSTM), xLSTM[1:1], Llama, Mamba, RWKV, Retention, Hyena, LSTM, and LSTM in Transformer blocks (LSTM (Block)).",
    "xlstm-8": "The results of this experiment are shown in Figure 2. Models such as Transformers or State Space Models without memory mixing (no state tracking) cannot solve e.g. regular grammars like the parity task. This result is in agreement with findings that Transformers and State Space models are fundamentally less powerful than RNNs . Test of xLSTM\u2019s Memory Capacities on Associative Recall Tasks. In this experiment, we test xLSTM\u2019s new matrix memory in terms of the memory capacity on the Multi-Query Associative Recall task : For each sequence, key-value pairs are randomly chosen from a large vocabulary, which must be memorized for later retrieval. To enhance the difficulty of the original task, we increase the number of key-value pairs up to 256 and extend the context length up to 2048. Thus, we have broader tests for the memory capacities of different models. We compare 2-block architectures of Llama, Mamba, RWKV-5, RWKV-6, xLSTM[1:1] and xLSTM[1:0]. The models are evaluated by the accuracy at recalling the pairs. Since Transformers (e.g. Llama) have a memory that is exponential in the coding dimension , they constitute the gold standard at this task. Results are shown in Figure 3. xLSTM[1:1] performs best among all non-Transformer models, also for small models. Interestingly, the sLSTM block does not diminish the memory capacity but rather leverages it, which becomes evident at the most difficult task with 256 key-value pairs. Additional results are presented in Appendix 8.1.2, where extrapolation analyses indicate that xLSTM\u2019s enhanced memory capacities also pertain when extrapolating to contexts that are longer than those seen during training. Test of xLSTM\u2019s Long Context Capabilities on Long Range Arena. To assess xLSTM\u2019s performance on long sequences and large contexts, we compare different methods on the Long Range Arena . xLSTM demonstrates consistent strong performance on all of the tasks, suggesting that the xLSTM architecture is remarkably efficient in handling different aspects of long context problems. For more details, see Appendix 8.1.3. Method Comparison and Ablation Study\n\nThe main question of this paper is, what can we achieve in language modeling when scaling up the new LSTM variants. Therefore, we train xLSTMs, Transformers, State Space Models, and other methods on 15B tokens from SlimPajama in an auto-regressive language modeling setting.",
    "xlstm-9": "We compare the trained models on the validation set. Finally, we perform ablation studies for xLSTM. r0.42\n\nComparing xLSTM to Other Methods. For comparison, we train models on 15B tokens from SlimPajama . The trained models are evaluated by their perplexity on the validation set. We compare the following methods: xLSTM (our new method), GPT-3 (Transformer) , Llama (Transformer) , H3 (SSM) , Mamba (SSM) , RWKV-4 (RNN) , RWKV-5 (RNN) , RWKV-6 (RNN) , GLA (linear Transformer) , HGRN (RNN) , HGRN2 (RNN) . RetNet (linear Transformer) , Hyena (linear Transformer) , xLSTM[1:0], and xLSTM[7:1] (see Section [sec:xlstm_blocks_notation]). The models were trained with mixed precision, except RWKV-5, RWKV-6, GLA, HGRN, HGRN2, where mixed-precision training was not supported by the reference implementation. We categorize the methods into (a) Transformers, (b) State Space Models (SSMs), and (c) Recurrent Neural Networks (RNNs) together with linear Transformers. Linear Transformers are linear methods that substitute the Transformer attention mechanism.",
    "xlstm-10": "The models match a GPT-3 model with 350M parameters in size, i.e. embedding dim 1024 and 24 residual blocks. Only GPT-3 uses shared weights for token and output embeddings, therefore has fewer parameters. The results in Table [tab:spaj15b_model_results] show that xLSTM outperforms all existing methods in validation perplexity. For details see Appendix 8.2.0.2. Figure [fig:temp_sclaw15B] shows the scaling behaviour for this experiment, indicating that xLSTM will also perform favorably for larger models. Ablation Studies. Table [tab:spaj15b_model_results] and Figure [fig:temp_sclaw15B] demonstrate that xLSTM achieves excellent results at language modeling when being trained on 15B tokens from SlimPajama. Thus, it is only natural to ask which of the elements of xLSTM is responsible for the improvements over vanilla LSTM performances, evoking an ablation study of the individual new xLSTM components. For doing so, we morph a vanilla LSTM architecture step-by-step into an xLSTM architecture. First, we integrate LSTM layers into pre-LayerNorm residual backbones, second we extend this to a post up-projection block, then we add exponential gating, and finally the matrix memory. The results are shown in Table [tab:ablstudies] (top). The ablation studies attribute the strong performance improvement to both the exponential gating and the matrix memory. Additionally, since gating is an ever-occuring topic in RNNs and State Space Models, we ablate different gating mechanisms. In Table [tab:ablstudies] (bottom), we conclude that having each gate learnable and influenced by the input has an incremental positive effect.",
    "xlstm-11": "Additional studies on the individual backbone components are discussed in Appendix 8.2.0.3.",
    "xlstm-12": "width=1. width=1. xLSTM as Large Language Model\n\nWe culminate this study in large-scale language modeling experiments, testing the potential of xLSTM as an LLM. We therefore increase the amount of training data and train on 300B tokens from SlimPajama. The same number of tokens is used in e.g., Mamba and Griffin . We compare xLSTM, RWKV-4, Llama, and Mamba, which were selected as the best-performing methods in their respective method classes in the model comparison in Section 4.2. We train different model sizes (125M, 350M, 760M, 1.3B), test all models for length extrapolation capabilities and evaluate their performance on the validation set. We assess their performance on downstream tasks, test their performance in language modeling on 471 text domains of the PALOMA benchmark, and, finally, investigate their scaling law behavior. Sequence Length Extrapolation. First, we test the sequence length extrapolation for 1.3B-sized, large models of xLSTM, RWKV-4, Llama, and Mamba. All models are trained on context length 2048, and then tested for context lengths up to 16384. See Figure 4 for the results. In contrast to other methods, xLSTM models maintain low perplexities for longer contexts. Validation Perplexity and Downstream Tasks. Secondly, for all model sizes, we evaluate the performance of xLSTM, RWKV-4, Llama, and Mamba models on the SlimPajama validation set for next token prediction and on downstream tasks that measure common sense reasoning. The third column of Table [tab:lmeval] lists the validation set perplexities of different methods. Both xLSTM[1:0] and xLSTM[7:1] are the best models for all model sizes with respect to the validation set perplexity. The other columns of Table [tab:lmeval] provide the performance on downstream tasks. In the vast majority of tasks and across all model sizes xLSTM is the best method \u2014 only on the ARC task Mamba is in some cases the best method. For details see Appendix 8.3. width=\n\nwidth=\n\nPerformance on PALOMA Language Tasks. Thirdly, for all model sizes, we test the next token prediction performance of xLSTM, RWKV-4, Llama, and Mamba models on PALOMA language tasks . We measure the performance by the perplexity for next token prediction on 571 text domains, which range from nytimes.com to r/depression on Reddit. Table [tab:ppleval] shows token prediction perplexity grouped into language modeling (first seven columns) and fine-grained domain benchmarks (last 5 columns). xLSTM[1:0] performs better than xLSTM[7:1] on these language tasks. xLSTM[1:0] has in 568 out of 571 (99.5%) text domains a lower perplexity than Mamba, in 486 out of 571 (85.1%) a lower perplexity than Llama, in 570 out of 571 (99.8%) a lower perplexity than RWKV-4.",
    "xlstm-13": "For details see Appendix 8.3. Scaling Laws. Fourthly, we assess the power-law scaling behavior, which allows to extrapolate the performance to larger model sizes . Figure 5 presents the scaling behavior. All models share a similar scaling behavior but with different offsets. RWKV-4 performs worst, followed by Llama and Mamba. xLSTM is better than Mamba with a similar margin to Mamba as Mamba has to Llama. The scaling behavior indicates that for larger models xLSTM will continue to perform favourable compared to Transformers and State-Space models. Limitations\n\n(i) In contrast to mLSTM, memory mixing of the sLSTM prohibits parallelizable operations, and therefore does not allow a fast parallel implementation. Nevertheless, we developed a fast CUDA kernel for sLSTM, which is currently around 1.5 times slower than our parallel mLSTM implementation. (ii) The CUDA kernels for mLSTM are not optimized, and therefore the current implementation is about 4 times slower than FlashAttention or the scan used in Mamba. Faster CUDA kernels could be obtained in the vein of FlashAttention. (iii) The matrix memory of mLSTM has high computation complexity since d \u00d7 d matrices must be processed. Still, the memory update and retrieval does not use parameters and can be parallelized using standard matrix operations, therefore the wall clock time overhead due to the complex memory is minor. (iv) The initialization of the forget gates must be chosen carefully. (v) Since the matrix memory is independent of the sequence length, increasing the sequence length might overload the memory for longer context sizes. Still, this does not appear to be a limitation for contexts up to 16k, see Section 4.3.0.1. (vi) Due to the expensive computational load for large language experiments, we did neither fully optimize the architecture nor the hyperparameters, especially for larger xLSTM architectures. We anticipate that an extensive optimization process is needed for xLSTM to reach its full potential. Conclusion\n\nWe have partly answered our simple question: How far do we get in language modeling when scaling LSTM to billions of parameters? So far, we can answer: \u201cAt least as far as current technologies like Transformers or State Space Models\u201d. We have enhanced LSTM to xLSTM by exponential gating with memory mixing and a new memory structure. xLSTM models perform favorably on language modeling when compared to state-of-the-art methods like Transformers and State Space Models. The scaling laws indicate that larger xLSTM models will be serious competitors to current Large Language Models that are built with the Transformer technology. xLSTM has the potential to considerably impact other deep learning fields like Reinforcement Learning, Time Series Prediction, or the modeling of physical systems. Acknowledgements\n\nWe thank Sebastian Lehner, Daniel Klotz, Thomas Adler, Matthias Dellago, Gerald Gutenbrunner, Fabian Paischer, Vihang Patil, Niklas Schmidinger, Benedikt Alkin, Kajetan Schweighofer, Anna Zimmel, Lukas Aichberger, Lukas Hauzenberger, Bernhard Sch\u00e4fl, Johannes Lehner for helpful discussions and feedback. Extended Long Short-Term Memory\n\nVanilla Long Short-Term Memory Formulation: Vector Notation\n\nThe vanilla LSTM memory cell update rules at time step t extend the scalar cell state formulation to a vector of cell states: $$\\begin{aligned} \\eqnmarkbox[OliveGreen]{}{\\Bc_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\bff_t} \\odot \\eqnmarkbox[OliveGreen]{}{\\Bc_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\bfi_t} \\odot \\eqnmarkbox[OliveGreen]{}{\\Bz_t} & & &\\text{cell state} \\\\ \\Bh_t \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\bfo_t} \\odot \\tilde{\\Bh}_t \\ , & \\tilde{\\Bh}_t \\ &= \\ \\psi \\left( \\eqnmarkbox[OliveGreen]{}{\\Bc_t}\\right) &\\text{hidden state} \\\\ \\eqnmarkbox[OliveGreen]{}{\\Bz_t} \\ &= \\ \\varphi \\left( \\tilde{\\Bz}_t \\right) \\ , &\\tilde{\\Bz}_t \\ &= \\ \\BW_{\\Bz} \\ \\Bx_t \\ + \\ \\BR_{\\Bz} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\Bz} \\ \\ &\\text{cell input} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\bfi_t} \\ &= \\ \\sigma \\left( \\tilde{\\bfi}_t \\right) \\ , &\\tilde{\\bfi}_t \\ &= \\ \\BW_{\\bfi} \\ \\Bx_t \\ + \\ \\BR_{\\bfi} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\bfi} \\ \\ &\\text{input gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\bff_t} \\ &= \\ \\sigma \\left( \\tilde{\\bff}_t \\right) \\ , &\\tilde{\\bff}_t \\ &= \\ \\BW_{\\bff} \\ \\Bx_t \\ + \\ \\BR_{\\bff} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\bff} \\ \\ &\\text{forget gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\bfo_t} \\ &= \\ \\sigma \\left( \\tilde{\\bfo}_t \\right) \\ , &\\tilde{\\bfo}_t \\ &= \\ \\BW_{\\bfo} \\ \\Bx_t \\ + \\ \\BR_{\\bfo} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\bfo} \\ \\ &\\text{output gate} \\end{aligned}$$\n\nThe matrices $\\BW_{\\Bz}$, $\\BW_{\\bfi}$, $\\BW_{\\bff}$, and $\\BW_{\\bfo}$ correspond to the input weights between inputs $\\Bx_t$ and cell input, input gate, forget gate, and output gate, respectively.",
    "xlstm-14": "The matrices $\\BR_{\\Bz}$, $\\BR_{\\bfi}$, $\\BR_{\\bff}$, and $\\BR_{\\bfo}$ correspond to the recurrent weights between hidden state $\\Bh_{t-1}$ and cell input, input gate, forget gate, and output gate, respectively. $\\Bb_{\\Bz}$, $\\Bb_{\\bfi}$, $\\Bb_{\\bff}$, and $\\Bb_{\\bfo}$ are the corresponding bias vectors. \u03c6 and \u03c8 are the cell input and hidden state activation functions (typically tanh ). \u03c8 is used to normalize or squash the cell state, which would be unbounded otherwise. sLSTM\n\nSimilar to the LSTM in Section 7.1, also the sLSTM can be vectorized to multiple cells: $$\\begin{aligned} \\eqnmarkbox[OliveGreen]{}{\\Bc_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\bff_t} \\odot \\eqnmarkbox[OliveGreen]{}{\\Bc_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\bfi_t} \\odot \\eqnmarkbox[OliveGreen]{}{\\Bz_t} & & &\\text{cell state} \\\\ \\eqnmarkbox[OliveGreen]{}{\\Bn_t} \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\bff_t} \\odot \\eqnmarkbox[OliveGreen]{}{\\Bn_{t-1}} \\ + \\ \\eqnmarkbox[xLSTMBlue]{}{\\bfi_t} & & &\\text{normalizer state} \\\\ \\Bh_t \\ &= \\ \\eqnmarkbox[xLSTMBlue]{}{\\bfo_t} \\odot \\tilde{\\Bh}_t \\ , & \\tilde{\\Bh}_t \\ &= \\ \\eqnmarkbox[OliveGreen]{}{\\Bc_t} \\odot \\eqnmarkbox[OliveGreen]{}{\\Bn_t ^{-1}} &\\text{hidden state} \\\\ \\eqnmarkbox[OliveGreen]{}{\\Bz_t} \\ &= \\ \\varphi \\left( \\tilde{\\Bz}_t \\right) \\ , &\\tilde{\\Bz}_t \\ &= \\ \\BW_{\\Bz} \\ \\Bx_t \\ + \\ \\BR_{\\Bz} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\Bz} \\ \\ &\\text{cell input} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\bfi_t} \\ &= \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\! \\exp} \\left( \\tilde{\\bfi}_t \\right) \\ , &\\tilde{\\bfi}_t \\ &= \\ \\BW_{\\bfi} \\ \\Bx_t \\ + \\ \\BR_{\\bfi} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\bfi} \\ \\ &\\text{input gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\bff_t} \\ &= \\ \\eqnmarkbox[xLSTMRed]{}{\\!\\! \\exp} \\left( \\tilde{\\bff}_t \\right) \\ \\text{OR} \\ \\sigma \\left( \\tilde{\\bff}_t \\right) \\ , &\\tilde{\\bff}_t \\ &= \\ \\BW_{\\bff} \\ \\Bx_t \\ + \\ \\BR_{\\bff} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\bff} \\ \\ &\\text{forget gate} \\\\ \\eqnmarkbox[xLSTMBlue]{}{\\bfo_t} \\ &= \\ \\sigma \\left( \\tilde{\\bfo}_t \\right) \\ , &\\tilde{\\bfo}_t \\ &= \\ \\BW_{\\bfo} \\ \\Bx_t \\ + \\ \\BR_{\\bfo} \\ \\Bh_{t-1} \\ + \\ \\Bb_{\\bfo} \\ \\ &\\text{output gate} \\end{aligned}$$\n\nHere, the cell input activation function \u03c6 is tanh , the hidden state activation function is the identity. \u03c6 helps stabilizing the recurrence. Considering external gradient contribution $\\delta^\\text{ext}_{\\Bh_t}$ from subsequent layers and recurrent gradient contribution $\\delta^{\\BR}_{\\Bh_t}$ from gradients from future states flowing over the cell interaction matrix $\\BR$, we obtain the recursive backward pass of sLSTM, where \u03b4a indicates gradients with respect to parameter / internal variable a:\n\n$$\\begin{aligned} \\delta_{\\Bh_t} \\ &= \\ \\delta^{ext}_{\\Bh_t} \\ + \\ \\delta^{\\BR}_{\\Bh_t} &\\\\ \\delta_{\\Bc_{t-1}} \\ &= \\ \\bff_{t} \\odot \\delta_{\\Bc_{t}} \\ + \\ \\bfo_{t-1} \\odot {\\Bn_{t-1}}^{-1} \\odot \\delta_{\\Bh_{t-1}} & \\\\ \\delta_{\\Bn_{t-1}} \\ &= \\ \\bff_{t} \\odot \\delta_{\\Bn_{t}} \\ - \\ \\bfo_t \\odot \\Bc_{t-1} \\odot \\Bn_{t-1}^{-2} \\odot \\delta_{\\Bh_{t-1}} & \\\\ \\delta_{\\tilde{\\bff}_{t}} \\ &= \\ \\bff'_{t} \\odot \\Bc_{t-1} \\odot \\delta_{\\Bc_{t}} \\ + \\ \\bff'_{t} \\odot \\Bn_{t-1} \\odot \\delta_{\\Bn_{t}} & \\\\ \\delta_{\\tilde{\\bfi}_{t}} \\ &= \\ \\bfi'_{t} \\odot \\Bz_{t} \\odot \\delta_{\\Bc_{t}} \\ + \\ \\bfi'_{t} \\odot \\delta_{\\Bn_{t}} & \\\\ \\delta_{\\tilde{\\bfz}_{t}} \\ &= \\ \\bfi_{t} \\odot \\varphi'(\\tilde{\\bfz}_t) \\ \\odot \\delta_{\\Bc_{t}} & \\\\ \\delta_{\\tilde{\\bfo}_{t}} \\ &= \\ \\bfo'_{t} \\odot \\Bc_{t} \\odot \\Bn^{-1}_{t} \\odot \\delta_{\\Bh_{t}} & \\\\ \\delta_{\\bfx_t} \\ &= \\ \\sum_{\\bfg \\in \\{\\bff, \\bfi, \\bfz, \\bfo\\}} \\BW^{\\top}_{\\bfg} \\delta_{\\tilde{\\bfg}_t} & \\\\ \\delta^{\\BR}_{\\Bh_{t-1}} \\ &= \\ \\sum_{\\bfg \\in \\{\\bff, \\bfi, \\bfz, \\bfo\\}} \\BR^{\\top}_{\\bfg} \\delta_{\\tilde{\\bfg}_{t}} &\\\\ \\delta_{\\BR_\\bfg}^\\top \\ &= \\ \\sum_t \\Bh_{t-1} \\delta_{\\tilde{\\bfg}_{t}}^\\top \\ , & \\bfg \\in \\{\\bfi, \\bff, \\bfz, \\bfo\\}\\\\ \\delta_{\\BW_\\bfg}^\\top \\ &= \\ \\sum_t \\Bx_{t} \\delta_{\\tilde{\\bfg}_{t}}^\\top \\ , & \\bfg \\in \\{\\bfi, \\bff, \\bfz, \\bfo\\} \\end{aligned}$$\n\nwith the derivatives of the respective gate activation function $\\bfi'_t = \\exp' (\\tilde{\\bfi}_t ) = \\exp (\\tilde{\\bfi}_t ) = \\bfi_t$, $\\bfo'_t = \\sigma' (\\tilde{\\bfo}_t)$, and $\\bff'_t = \\sigma'(\\tilde{\\bff}_t)$ or $\\bff'_t = \\bff_t$ depending on the forget gate activation.",
    "xlstm-15": "\u03c6\u2032(z) is the derivative of the cell input activation function \u03c6(z). The matrices $\\BR_{\\Bz}$, $\\BR_{\\bfi}$, $\\BR_{\\bff}$, $\\BR_{\\bfo}$ are block-diagonal which is analogous to multiple heads in the mLSTM. This way, the parameters reduce to d2/(Nh), where Nh is the number of heads, limiting the cell interactions to individual heads. This parameter efficient formulation of cell interactions together with the exponential gating is called the new memory mixing. Finally, to stabilize the backward pass, we clip the magnitude of $\\delta^{\\BR}_{\\Bh_t}$ to 10, as a means to prohibit exploding gradients for long context lengths. Proof of Equivalence for sLSTM Stabilized Version. The stabilization state m, see Equation [eq:slstmstabil] in the main paper, has no gradient, and hence does not influence the other gradients. We go back to the scalar version (Equation [eq:slstmforward]) here for simplicity. We re-define ct(s) and nt(s) as stabilized cell and normalizer states: $$\\begin{aligned} c_t \\ &= \\ c^{(s)}_t \\exp \\left(\\eqnmarkbox[OliveGreen]{}{ m_t }\\right) \\\\ n_t \\ &= \\ n^{(s)}_t \\exp \\left(\\eqnmarkbox[OliveGreen]{}{m_t} \\right) \\end{aligned}$$ Inserting Equation [eq:slstmstabil] into Equation [eq:slstmforward] yields: $$\\begin{aligned} \\tilde{h}^{(s)}_t \\ &= \\ c^{(s)}_t / n^{(s)}_t = \\\\ &= \\ \\frac{ \\exp \\left( \\log \\left( \\Rf_t \\right) + \\eqnmarkbox[OliveGreen]{}{m_{t-1}} - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) c^{(s)}_{t-1} + \\exp \\left( \\log \\left ( \\Ri_t \\right) - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) z_t }{\\exp \\left( \\log \\left( \\Rf_t \\right) + \\eqnmarkbox[OliveGreen]{}{m_{t-1}} - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) n^{(s)}_{t-1} + \\exp \\left( \\log \\left( \\Ri_t \\right) - \\eqnmarkbox[OliveGreen]{}{m_t} \\right) } \\\\ &= \\ \\frac{ \\exp \\left( \\log \\left( \\Rf_t \\right) + \\eqnmarkbox[OliveGreen]{}{m_{t-1}} \\right) c^{(s)}_{t-1} + \\exp \\left( \\log \\left( \\Ri_t \\right) \\right) z_t }{\\exp \\left( \\log \\left( \\Rf_t \\right) + \\eqnmarkbox[OliveGreen]{}{m_{t-1}} \\right) n^{(s)}_{t-1} + \\exp \\left( \\log \\left( \\Ri_t \\right) \\right) } \\\\ &= \\ \\frac{ \\exp \\left( \\log \\left( \\Rf_t \\right) \\right) c_{t-1} + \\exp \\left( \\log \\left( \\Ri_t \\right) \\right) z_t }{\\exp \\left( \\log \\left( \\Rf_t \\right) \\right) n_{t-1} + \\exp \\left( \\log \\left( \\Ri_t \\right) \\right) } \\\\ &= \\ \\frac{ \\Rf_t c_{t-1} + \\Ri_t z_t }{ \\Rf_t n_{t-1} + \\Ri_t } \\ = \\ c_t / n_t \\ = \\ \\tilde{h}_t \\end{aligned}$$\n\nTherefore, since the loss solely depends on ht, there\u2019s no dependency on mt, and consequently, no gradient exists for this stabilization state. Note that mt can be chosen arbitrarily. We choose $m_t = \\max \\left( \\log \\left( \\bff_t \\right) + m_{t-1}, \\log \\left( \\bfi_t \\right) \\right)$, which stabilizes the exponential function. One can even find mt, such that the normalizer state nt can be eliminated, but this version was experimentally found to be numerically unstable in the backward pass. mLSTM\n\nThroughout this section, $\\BOn \\in \\dR^{T}$ denotes a column vector of ones and $\\BOn^\\top \\in \\dR^{1 \\times T}$ a row vector of ones, where T is the dimension of this vector. Recurrent mLSTM Backward Pass. The recurrent formulation of the mLSTM cell in Equation [eq:mlstm_recurrent_begin] yields the following backward pass recurrence, where \u03b4a indicates gradients with respect to parameter or internal variable a and $\\delta^\\text{ext}_{\\Bh_t}$ denotes gradients from subsequent layers:\n\n$$\\begin{aligned} \\label{eq:mlstm_recurrent_backward} \\delta_{\\tilde{\\Bh}_t}^{\\top} &= \\bfo_t \\odot \\delta_{\\Bh_t}^{\\text{ext}} & \\\\ \\delta_{\\BC_{t-1}} &= \\Rf_{t} \\delta_{\\BC_{t}} + \\frac{ \\Bq_{t-1} \\delta_{\\tilde{\\Bh}_{t-1}}^\\top }{ \\max \\left\\{ \\ABS{\\Bn_{t-1}^\\top \\Bq_{t-1}}, 1 \\right\\}} & \\\\ \\delta_{\\Bn_{t-1}} &= \\Rf_{t} \\delta_{\\Bn_{t}} - \\frac{\\Bq_{t-1}^\\top \\BC_{t-1}^\\top \\delta_{\\tilde{\\bfh}_{t-1}}}{ \\max \\left\\{ \\ABS{\\Bn_{t-1}^\\top \\Bq_{t-1}}, 1 \\right\\}^2} \\Omega \\left( \\Bn_{t-1}^\\top \\Bq_{t-1} \\right) \\Bq_{t-1} & \\\\ \\delta_{\\Bv_t}^\\top &= \\Ri_t \\Bk_{t}^{\\top} \\delta_{\\BC_t}^\\top & \\\\ \\delta_{\\Bk_t}^\\top &= \\Ri_t \\left( \\Bv_{t}^\\top \\delta_{\\BC_t} + \\delta_{\\Bn_t}^\\top \\right) & \\\\ \\delta_{\\Bq_t} &= \\frac{\\BC_t^\\top \\delta_{\\tilde{\\Bh}_t}}{ \\max \\left\\{ \\ABS{\\Bn_t^\\top \\Bq_t}, 1 \\right\\}} - \\frac{\\Bq_t^\\top \\BC_t^\\top \\delta_{\\tilde{\\Bh}_t}}{ \\max \\left\\{ \\ABS{\\Bn_t^\\top \\Bq_t}, 1 \\right\\}^2} \\Omega \\left(\\Bn_t^\\top \\Bq_t \\right) \\Bn_t & \\\\ \\delta_{\\Bx_t} &= \\sum_{g \\in \\{q, k, v\\}} \\BW^\\top_g \\delta_{\\Bg_t} & \\\\ \\delta_{\\BW_g}^\\top &= \\sum_t \\Bx_t \\delta_{\\Bg_t}^\\top \\ , & g \\in \\{q, k, v\\}\\\\ \\delta_{\\Bb_g} &= \\sum_t \\delta_{\\Bg_t} \\ , & g \\in \\{q, k, v\\} \\\\ \\delta_{\\tilde{\\Rf}_t} &= \\left( \\BOn^\\top \\left( \\BC_{t-1} \\odot \\delta_{\\BC_{t-1}} \\right) \\BOn + \\BOn^\\top \\left( \\Bn_{t-1} \\odot \\delta_{\\Bn_{t}} \\right) \\right) \\gamma \\left(\\tilde{\\Rf}_t \\right) \\\\ \\delta_{\\tilde{\\bfi}_t} &= \\left( \\BOn^\\top \\left( \\left( \\Bv_t \\Bk^\\top_t \\right) \\odot \\delta_{\\BC_{t-1}} \\right) \\BOn + \\BOn^\\top \\left( \\Bn_{t-1} \\odot \\delta_{\\Bn_{t}} \\right) \\right) \\exp \\left( \\tilde{\\Rf}_t \\right) \\\\ \\delta_{\\tilde{\\bfo}_t} &= \\tilde{\\Bh}_t \\odot \\sigma' \\left( \\tilde{\\Ro}_t \\right) \\odot \\delta_{\\Bh_t} \\end{aligned}$$\n\nand \u03a9(z) = \u0398(z\u22121) \u2212 \u0398(\u2212z\u22121), \u0398(z) being the Heaviside step function.",
    "xlstm-16": "\u03b3(z) is either \u03c3\u2032(z) or exp (z), depending on the forget gate activation. Parallel mLSTM Forward Pass. The mLSTM recurrence in Equations ([eq:mlstm_recurrent_begin]-[eq:mlstm_recurrent_end]) can be reformulated in a parallel form, which is used to speed up training. After training we can still use the recurrent formulation for fast text generation. Instead of processing each input $\\Bx_t \\in \\dR^d$ at time step t sequentially, the parallel version processes all timesteps of a full sequence $\\BX \\in \\dR^{T \\times d}$ at once, where T is the sequence length and d is the head dimension. We present the forward pass of the mLSTM for a single head and drop the head dimension for simplicity. Let $\\tilde{\\bm{\\Rf}} \\in \\dR^T$ be the forget gate pre-activations and $\\tilde{\\bm{\\Ri}} \\in \\dR^T$ be the input gate pre-activations for a full sequence. We construct the forget gate activation matrix $\\bm{\\rF} \\in \\dR^{T \\times T}$ by $$\\bm{\\rF}_{ij} = \\begin{cases} 0 & \\text{for} \\; j > i \\\\ 1 & \\text{for} \\; j = i \\\\ \\prod_{k=j+1}^{i} \\sigma\\left(\\tilde{\\Rf}_k\\right) & \\text{for} \\; j < i \\end{cases} \\ ,$$ and the input gate pre-activation matrix $\\tilde{\\bm{\\rI}} \\in \\dR^{T \\times T}$ by $$\\tilde{\\bm{\\rI}}_{ij} = \\begin{cases} 0 & \\text{for} \\; j > i \\\\ \\Ri_j & \\text{for} \\; i \\leq j \\\\ \\end{cases} \\ .$$\n\nBy applying the elementwise exponential input gate activation function naively, we obtain the unstabilized gate activation matrix $\\bm{\\rD} \\in \\dR^{T \\times T}$ as $$\\bm{\\rD} = \\bm{\\rF} \\odot \\exp(\\tilde{\\bm{\\rI}}) \\ .$$\n\nIn order to avoid overflow due to the exponential function we apply the same stabilization as in the recurrent sLSTM, see Equation [eq:slstmstabil]. In the parallel formulation of the mLSTM we get a numerically stable gate activation matrix $\\bm{\\rD}' \\in \\dR^{T \\times T}$ by taking the logarithm of $\\bm{\\rD}$ element-wise and subtracting the row-wise maximum value of $\\bm{\\rD}$ from each element: $$\\begin{aligned} \\widetilde{\\bm{\\rD}} & = \\log \\bm{\\rD} = \\log \\left(\\bm{\\rF} \\odot \\exp(\\tilde{\\bm{\\rI}})\\right) = \\log \\bm{\\rF} + \\tilde{\\bm{\\rI}} \\\\ \\bm{\\rD}' & = \\exp(\\widetilde{\\bm{\\rD}} - \\max \\widetilde{\\bm{\\rD}}) \\end{aligned}$$\n\nGiven the queries, keys and values $\\BQ, \\BK, \\BV \\in \\dR^{T \\times d}$, for a full sequence we can compute all hidden pre-activation states $\\widetilde{\\bm{\\rH}} \\in \\dR^{T \\times d}$ in parallel for the un-stabilized version by $$\\widetilde{\\bm{\\rH}} = \\BC \\, \\BV \\ , \\quad \\text{with} \\, \\, \\, \\BC = \\frac{\\widetilde{\\BC}}{\\max \\left( | \\sum_{j=1}^{T} \\widetilde{\\BC}_{ij}|, 1\\right)} \\ , \\quad \\text{and} \\, \\, \\, \\widetilde{\\BC} = \\frac{\\BQ \\BK^\\top }{\\sqrt{d}} \\odot \\bm{\\rD} \\ .$$ Note that we extract the $\\frac{1}{\\sqrt{d}}$ factor for $\\BK$ explicitly here and further on. For the stabilized version this yields $$\\widetilde{\\bm{\\rH}} = \\BC \\, \\BV \\ , \\quad \\text{with} \\, \\, \\, \\BC = \\frac{\\widetilde{\\BC}'}{\\max \\left( | \\sum_{j=1}^{T} \\widetilde{\\BC}'_{ij}|, \\exp(-\\max \\widetilde{\\bm{\\rD}})\\right)} \\ , \\quad \\text{and} \\, \\, \\, \\widetilde{\\BC}' = \\frac{\\BQ \\BK^\\top}{\\sqrt{d}} \\odot \\bm{\\rD}' \\ ,$$ where for both versions the hidden pre-activation states $\\widetilde{\\bm{\\rH}}$ are identical. With the output gate pre-activations $\\widetilde{\\bm{\\rO}} \\in \\dR^{T \\times d}$ we can compute the hidden states $\\BH \\in \\dR^{T \\times d}$ for all timesteps by applying the output gate in parallel for each timestep element-wise: $$\\bm{\\rH} = \\sigma(\\widetilde{\\bm{\\rO}}) \\odot \\widetilde{\\bm{\\rH}} \\ .$$\n\nThis gives the parallel forward pass of the mLSTM for a full input sequence $\\BX \\in \\dR^{T \\times d}$. Parallel mLSTM Backward Pass. We present the backward pass of the mLSTM for the stabilized version only. For completeness we summarize the forward pass in the stabilized version before we present the backward pass. Given the forget gate matrix $\\bm{\\rF} \\in \\dR^{T \\times T}$, the logarithm of the forget gate matrix $\\overline{\\bm{\\rF}} = \\log \\bm{\\rF} \\in \\dR^{T \\times T}$, and the input gate matrix $\\bm{\\rI} \\in \\dR^{T \\times T}$ as introduced above, together with the queries, keys and values $\\BQ, \\BK, \\BV \\in \\dR^{T \\times d}$, we can write the forward pass of the mLSTM in the stabilized version as: $$\\begin{aligned} {2} \\widetilde{\\bm{\\rD}} &= \\overline{\\bm{\\rF}} + \\tilde{\\bm{\\rI}} \\\\ \\Bm &= \\max_j \\widetilde{\\bm{\\rD}}_{ij} \\ , \\quad &\\text{row-wise maximum} \\\\ \\bm{\\rD}' &= \\exp(\\widetilde{\\bm{\\rD}} - \\Bm \\, \\BOn^\\top) \\\\ \\widetilde{\\BC}' &= \\frac{\\BQ \\BK^\\top}{\\sqrt{d}} \\odot \\bm{\\rD}' \\\\ \\Bb &= \\sum_{j=1}^{T} \\widetilde{\\BC}'_{ij} = \\widetilde{\\BC}' \\ \\BOn \\ , \\quad &\\text{row-wise sum} \\\\ \\Bn &= \\max \\left( |\\Bb|, \\exp(-\\Bm) \\right) \\\\ \\BC &= \\widetilde{\\BC}' \\odot \\left( \\Bn^{-1} \\ \\BOn^\\top \\right) \\\\ \\widetilde{\\bm{\\rH}} &= \\BC \\ \\BV \\end{aligned}$$\n\nWith this forward pass we can compute the gradients \u03b4a for all intermediate and input variables to the mLSTM forward pass in the backward pass. We denote the gradient with respect to variable a as \u03b4a. Given the output gradient $\\delta_{\\widetilde{\\bm{\\rH}}} \\in \\dR^{T \\times d}$ we can compute the backward pass for the intermediate gradients as: $$\\begin{aligned} {2} \\delta_{\\BC}^\\top &= \\BV \\delta_{\\widetilde{\\bm{\\rH}}}^\\top \\\\ \\delta_{\\Bn} &=-\\left(\\widetilde{\\BC}' \\odot \\left(\\Bn^{-2} \\ \\BOn^\\top \\right)\\odot \\delta_{\\BC} \\right) \\ \\BOn \\\\ &= - \\left( \\left( \\widetilde{\\BC}' \\odot \\delta_{\\BC} \\right) \\BOn \\right) \\odot \\Bn^{-2} \\\\ \\delta_{\\Bb} &= \\sign \\left( \\Bn \\right) \\odot \\delta_{\\Bn} \\odot \\begin{cases} 1 & \\text{if} \\; |\\Bb| > \\exp(-\\bm{\\Rm}) \\\\ 0 & \\text{otherwise} \\end{cases} \\\\ \\delta_{\\widetilde{\\BC}', \\BC} &= \\left(\\Bn^{-1} \\ \\BOn^\\top \\right) \\odot \\delta_{\\BC} \\ , \\quad &\\text{column-wise broadcast} \\\\ \\delta_{\\widetilde{\\BC}', \\Bb}^\\top &= \\BOn \\ \\delta_{\\Bb}^\\top \\ , \\quad &\\text{column-wise broadcast} \\\\ \\delta_{\\widetilde{\\BC}'} &= \\delta_{\\widetilde{\\BC}', \\BC} + \\delta_{\\widetilde{\\BC}', \\BB} \\\\ \\delta_{\\bm{\\rD}'} &= \\frac{\\BQ \\BK^\\top}{\\sqrt{d}} \\odot \\delta_{\\widetilde{\\BC}'} \\\\ \\delta_{\\widetilde{\\bm{\\rD}}} &= \\exp(\\widetilde{\\bm{\\rD}} - \\Bm) \\odot \\delta_{\\bm{\\rD}'} = \\bm{\\rD}' \\odot \\delta_{\\bm{\\rD}'} \\end{aligned}$$ We do not compute the gradients for $\\Bm$ as they cancel out (see the proof in the recurrent sLSTM). With these intermediate gradients the gradients for the logarithmic forget gate matrix $\\delta_{\\overline{\\bm{\\rF}}} \\in \\dR^{T \\times T}$, the input gate matrix $\\delta_{\\bm{\\rI}} \\in \\dR^{T \\times T}$, and the queries, keys and values $\\delta_{\\BQ}, \\delta_{\\BK}, \\delta_{\\BV} \\in \\dR^{T \\times d}$ are given by $$\\begin{aligned} {1} \\delta_{\\overline{\\bm{\\rF}}} &= \\delta_{\\widetilde{\\bm{\\rD}}} \\\\ \\delta_{\\bm{\\rI}} &= \\delta_{\\widetilde{\\bm{\\rD}}} \\\\ \\delta_{\\BQ} &= \\left( \\bm{\\rD}' \\odot \\delta_{\\widetilde{\\BC}'} \\right) \\frac{\\BK}{\\sqrt{d}} \\\\ \\delta_{\\BK} &= \\left( \\bm{\\rD}' \\odot \\delta_{\\widetilde{\\BC}'} \\right)^\\top \\frac{\\BQ}{\\sqrt{d}} \\\\ \\delta_{\\BV} &= \\BC^\\top \\delta_{\\widetilde{\\bm{\\rH}}} \\end{aligned}$$\n\nHaving computed the gradients for the logarithmic forget gate matrix $\\delta_{\\overline{\\bm{\\rF}}}$, we can compute the gradients for the forget gate pre-activations $\\delta_{\\tilde{\\bm{\\Rf}}} = \\left[\\delta_{\\tilde{\\Rf}_1}, \\delta_{\\tilde{\\Rf}_2}, ..., \\delta_{\\tilde{\\Rf}_T} \\right]^\\top \\in \\dR^T$. Recall the logarithmic forget gate matrix $\\overline{\\bm{\\rF}} = \\log \\bm{\\rF}$ is computed by $$\\overline{\\bm{\\rF}}_{ij} = \\log \\bm{\\rF}_{ij} = \\begin{cases} -\\infty & \\text{for} \\; j > i \\\\ 0 & \\text{for} \\; j = i \\\\ \\sum_{k=j+1}^{i} \\underbrace{\\log \\sigma\\left(\\tilde{\\Rf}_k\\right)}_{=: \\overline{\\Rf}_k} = \\sum_{k=j+1}^{i} \\overline{\\Rf}_k & \\text{for} \\; j < i \\end{cases} \\ .$$\n\nWith the substitution $\\overline{\\bm{\\Rf}} = \\log \\sigma(\\tilde{\\bm{\\Rf}})$ we compute the gradients for the logarithmic forget gate activations $\\delta_{\\overline{\\bm{\\Rf}}} = \\left[\\delta_{\\overline{\\Rf}_1}, \\delta_{\\overline{\\Rf}_2}, ..., \\delta_{\\overline{\\Rf}_T} \\right]^\\top \\in \\dR^T$ as $$\\begin{aligned} \\delta_{\\overline{\\Rf}_k} &= \\sum_{j=1}^{k-1} \\sum_{i=k+1}^{T} \\left(\\delta_{\\overline{\\bm{\\rF}}}\\right)_{ij} \\ , \\\\ \\delta_{\\tilde{\\Rf}_k} &= \\sigma(- \\ \\tilde{\\Rf}_k) \\cdot \\delta_{\\overline{\\Rf}_k} \\ , \\end{aligned}$$\n\nwhere the last equation makes use of the following: $$\\begin{aligned} \\begin{split} \\frac{\\Rd}{\\Rd x}\\left(\\log \\sigma(x)\\right) &= - \\left(1 + \\exp(-x)\\right)^{-1} \\cdot \\exp(-x) \\cdot (-1) \\\\ &= \\frac{\\exp(-x)}{1+\\exp(-x)} = \\frac{1}{1+\\exp(x)} \\\\ &=\\sigma(-x) \\end{split} \\end{aligned}$$\n\nFinally, we compute the input gate pre-activations\u2019 gradients $\\delta_{\\tilde{\\bm{\\Ri}}} = \\left[\\delta_{\\tilde{\\Ri}_1}, \\delta_{\\tilde{\\Ri}_2}, ..., \\delta_{\\tilde{\\Ri}_S} \\right]^\\top \\in \\dR^T$ as the column-wise sum over the rows of the input gate matrix $\\delta_{\\bm{\\rI}}$: $$\\begin{aligned} \\delta_{\\tilde{\\Ri}_k} &= \\sum_{i=1}^{T} \\left(\\delta_{\\bm{\\rI}}\\right)_{ik} \\end{aligned}$$\n\nThis completes the backward pass of the parallel mLSTM for a full input sequence $\\BX \\in \\dR^{T \\times d}$.",
    "xlstm-17": "Detailed Block Structure\n\nExperiments\n\nTraining Setup. For all experiments, we use Python 1 3.11 with PyTorch 2.2.0 2, and CUDA 12.1 3 on NVIDIA A100 GPUs. Nearest Neighbor Search Task. For this auxiliary task, we use randomly sampled feature vectors of dimension 2 and unit norm. The attached value is a uniformly distributed random number from [0,1], leading to inputs vectors of dimension 3. The first feature vector serves as search key, with the first value being ignored. Then the model has to predict the value of the nearest neighbor so far in the sequence. We train on 8192 sequences of context length up to 64 (uniformly sampled) and validate on 8192 different samples. All models have two blocks and embedding dimension 128. We use a dropout of 0.1, 10% linear warm-up steps and cosine decay to 1e-7 for 100k total training steps. We sweep over learning rates 1e-4, 1e-3, 1e-2, 1e-1 and 5 seeds each. The reported values in Figure [fig:lstmProblems] are mean values for the best learning rate and 99% confidence intervals. Note that LSTM requires very high learning rates, whereas Transformers (Llama) perform best at the smallest learning rate. The xLSTM[0:1] reaches similar performance across all learning rates. Wikitext-103 Rare Token Prediction. For this exemplary experiment on rare token prediction, we trained 125M-sized models on Wikitext-103 . All models have an embedding dimension of 768 in a post up-projection structure of 12 residual blocks. The Transformer model (Llama) uses Multi-Head Attention, for what is called LSTM the Multi-Head Attention is replaced by an LSTM and the xLSTM[1:0] contains mLSTM layers with matrix memory. Models were trained with maximum learning rate 1e-3, 4k steps linear warm-up and cosine decay for in total 50k steps, using a batch size of 256 and context length of 512. We use the validation perplexity as a stopping criterion and evaluate on the test set. Synthetic Tasks and Long Range Arena\n\nTest of xLSTM\u2019s Exponential Gating with Memory Mixing. We evaluate xLSTM on a suite of formal language tasks to test its exponential gating and memory mixing mechanism. Formal languages provide a framework to probe the generalization capabilities of models. They allow to specifically test different expressivity levels, e.g. along the Chomsky hierarchy. Typical language model architectures do not necessarily fit perfectly in these hierarchies \u2014 nevertheless these languages allow to illustrate differences in generalization expressivity between different architectures. Our evaluation tasks are heavily based on the work of . Experiment Setup. The different formal language tasks in the experiment (see individual tasks description below) encompass different levels of the Chomsky hierarchy as well as additional counting and memory-focused tasks.",
    "xlstm-18": "We use different lengths per sample, which allows us to validate in a length extrapolation setting. We train on a varying task length up to 40. The evaluation is done for task lengths between 40 and 256 as we are only interested in the \u201ctask generalization capabilities\u201c of the models. In all experiments, we use two blocks (or layers for the pure LSTM) for all models. We compare Llama, Mamba, Retention, Hyena, RWKV-4, RWKV-5, RWKV-6, LSTM, xLSTM[0:1], xLSTM[1:0] and xLSTM[1:1]. The sLSTM block is used without a convolution and with normal weight initialization. LSTM (Block) refers to an architecture where a vanilla LSTM is used instead of self-attention inside a Transformer block. All models are trained with 3 different learning rates (1e-2, 1e-3, 1e-4), each with two seeds. Batch size is 256 \u2014 cosine annealing (min lr: 1e-5) with 10% warm-up steps is applied. We use AdamW and a weight decay of 0.1 for training. In each experiment we train for 100k steps \u2014 the samples are generated randomly, however, all experiments are trained and evaluated on the same samples. Additional Formal Language Results. Figure 8 showcases supplementary results on formal language task, detailing tasks where no model attained a minimum scaled accuracy of 0.3. Although no model achieves proper extrapolation of the task to a larger context length, xLSTM performs best among the evaluated models.",
    "xlstm-19": "Individual Task Description. The majority of tasks are based on . We provide the vocabulary size |V| and the random accuracy srand (for accuracy scaling), used in the evaluation. As we evaluate different task lengths each task has a padding token which is used to pad the sequence to the given context length.",
    "xlstm-20": "In Listing [task:majority] there is an example for each task. Bucket Sort Given a string of tokens of a sorted alphabet, compute the sorted string. $|V|=11 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 1}$\n\nCycle Nav Given a string of \u201cmovement tokens\u201d ( + 1, \u2212 1, STAY) compute the end position of the agent with start position 0. The position must be computed modulo the maximum position. $|V|=9 \\quad s_{\\text{rand}}=\\frac{1}{|V|-4}$\n\nEven Pairs Given a binary string of a and b tokens, compute whether the number of ab and ba is even. This task can be solved by checking if the first and last token of the string are equal. |V| = 3 srand = 0.5\n\nMajority Given a string of tokens, compute the token that occurred most often in the sequence. $|V|=64 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 1}$\n\nMajority Count Given a string of tokens of an ordered alphabet. Compute the count of the token that occurred most often in the sequence. If the count exceeds the vocab size, the highest vocab token should be outputted. $|V|=64 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 1}$\n\nMissing Duplicate Given a string of tokens. The string is repeated but one of the tokens is masked in the repetition. Output the token that is masked. $|V|=11 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 2}$\n\nMod Arithmetic (w/o Brackets) Calculate the result \u2014 modulo the max number \u2014 of the arithmetic operations in the context. The maximum number is the vocabulary size minus the number of special tokens (+,-,*,=, [PAD]). $|V|=10 \\quad s_{\\text{rand}}=\\frac{1}{|V|-5}$\n\nMod Arithmetic (w Brackets) Calculate the result \u2014 modulo the maximum number \u2014 of the arithmetic operations in the context. The maximum number is vocabulary size minus the number of special tokens (+,-,*,=,(,), [PAD]). $|V|=12 \\quad s_{\\text{rand}}=\\frac{1}{|V|-7}$\n\nOdds First An string of tokens t1, t2, t3, ...tn is given. Output all tokens with and odd index (t1, t3, ...) then the token with an even index (t2, t4,..) . Apart from that keep the ordering of the initial string. $|V|=12 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 2}$\n\nParity Given a binary string of a and b tokens, compute if the number of b\u2018s is even.",
    "xlstm-21": "If the number is even output a otherwise b. This is equivalent to sequentially calculating the half-adder sum. |V| = 3 srand = 0.5\n\nRepetition Given a string of tokens \u2014 repeat it. $|V|=12 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 2}$\n\nReverse String Given a string of tokens \u2014 repeat it in reverse order. $|V|=12 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 2}$\n\nStack Manipulation An initial stack content is given, followed by a sequence of push and pop operations. Compute the stack content after the operations $|V|=11 \\quad s_{\\text{rand}}=\\frac{1}{\\lfloor\\frac{|V| - 3}{2}\\rfloor}$\n\nSet Given a string of tokens, compute the ordered set of the tokens. Keep the ordering so that tokens that occurred first are also outputted first. $|V|=128 \\quad s_{\\text{rand}}=\\frac{1}{|V| - 2}$\n\nSolve Equation Given is an equation with the operators {+,-,*,=,(,)}, number, and an unknown variable x. Compute the value of the variable modulo the max number. The maximum number is vocabulary size minus the number of special tokens (+,-,*,=,(,), [PAD], [ACT]). $|V|=14 \\quad s_{\\text{rand}}=\\frac{1}{|V|-9}$\n\n[frame=single,escapeinside={<@}{@>},caption={Examples of the formal language tasks. Red tokens are evaluated for loss and accuracy metrics, but are padded for the input. The tokens are illustrated in a way that allows easy semantic interpretation for the given task --- hence, some tokens are represented by multiple characters.},label=task:majority,captionpos=b]\n\nBucket Sort\n\n  Sequence: 1 4 8 6 1 <@\\textcolor{red}{1}@> <@\\textcolor{red}{1}@> <@\\textcolor{red}{4}@> <@\\textcolor{red}{6}@> <@\\textcolor{red}{8}@>\n\nCycle Nav\n\n  Sequence: STAY +1 -1 +1 STAY +1 +1 +1 -1 <@\\textcolor{red}{P3}@>\n\nEven Pairs\n\n  Sequence: a b b a a b a b a <@\\textcolor{red}{a}@>\n\nMajority\n\n  Sequence: 1 7 6 4 3 8 1 7 2 <@\\textcolor{red}{1}@>\n\nMajority Count\n\n  Sequence: 1 7 6 4 4 8 1 7 2 <@\\textcolor{red}{2}@>\n\nMissing Duplicate\n\n  Sequence: 4 8 6 2 5 4 8 6 2 [MIS] <@\\textcolor{red}{5}@>\n\nMod Arithmetic (w/o Braces)\n\n  Sequence: 0 - 4 + 0 - 2 = <@\\textcolor{red}{4}@> [PAD]\n\nMod Arithmetic (w Braces)\n\n  Sequence: ( ( ( 2 ) * - 2 ) - ( - 4 - 2 ) ) = <@\\textcolor{red}{2}@>\n\nOdds First\n\n  Sequence: 2 7 3 2 6 9 [ACT] <@\\textcolor{red}{2}@> <@\\textcolor{red}{3}@> <@\\textcolor{red}{6}@> <@\\textcolor{red}{7}@> <@\\textcolor{red}{2}@> <@\\textcolor{red}{9}@>\n\nParity:\n\n  Sequence: a b b a a b a <@\\textcolor{red}{b}@>\n\nRepetition\n\n  Sequence: 2 4 8 6 2 [ACT] <@\\textcolor{red}{2}@> <@\\textcolor{red}{4}@> <@\\textcolor{red}{8}@> <@\\textcolor{red}{6}@> <@\\textcolor{red}{2}@>\n\nReverse String\n\n  Sequence: 2 4 8 6 2 [ACT] <@\\textcolor{red}{2}@> <@\\textcolor{red}{6}@> <@\\textcolor{red}{8}@> <@\\textcolor{red}{4}@> <@\\textcolor{red}{2}@>\n\nStack Manipulation\n\n  Sequence: ST1 ST1 ST3 POP POP PS3 PS3 [ACT] <@\\textcolor{red}{ST1}@> <@\\textcolor{red}{ST3}@> <@\\textcolor{red}{ST3}@>   \n\nSet\n\n  Sequence: 8 6 6 3 5 4 5 3 [ACT] <@\\textcolor{red}{8}@> <@\\textcolor{red}{6}@> <@\\textcolor{red}{3}@> <@\\textcolor{red}{5}@> <@\\textcolor{red}{4}@>\n\nSolve Equation:\n\n  Sequence: ( ( ( 2 + 0 ) + - x ) - ( 1 ) ) = 2 [ACT] <@\\textcolor{red}{2}@>\n\nTest of xLSTM\u2019s Memory Capacities on Associative Recall Tasks. We test the memory capacity of xLSTM with the Multi-Query Associative Recall task proposed by . Figure 9 illustrates the basic task setup. Why Multi-Query Associative Recall for Memory Tests of LLM Architectures. Associative Recall (AR), the ability to retrieve a specific value (information) associated with a given key (information), constitutes a key capability for LLM to perform well . Especially its quality of in-context learning seems to be strongly connected to this capability . attribute performance gaps between early non-Transformer and Transformer language models specifically to performance gaps in associative recall. They argue that prior AR evaluations fall short of capturing these differences and propose MQAR, which can show the AR performance differences that translate to performance differences in language modeling performance. Hence, MQAR is especially suitable to analyze the memory capacity of LLM. Transformer (e.g. Llama) models can be seen as the gold standard for this task as their memory is exponential in the coding dimension . Experiment Setup. There are two relevant variables that determine different experimental setups. (1) Context Length (CL): Length of the sequence of one sample \u2014 this influences the distances between the key-value definition and the recall. (2) Number Key-Value Pairs (KV): Influences how many key-value pairs the model needs to keep track of. The vocabulary size is always 8192. In all experiments, we use two blocks (or layers for the pure LSTM) for all models. LSTM (Block) model refers to an architecture where a vanilla LSTM is used instead of self-attention inside a Transformer block. For each task setup, we train each model with 4 different learning rates (batch size > 24: {1e-2, 2.15e-3, 4.6e-4, 1e-4}, batch size 24: {1e-3, 2.2e-4, 5e-5, 1e-5}). The batch size (BS) changes depending on the context length (CL) (CL=64/128: BS=512; CL=256: BS=256; CL=756: BS=128; CL=1024: BS=96; CL=2048: BS=24). We vary the embedding dimension (Model Dim) between different experiments \u2013 different numbers of heads are used accordingly. For each experiment, we generate 100,000 training samples (validation: 3,000 samples) and train for 64 epochs. We apply cosine annealing (min lr: 1e-4 and 1e-5) with 10% warm-up steps. We use AdamW and a weight decay of 0.1 for training. We conduct three different experiments:\n\nMQAR-Experiment 1 evaluates, in the same fashion as , a variety of models (Llama, Mamba, Mamba (noWT) - i.e. without weight tying, Retention, Hyena, H3, RWKV-4, RWKV-5, RWKV-6, LSTM, LSTM (Block), xLSTM[0:1], xLSTM[1:0] and xLSTM[1:1]) on increasing task difficulty by increasing the context length and number of key-value pairs simultaneously. We benchmark three parameter settings: CL,KV={(64,4),(128,8),(256,16)}. MQAR-Experiment 2 increases the task difficulty notably and goes beyond previous evaluations on this task. We individually scale the context length (CL={756, 1024, 2048}) and the key-value pairs (KV={48, 96, 256}) and evaluate all combinations. This experiment especially probes the memory capacity because the number of key-value pairs is high. To reduce the computational burden we only evaluate models that perform flawlessly in Experiment 1 \u2014 additionally we evaluate Transformer only in the hardest setting (CL=2048) as sanity check, because no performance decrease is expected. MQAR-Experiment 3 analyzes whether the AR capability learned on a certain context length extrapolates to bigger context lengths. For each KV setting of Experiment 2, we use the models (we select the 3 biggest model dimensions) trained on CL=2048 and evaluate bigger context lengths (CL={4096, 6144, 8192}).",
    "xlstm-22": "Extended Results. The result of Experiment 1 can be found in Figure 10. In accordance to the results of H3, Hyena, RWKV-4 fail to solve the task with a smaller model dimension. In contrast, xLSTM[1:1], xLSTM[1:0], Mamba, RWKV-5 and RWKV-6 are able to solve these settings for all model dimensions. The comparison of xLSTM[0:1] with both original LSTM variants indicates that the exponential gating mechanism improves the AR capabilities of the model. However, both fall short because of the reduced memory capacity compared to xLSTM[1:1] and xLSTM[1:0]. The results of Experiment 2 are presented in Figure 11. Scaling the context length has a low impact on the performance of the models. However, while xLSTM[1:1] and xLSTM[1:0] show no clear decay, both RWKV variants slightly, but consistently lose performance with increasing context lengths. The varying number of key-value pairs, which mainly probes the memory capacity of the non-Transformer models, has a more notable impact across all models. RWKV-5 seems to outperform RWKV-6. The latter fails to learn the task at all in some KV=256 settings. Overall xLSTM[1:1] is the best-performing non-Transformer model \u2014 suggesting that it provides enhanced memory capacity, also in long contexts. Figure 12 shows the extrapolation results from Experiment 3. For xLSTM[1:1], xLSTM[1:0], and Mamba the model performance does not change in the extrapolation setting. The RWKV models (especially RWKV5) degrade slightly with increasing context length. xLSTM[1:1] performs best, as it maintains its superior performance of Experiment 2. Test of xLSTM\u2019s Long Range Capabilities on the Long Range Arena. We assess the performance of xLSTM across tasks in the Long Range Arena benchmark , examining its ability to effectively handle longer context lengths and diverse data types. Our experiments on Long Range Arena benchmark are composed of five tasks:\n\nRetrieval: The task is to predict if two documents have a citation link.",
    "xlstm-23": "The dataset of text documents is derived from the ACL Anthology Network . ListOps: This is a set of modular arithmetic tasks including brackets and lists of numbers, using the operations MIN, MAX, MEDIAN and SUMMOD (modular sum). A particular example is: [MAX 4 3 [MIN 2 3 ] 1 0 [MEDIAN 1 5 8 9, 2]] $\\xrightarrow{}$ 5\n\nImage: This task is based on a version of the CIFAR dataset , where images are transformed to a sequence of pixels and this sequence has to be classified into the usual CIFAR classes. We test both a gray-scale (G-Image) and RGB (RGB-Image) version of this dataset, as uses colored images contrary to the standard setup. Pathfinder: The input for this task is a 32x32 gray-scale image, given as pixel sequence, with two dots and several curved lines on it. The task is to predict if the two dots are connected by any of the lines . We omit the Text classification task , as the language modeling experiments already test this kind of data, and the Pathfinder-X version of Pathfinder. Experiment Setup. The architectures that are tested in this experiment comprise LLama, Mamba, LSTM, RWKV-4, and xLSTM. LSTM (Block) refers to an architecture where a vanilla LSTM is used inside a post up-projection block (like Transformer with attention replaced by LSTM). For xLSTM we choose the best performing of xLSTM[0:1] or xLSTM[1:0] on the validation set, specifically the former for the Image tasks and the latter for all other ones. We use the hyperparameter settings of the S5 model and Linear Recurrent Unit model , with additional hyperparamter search on learning rates and schedulers for all models. We use two different schedulers: Linear Warm-up Cosine Annealing and Linear Warm-up Cosine Annealing with Restarts. Both learning rate schedulers were evaluated with learning rates of 1e-3, 6e-4 and 1e-4. For the second scheduler, the number of restarts (R) is set to 3. The model hyperparameters for each dataset are displayed in Table [tab:lra_hyperparameters]. Results. Table [tab:lra_test_accuracy] shows the result of experiments on the Long Range Arena benchmark. xLSTM demonstrates consistent strong performance on all of the tasks, suggesting that the proposed architecture is remarkably efficient in handling different aspects of long context problems. width=1.0\n\nMethod Comparison and Ablation Study on SlimPajama (15B)\n\nGeneral Training Procedure. We tokenize our datasets using the HuggingFace GPT-2 tokenizer 4 and use this tokenizer for all models in this paper. In general, we try to follow for the general training setup, i.e. we choose context length 2048 and batch sizes 256 or 512 for our models. We use the AdamW optimizer with beta parameters (\u03b21, \u03b22)=(0.9, 0.95) and an epsilon parameter of 1e-5. As learning rate scheduler we use a linear warm-up with 750 steps and cosine decay to 10% of the peak learning rate. We apply a weight decay of 0.1 to all our models and always exclude the token embedding matrix from weight decay. If not specified otherwise, we do not tie the weights of the token embedding and the language model head. For parallelization, we use PyTorch FSDP in SHARD_GRAD_OP mode with mixed precision in bfloat16, where applicable. For small models we use NO_SHARD. We keep the weights in float32 and reduce the gradients across GPUs in float32. We use torch.compile to speed up models, except for Transformer models as their training curves did not match the non-compiled versions. For xLSTM[7:1], we use positions [3, 5, 7, 40, 42, 44] for sLSTM-based blocks, except for the 125M size, where we use [3, 20] (this is actually a [11:1] ratio). width=\n\nDetails on Comparison to Other Methods. For the model comparison on 15B training tokens of SlimPajama we train all models with context length 2048 and batch size 256. We use a peak learning rate of 1e-3 for all models for comparability. The learning rate decays over 30k training steps. The models are compared after one epoch at training step 28170. As model implementations we use the original repositories\u2019 code for Mamba 5, RWKV-5, RWKV-6 6. For RWKV-4, we use a cleaned and validated re-implementation based on the original repo and kernels . For HGRN , GLA , HGRN2 we use the a re-implementation by the authors of GLA 7. For GPT-3 and Llama-like Transformers, we use our own implementations based on PyTorch. Note that for all xLSTMs, Transformers, Mamba and RWKV-4, we use Mixed Precision training with bfloat16 and weights in float32 precision, while resorting to full bfloat16 precision (weights and operations) for all other models due to their custom kernels that force one precision internally. Following the general training procedure we use torch.compile for all models, except for models using the flash-linear-attention library because of compilation problems. General Details on Ablation Studies. We follow our general training procedure and train all models with context length 2048, batch size 256 and peak learning rate 1e-3. We report perplexity values on the validation set. Additional Ablation Study on Matrix Memory. As default block configuration we use the mLSTM in the pre up-projection block (see Figure 7) and the sLSTM in the post up-projection block (see Figure 6). In this experiment we study combination of mLSTM with different block variants using the xLSTM[1:0] architecture. We compare the mLSTM in a post up-projection block (see Figure [fig:Backbones] and 6) with ReLU2 activation function and non-gated feed-forward network to mLSTM in a pre up-projection block with and without a dimension-wise causal convolution. Table [tab:abl_matrixmemory] shows that the matrix memory benefits from the pre up-projection block structure, and that the convolution within this block is important. width=\n\nDetails on new xLSTM Components Ablation Study. In Table [tab:ablstudies] (top), we show our modifications to the vanilla LSTM that transform the vanilla LSTM into the xLSTM. We start with a large default PyTorch LSTM with 24 layers and 1536 hidden size. Due to a lack of skip-connections and LayerNorms, vanilla LSTMs of this size are not trainable. We then add skip-connections and pre-LayerNorms before each LSTM layer corresponding to a residual architecture. This enables training for LSTMs at this scale. Replacing every second LSTM layer by a non-gated feed-forward network with GeLU activation function (similar to ), which corresponds to the post up-projection backbone (see Figure [fig:Backbones]) further boosts performance. Adding Exponential Gating to this architecture yields the sLSTM as depicted in Figure 6, with another large performance improvement. Finally, adding the best Matrix Memory variant found in Table [tab:abl_matrixmemory] by replacing some sLSTM blocks with the mLSTM (see Figure 7) gives xLSTM[7:1] with the best performance. Details on Gating Technique Ablation Study. In Table [tab:ablstudies] (bottom), we investigate the effect of trainable and input-dependent gates for mLSTM. The results show that, in contrast to other methods , having the gates both learnable and input dependent gives the best results. Details on Scaling Experiments. We follow our general training procedure (see paragraph above) and train all models, including the 1.3B and 2.7B model sizes, with context length 2048 and batch size 256. We use the peak learning rates from Table [tab:spaj_peaklr]. xLSTM Large Language Models \u2013 SlimPajama300B\n\nGeneral Training Procedure. We use the same general training procedure as in Section 8.2.0.1 with peak learning rates from Table [tab:spaj_peaklr]. All models are trained with context length 2048. The 125M, 350M and 760M models are trained with batch size 256 for 600k training steps, whereas the 1.3B models are trained with batch size 512 for 300k training steps.",
    "xlstm-24": "We keep the same learning rate scheduler across all models. Details on Downstream Evaluation. We use the LM Evaluation Harness from EleutherAI for evaluating the following tasks that measure common sense reasoning: LAMBADA (OpenAI version in LM Evaluation Harness) , HellaSwag , PIQA , ARC-challenge, ARC-easy , WinoGrande . This selection of downstream tasks is inspired by . Following , we report accuracy for LAMADA, WinoGrande, PIQA, and ARC-easy, and accuracy normalized by sequence length for HellaSwag and ARC-challenge. We evaluate all models in full float32, full bfloat16 and bfloat16 Mixed Precision with weights in float32.",
    "xlstm-25": "For each model we select the best value respectively. Details on PALOMA. We use 16 out of the 18 data sources of the PALOMA dataset . We use C4 , MC4-EN , Wikitext-103 , PennTreebank , RedPajama , Falcon Refinedweb (Refined Web) , Dolma v1.5 , M2D2 S2ORC, M2D2 Wikipedia , C4-100-Domains (C4 Domains) , Dolma-100-Subreddits (Dolma Subreddits) , Dolma-100-Programming Languages (Dolma Coding) , TwitterAAE , Manosphere Corpus , GAB Corpus , 4CHAN Corpus .",
    "xlstm-26": "We leave out ThePile and ICE as they are not part of Paloma\u2019s Huggingface dataset repository8.",
    "xlstm-27": "A detailed description of these datasets can be found in . All models are evaluated in bfloat16 Mixed Precision. Results on the data sources TwitterAAE, Manosphere, GAB and 4CHAN are reported in Table [tab:ppleval_app] and for each individual dataset the results are given in Section 9. width=0.6\n\nIn order to evaluate the perplexity values on each data source, we split the text documents into sequences of length 2048, which corresponds to the pre-training context length of all models. For documents longer than 2048 tokens we split each document into non-overlapping input sequences. In this case for the last input sequence, we follow the LM Evaluation Harness and fill up the full 2048 token context window with previous tokens, but compute the perplexity only on the remaining tokens. We compute the token perplexities per data source in Table [tab:ppleval] as the exponential of the negative loglikelihoods per domain weighted by the number of tokens per domain in that data source as it is defined in\n\nDetailed Results on PALOMA Language Model Evaluation\n\nWe report the perplexity values on each of the 571 subdomains of PALOMA in Table [tab:spaj300B_ppl_evaluation_detail]. Note that the aggregated perplexity values in Table [tab:ppleval] are not macro averages of the values shown in Table [tab:spaj300B_ppl_evaluation_detail]. https://python.org\u21a9\ufe0e\n\nhttps://pytorch.org\u21a9\ufe0e\n\nhttps://docs.nvidia.com/cuda/archive/12.1.0/\u21a9\ufe0e\n\nhttps://huggingface.co/docs/transformers/en/model_doc/gpt2\u21a9\ufe0e\n\nhttps://github.com/state-spaces/mamba\u21a9\ufe0e\n\nhttps://github.com/BlinkDL/RWKV-LM/\u21a9\ufe0e\n\nhttps://github.com/sustcsonglin/flash-linear-attention\u21a9\ufe0e\n\nhttps://huggingface.co/datasets/allenai/paloma\u21a9\ufe0e"
}