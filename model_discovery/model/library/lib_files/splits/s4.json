{
    "s4-0": "Efficiently Modeling Long Sequences with Structured State Spaces\n\nAlbert Gu Karan Goel Christopher R\u00e9\n\nAbstract\n\nA central goal of sequence modeling is designing a single principled model that can address sequence data across a range of modalities and tasks, particularly on long-range dependencies. Although conventional models including RNNs, CNNs, and Transformers have specialized variants for capturing long dependencies, they still struggle to scale to very long sequences of or more steps. A promising recent approach proposed modeling sequences by simulating the fundamental state space model (SSM) , and showed that for appropriate choices of the state matrix , this system could handle long-range dependencies mathematically and empirically. However, this method has prohibitive computation and memory requirements, rendering it infeasible as a general sequence modeling solution. We propose the Structured State Space sequence model (S4) based on a new parameterization for the SSM, and show that it can be computed much more efficiently than prior approaches while preserving their theoretical strengths. Our technique involves conditioning with a low-rank correction, allowing it to be diagonalized stably and reducing the SSM to the well-studied computation of a Cauchy kernel. S4 achieves strong empirical results across a diverse range of established benchmarks, including (i) 91% accuracy on sequential CIFAR-10 with no data augmentation or auxiliary losses, on par with a larger 2-D ResNet, (ii) substantially closing the gap to Transformers on image and language modeling tasks, while performing generation faster (iii) SoTA on every task from the Long Range Arena benchmark, including solving the challenging Path-X task of length 16k that all prior work fails on, while being as efficient as all competitors.111Code is publicly available at https://github.com/HazyResearch/state-spaces. 1 Introduction\n\nA central problem in sequence modeling is efficiently handling data that contains long-range dependencies (LRDs). Real-world time-series data often requires reasoning over tens of thousands of time steps, while few sequence models address even thousands of time steps. For instance, results from the long-range arena (LRA) benchmark [40] highlight that sequence models today perform poorly on LRD tasks, including one (Path-X) where no model performs better than random guessing. Since LRDs are perhaps the foremost challenge for sequence models, all standard model families such as continuous-time models (CTMs), RNNs, CNNs, and Transformers include many specialized variants designed to address them. Modern examples include orthogonal and Lipschitz RNNs [1, 13] to combat vanishing gradients, dilated convolutions to increase context size [3, 28], and an increasingly vast family of efficient Transformers that reduce the quadratic dependence on sequence length [22, 8]. Despite being designed for LRDs, these solutions still perform poorly on challenging benchmarks such as LRA [40] or raw audio classification [18]. An alternative approach to LRDs was recently introduced based on the state space model (SSM) (Fig. 1). SSMs are a foundational scientific model used in fields such as control theory, computational neuroscience, and many more, but have not been applicable to deep learning for concrete theoretical reasons. In particular, Gu et al. [18] showed that deep SSMs actually struggle even on simple tasks, but can perform exceptionally well when equipped with special state matrices recently derived to solve a problem of continuous-time memorization [45, 16]. Their Linear State Space Layer (LSSL) conceptually unifies the strengths of CTM, RNN and CNN models, and provides a proof of concept that deep SSMs can address LRDs in principle. Unfortunately, the LSSL is infeasible to use in practice because of prohibitive computation and memory requirements induced by the state representation. For state dimension and sequence length , computing the latent state requires operations and space \u2013 compared to a lower bound for both. Thus for reasonably sized models (e.g. in Gu et al. [18]), the LSSL uses orders of magnitude more memory than comparably-sized RNNs or CNNs. Although theoretically efficient algorithms for the LSSL were proposed, we show that these are numerically unstable. In particular, the special matrix is highly non-normal in the linear algebraic sense, which prevents the application of conventional algorithmic techniques. Consequently, although the LSSL showed that SSMs have strong performance, they are currently computationally impractical as a general sequence modeling solution. In this work, we introduce the Structured State Space (S4) sequence model based on the SSM that solves the critical computational bottleneck in previous work. Technically, S4 reparameterizes the structured state matrices appearing in Voelker et al. [45], Gu et al. [16] by decomposing them as the sum of a low-rank and normal term. Additionally, instead of expanding the standard SSM in coefficient space, we compute its truncated generating function in frequency space, which can be simplified into a multipole-like evaluation. Combining these two ideas, we show that the low-rank term can be corrected by the Woodbury identity while the normal term can be diagonalized stably, ultimately reducing to a well-studied and theoretically stable Cauchy kernel [29, 30]. This results in computation and memory usage, which is essentially tight for sequence models. Compared to the LSSL, S4 is up to faster with less memory usage, while exceeding the LSSL\u2019s performance empirically. Empirically, S4 significantly advances the state-of-the-art for LRD. On the LRA benchmark for efficient sequence models, S4 is as fast as all baselines while outperforming them by points on average. S4 is the first model to solve the difficult LRA Path-X task (length-), achieving 88% accuracy compared to 50% random guessing for all prior work. On speech classification with length- sequences, S4 halves the test error () of specialized Speech CNNs \u2013 by contrast, all RNN and Transformer baselines fail to learn ( error). Towards a general-purpose sequence model. Beyond LRD, a broad goal of machine learning is to develop a single model that can be used across a wide range of problems. Models today are typically specialized to solve problems from a particular domain (e.g. images, audio, text, time-series), and enable a narrow range of capabilities (e.g. efficient training, fast generation, handling irregularly sampled data). This specialization is typically expressed via domain-specific preprocessing, inductive biases, and architectures. Sequence models provide a general framework for solving many of these problems with reduced specialization \u2013 e.g. Vision Transformers for image classification with less 2D information [12]. However, most models such as Transformers generally still require substantial specialization per task to achieve high performance. Deep SSMs in particular have conceptual strengths that suggest they may be promising as a general sequence modeling solution. These strengths include a principled approach to handling LRDs, as well as the ability to move between continuous-time, convolutional, and recurrent model representations, each with distinct capabilities (Fig. 1). Our technical contributions enable SSMs to be applied successfully to a varied set of benchmarks with minimal modification:\n\n\u2022\n\nLarge-scale generative modeling. On CIFAR-10 density estimation, S4 is competitive with the best autoregressive models ( bits per dim). On WikiText-103 language modeling, S4 substantially closes the gap to Transformers (within perplexity), setting SoTA for attention-free models. \u2022\n\nFast autoregressive generation. Like RNNs, S4 can use its latent state to perform faster pixel/token generation than standard autoregressive models on CIFAR-10 and WikiText-103. \u2022\n\nSampling resolution change. Like specialized CTMs, S4 can adapt to changes in time-series sampling frequency without retraining, e.g. at frequency on speech classification. \u2022\n\nLearning with weaker inductive biases. With no architectural changes, S4 surpasses Speech CNNs on speech classification, outperforms the specialized Informer model on time-series forecasting problems, and matches a 2-D ResNet on sequential CIFAR with over accuracy. 2 Background: State Spaces\n\nSections 2.1, 2.2, 2.4 and 2.3 describe the four properties of SSMs in Fig. 1: the classic continuous-time representation, addressing LRDs with the HiPPO framework, the discrete-time recurrent representation, and the parallelizable convolution representation. In particular, Section 2.4 introduces the SSM convolution kernel , which is the focus of our theoretical contributions in Section 3. 2.1 State Space Models: A Continuous-time Latent State Model\n\nThe state space model is defined by the simple equation (1). It maps a 1-D input signal to an -D latent state before projecting to a 1-D output signal . x \u2032 \u200b ( t ) superscript \ud835\udc65 \u2032 \ud835\udc61 \\displaystyle x^{\\prime}(t) = \ud835\udc68 \u200b x \u200b ( t ) + \ud835\udc69 \u200b u \u200b ( t ) absent \ud835\udc68 \ud835\udc65 \ud835\udc61 \ud835\udc69 \ud835\udc62 \ud835\udc61 \\displaystyle=\\bm{A}x(t)+\\bm{B}u(t) (1) y \u200b ( t ) \ud835\udc66 \ud835\udc61 \\displaystyle y(t) = \ud835\udc6a \u200b x \u200b ( t ) + \ud835\udc6b \u200b u \u200b ( t ) absent \ud835\udc6a \ud835\udc65 \ud835\udc61 \ud835\udc6b \ud835\udc62 \ud835\udc61 \\displaystyle=\\bm{C}x(t)+\\bm{D}u(t)\n\nSSMs are broadly used in many scientific disciplines and related to latent state models such as Hidden Markov Models (HMM). Our goal is to simply use the SSM as a black-box representation in a deep sequence model, where are parameters learned by gradient descent. For the remainder of this paper, we will omit the parameter for exposition (or equivalently, assume ) because the term can be viewed as a skip connection and is easy to compute. 2.2 Addressing Long-Range Dependencies with HiPPO\n\nPrior work found that the basic SSM (1) actually performs very poorly in practice. Intuitively, one explanation is that linear first-order ODEs solve to an exponential function, and thus may suffer from gradients scaling exponentially in the sequence length (i.e., the vanishing/exploding gradients problem [32]). To address this problem, the LSSL leveraged the HiPPO theory of continuous-time memorization [16]. HiPPO specifies a class of certain matrices that when incorporated into (1), allows the state to memorize the history of the input . The most important matrix in this class is defined by equation (2), which we will call the HiPPO matrix. For example, the LSSL found that simply modifying an SSM from a random matrix to equation (2) improved its performance on the sequential MNIST benchmark from to . ( HiPPO Matrix ) \ud835\udc68 n \u200b k = \u2212 { ( 2 \u200b n + 1 ) 1 / 2 \u200b ( 2 \u200b k + 1 ) 1 / 2 if \u200b n > k n + 1 if \u200b n = k 0 if \u200b n < k . HiPPO Matrix subscript \ud835\udc68 \ud835\udc5b \ud835\udc58 cases superscript 2 \ud835\udc5b 1 1 2 superscript 2 \ud835\udc58 1 1 2 if \ud835\udc5b \ud835\udc58 \ud835\udc5b 1 if \ud835\udc5b \ud835\udc58 0 if \ud835\udc5b \ud835\udc58 (\\text{{HiPPO Matrix}})\\qquad\\bm{A}_{nk}=-\\begin{cases}(2n+1)^{1/2}(2k+1)^{1/2}&\\mbox{if }n>k\\\\\nn+1&\\mbox{if }n=k\\\\\n0&\\mbox{if }n<k\\end{cases}. (2)\n\n2.3 Discrete-time SSM: The Recurrent Representation\n\nTo be applied on a discrete input sequence instead of continuous function , (1) must be discretized by a step size that represents the resolution of the input. Conceptually, the inputs can be viewed as sampling an implicit underlying continuous signal , where . To discretize the continuous-time SSM, we follow prior work in using the bilinear method [43], which converts the state matrix into an approximation . The discrete SSM is\n\nx k subscript \ud835\udc65 \ud835\udc58 \\displaystyle x_{k} = \ud835\udc68 \u00af \u200b x k \u2212 1 + \ud835\udc69 \u00af \u200b u k absent bold-\u00af \ud835\udc68 subscript \ud835\udc65 \ud835\udc58 1 bold-\u00af \ud835\udc69 subscript \ud835\udc62 \ud835\udc58 \\displaystyle=\\bm{\\overline{A}}x_{k-1}+\\bm{\\overline{B}}u_{k} \ud835\udc68 \u00af bold-\u00af \ud835\udc68 \\displaystyle\\bm{\\overline{A}} = ( \ud835\udc70 \u2212 \u0394 / 2 \u22c5 \ud835\udc68 ) \u2212 1 \u200b ( \ud835\udc70 + \u0394 / 2 \u22c5 \ud835\udc68 ) absent superscript \ud835\udc70 \u22c5 \u0394 2 \ud835\udc68 1 \ud835\udc70 \u22c5 \u0394 2 \ud835\udc68 \\displaystyle=(\\bm{I}-\\Delta/2\\cdot\\bm{A})^{-1}(\\bm{I}+\\Delta/2\\cdot\\bm{A}) (3) y k subscript \ud835\udc66 \ud835\udc58 \\displaystyle y_{k} = \ud835\udc6a \u00af \u200b x k absent bold-\u00af \ud835\udc6a subscript \ud835\udc65 \ud835\udc58 \\displaystyle=\\bm{\\overline{C}}x_{k} \ud835\udc69 \u00af bold-\u00af \ud835\udc69 \\displaystyle\\bm{\\overline{B}} = ( \ud835\udc70 \u2212 \u0394 / 2 \u22c5 \ud835\udc68 ) \u2212 1 \u200b \u0394 \u200b \ud835\udc69 absent superscript \ud835\udc70 \u22c5 \u0394 2 \ud835\udc68 1 \u0394 \ud835\udc69 \\displaystyle=(\\bm{I}-\\Delta/2\\cdot\\bm{A})^{-1}\\Delta\\bm{B} \ud835\udc6a \u00af bold-\u00af \ud835\udc6a \\displaystyle\\bm{\\overline{C}} = \ud835\udc6a . absent \ud835\udc6a \\displaystyle=\\bm{C}. Equation (3) is now a sequence-to-sequence map instead of function-to-function. Moreover the state equation is now a recurrence in , allowing the discrete SSM to be computed like an RNN. Concretely, can be viewed as a hidden state with transition matrix . Notationally, throughout this paper we use to denote discretized SSM matrices defined by (3). Note that these matrices are a function of both as well as a step size ; we suppress this dependence for notational convenience when it is clear. 2.4 Training SSMs: The Convolutional Representation\n\nThe recurrent SSM (3) is not practical for training on modern hardware due to its sequentiality. Instead, there is a well-known connection between linear time-invariant (LTI) SSMs such as (1) and continuous convolutions. Correspondingly, (3) can actually be written as a discrete convolution. For simplicity let the initial state be . Then unrolling (3) explicitly yields\n\nx 0 subscript \ud835\udc65 0 \\displaystyle x_{0} = \ud835\udc69 \u00af \u200b u 0 absent bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 \\displaystyle=\\bm{\\overline{B}}u_{0} x 1 subscript \ud835\udc65 1 \\displaystyle x_{1} = \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af \u200b u 0 + \ud835\udc69 \u00af \u200b u 1 absent bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 bold-\u00af \ud835\udc69 subscript \ud835\udc62 1 \\displaystyle=\\bm{\\overline{A}}\\bm{\\overline{B}}u_{0}+\\bm{\\overline{B}}u_{1} x 2 subscript \ud835\udc65 2 \\displaystyle x_{2} = \ud835\udc68 \u00af 2 \u200b \ud835\udc69 \u00af \u200b u 0 + \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af \u200b u 1 + \ud835\udc69 \u00af \u200b u 2 absent superscript bold-\u00af \ud835\udc68 2 bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 subscript \ud835\udc62 1 bold-\u00af \ud835\udc69 subscript \ud835\udc62 2 \\displaystyle=\\bm{\\overline{A}}^{2}\\bm{\\overline{B}}u_{0}+\\bm{\\overline{A}}\\bm{\\overline{B}}u_{1}+\\bm{\\overline{B}}u_{2} \u2026 \u2026 \\displaystyle\\dots y 0 subscript \ud835\udc66 0 \\displaystyle y_{0} = \ud835\udc6a \u00af \u200b \ud835\udc69 \u00af \u200b u 0 absent bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 \\displaystyle=\\bm{\\overline{C}}\\bm{\\overline{B}}u_{0} y 1 subscript \ud835\udc66 1 \\displaystyle y_{1} = \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af \u200b u 0 + \ud835\udc6a \u00af \u200b \ud835\udc69 \u00af \u200b u 1 absent bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 subscript \ud835\udc62 1 \\displaystyle=\\bm{\\overline{C}}\\bm{\\overline{A}}\\bm{\\overline{B}}u_{0}+\\bm{\\overline{C}}\\bm{\\overline{B}}u_{1} y 2 subscript \ud835\udc66 2 \\displaystyle y_{2} = \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af 2 \u200b \ud835\udc69 \u00af \u200b u 0 + \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af \u200b u 1 + \ud835\udc6a \u00af \u200b \ud835\udc69 \u00af \u200b u 2 absent bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 2 bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 subscript \ud835\udc62 1 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 subscript \ud835\udc62 2 \\displaystyle=\\bm{\\overline{C}}\\bm{\\overline{A}}^{2}\\bm{\\overline{B}}u_{0}+\\bm{\\overline{C}}\\bm{\\overline{A}}\\bm{\\overline{B}}u_{1}+\\bm{\\overline{C}}\\bm{\\overline{B}}u_{2} \u2026 \u2026 \\displaystyle\\dots\n\nThis can be vectorized into a convolution (4) with an explicit formula for the convolution kernel (5). y k = \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af k \u200b \ud835\udc69 \u00af \u200b u 0 + \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af k \u2212 1 \u200b \ud835\udc69 \u00af \u200b u 1 + \u22ef + \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af \u200b u k \u2212 1 + \ud835\udc6a \u00af \u200b \ud835\udc69 \u00af \u200b u k y = \ud835\udc72 \u00af \u2217 u . subscript \ud835\udc66 \ud835\udc58 bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc58 bold-\u00af \ud835\udc69 subscript \ud835\udc62 0 bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc58 1 bold-\u00af \ud835\udc69 subscript \ud835\udc62 1 \u22ef bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 subscript \ud835\udc62 \ud835\udc58 1 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 subscript \ud835\udc62 \ud835\udc58 \ud835\udc66 \u2217 bold-\u00af \ud835\udc72 \ud835\udc62 \\begin{split}y_{k}&=\\bm{\\overline{C}}\\bm{\\overline{A}}^{k}\\bm{\\overline{B}}u_{0}+\\bm{\\overline{C}}\\bm{\\overline{A}}^{k-1}\\bm{\\overline{B}}u_{1}+\\dots+\\bm{\\overline{C}}\\bm{\\overline{A}}\\bm{\\overline{B}}u_{k-1}+\\bm{\\overline{C}}\\bm{\\overline{B}}u_{k}\\\\\ny&=\\bm{\\overline{K}}\\ast u.\\end{split} (4)\n\n\ud835\udc72 \u00af \u2208 \u211d L := \ud835\udca6 L \u200b ( \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) := ( \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af i \u200b \ud835\udc69 \u00af ) i \u2208 [ L ] = ( \ud835\udc6a \u00af \u200b \ud835\udc69 \u00af , \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af , \u2026 , \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af L \u2212 1 \u200b \ud835\udc69 \u00af ) . bold-\u00af \ud835\udc72 superscript \u211d \ud835\udc3f assign subscript \ud835\udca6 \ud835\udc3f bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a assign subscript bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc56 bold-\u00af \ud835\udc69 \ud835\udc56 delimited-[] \ud835\udc3f bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 \u2026 bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc3f 1 bold-\u00af \ud835\udc69 \\bm{\\overline{K}}\\in\\mathbb{R}^{L}:=\\mathcal{K}_{L}(\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}}):=\\left(\\bm{\\overline{C}}\\bm{\\overline{A}}^{i}\\bm{\\overline{B}}\\right)_{i\\in[L]}=(\\bm{\\overline{C}}\\bm{\\overline{B}},\\bm{\\overline{C}}\\bm{\\overline{A}}\\bm{\\overline{B}},\\dots,\\bm{\\overline{C}}\\bm{\\overline{A}}^{L-1}\\bm{\\overline{B}}). (5)\n\nIn other words, equation (4) is a single (non-circular) convolution and can be computed very efficiently with FFTs, provided that is known. However, computing in (5) is non-trivial and is the focus of our technical contributions in Section 3. We call the SSM convolution kernel or filter. 3 Method: Structured State Spaces (S4)\n\nOur technical results focus on developing the S4 parameterization and showing how to efficiently compute all views of the SSM (Section 2): the continuous representation (1), the recurrent representation (3), and the convolutional representation (4). Section 3.1 motivates our approach, which is based on the linear algebraic concepts of conjugation and diagonalization, and discusses why the naive application of this approach does not work. Section 3.2 gives an overview of the key technical components of our approach and formally defines the S4 parameterization. Section 3.3 sketches the main results, showing that S4 is asymptotically efficient (up to log factors) for sequence models. Proofs are in Appendices B and C. 3.1 Motivation: Diagonalization\n\nThe fundamental bottleneck in computing the discrete-time SSM (3) is that it involves repeated matrix multiplication by . For example, computing (5) naively as in the LSSL involves successive multiplications by , requiring operations and space. To overcome this bottleneck, we use a structural result that allows us to simplify SSMs. Lemma 3.1. Conjugation is an equivalence relation on SSMs . Proof. Write out the two SSMs with state denoted by and respectively:\n\nx \u2032 superscript \ud835\udc65 \u2032 \\displaystyle x^{\\prime} = \ud835\udc68 \u200b x + \ud835\udc69 \u200b u absent \ud835\udc68 \ud835\udc65 \ud835\udc69 \ud835\udc62 \\displaystyle=\\bm{A}x+\\bm{B}u x ~ \u2032 superscript ~ \ud835\udc65 \u2032 \\displaystyle\\tilde{x}^{\\prime} = \ud835\udc7d \u2212 1 \u200b \ud835\udc68 \u200b \ud835\udc7d \u200b x ~ + \ud835\udc7d \u2212 1 \u200b \ud835\udc69 \u200b u absent superscript \ud835\udc7d 1 \ud835\udc68 \ud835\udc7d ~ \ud835\udc65 superscript \ud835\udc7d 1 \ud835\udc69 \ud835\udc62 \\displaystyle=\\bm{V}^{-1}\\bm{A}\\bm{V}\\tilde{x}+\\bm{V}^{-1}\\bm{B}u y \ud835\udc66 \\displaystyle y = \ud835\udc6a \u200b x absent \ud835\udc6a \ud835\udc65 \\displaystyle=\\bm{C}x y \ud835\udc66 \\displaystyle y = \ud835\udc6a \u200b \ud835\udc7d \u200b x ~ absent \ud835\udc6a \ud835\udc7d ~ \ud835\udc65 \\displaystyle=\\bm{C}\\bm{V}\\tilde{x}\n\nAfter multiplying the right side SSM by , the two SSMs become identical with . Therefore these compute the exact same operator , but with a change of basis by in the state . \u220e\n\nLemma 3.1 motivates putting into a canonical form by conjugation222Note that although we ultimately require , conjugation commutes with discretization so we refer to ., which is ideally more structured and allows faster computation. For example, if were diagonal, the resulting computations become much more tractable. In particular, the desired (equation (4)) would be a Vandermonde product which theoretically only needs arithmetic operations [29]. Unfortunately, the naive application of diagonalization does not work due to numerical issues. Werive the explicit diagonalization for the HiPPO matrix (2) and show it has entries exponentially large in the state size , rendering the diagonalization numerically infeasible (e.g.",
    "s4-1": "in Lemma 3.1 would not be computable). We note that Gu et al. [18] proposed a different (unimplemented) algorithm to compute faster than the naive algorithm. In Appendix B, we prove that it is also numerically unstable for related reasons. Lemma 3.2. The HiPPO matrix in equation (2) is diagonalized by the matrix . In particular, . Therefore has entries of magnitude up to . 3.2 The S4 Parameterization: Normal Plus Low-Rank\n\nThe previous discussion implies that we should only conjugate by well-conditioned matrices . The ideal scenario is when the matrix is diagonalizable by a perfectly conditioned (i.e., unitary) matrix. By the Spectral Theorem of linear algebra, this is exactly the class of normal matrices. However, this class of matrices is restrictive; in particular, it does not contain the HiPPO matrix (2). We make the observation that although the HiPPO matrix is not normal, it can be decomposed as the sum of a normal and low-rank matrix.",
    "s4-2": "However, this is still not useful by itself: unlike a diagonal matrix, powering up this sum (in (5)) is still slow and not easily optimized. We overcome this bottleneck by simultaneously applying three new techniques. \u2022\n\nInstead of computing directly, we compute its spectrum by evaluating its truncated generating function at the roots of unity . can then be found by applying an inverse FFT. \u2022\n\nThis generating function is closely related to the matrix resolvent, and now involves a matrix inverse instead of power. The low-rank term can now be corrected by applying the Woodbury identity which reduces in terms of , truly reducing to the diagonal case. \u2022\n\nFinally, we show that the diagonal matrix case is equivalent to the computation of a Cauchy kernel , a well-studied problem with stable near-linear algorithms [31, 30]. Our techniques apply to any matrix that can be decomposed as Normal Plus Low-Rank (NPLR). Theorem 1. All HiPPO matrices from [16] have a NPLR representation\n\n\ud835\udc68 = \ud835\udc7d \u200b \ud835\udeb2 \u200b \ud835\udc7d \u2217 \u2212 \ud835\udc77 \u200b \ud835\udc78 \u22a4 = \ud835\udc7d \u200b ( \ud835\udeb2 \u2212 ( \ud835\udc7d \u2217 \u200b \ud835\udc77 ) \u200b ( \ud835\udc7d \u2217 \u200b \ud835\udc78 ) \u2217 ) \u200b \ud835\udc7d \u2217 \ud835\udc68 \ud835\udc7d \ud835\udeb2 superscript \ud835\udc7d \ud835\udc77 superscript \ud835\udc78 top \ud835\udc7d \ud835\udeb2 superscript \ud835\udc7d \ud835\udc77 superscript superscript \ud835\udc7d \ud835\udc78 superscript \ud835\udc7d \\bm{A}=\\bm{V}\\bm{\\Lambda}\\bm{V}^{*}-\\bm{P}\\bm{Q}^{\\top}=\\bm{V}\\left(\\bm{\\Lambda}-\\left(\\bm{V}^{*}\\bm{P}\\right)(\\bm{V}^{*}\\bm{Q})^{*}\\right)\\bm{V}^{*} (6)\n\nfor unitary , diagonal , and low-rank factorization . These matrices HiPPO- LegS, LegT, LagT all satisfy or . In particular, equation (2) is NPLR with . 3.3 S4 Algorithms and Computational Complexity\n\nBy equation (6), note that NPLR matrices can be conjugated into diagonal plus low-rank (DPLR) form (now over instead of ). Theorems 2 and 3 describe the complexities of SSMs where is in DPLR form. S4 is optimal or near-optimal for both recurrent and convolutional representations. Theorem 2 (S4 Recurrence). Given any step size , computing one step of the recurrence (3) can be done in operations where is the state size. Theorem 2 follows from the fact that the inverse of a DPLR matrix is also DPLR (e.g. also by the Woodbury identity). This implies that the discretized matrix is the product of two DPLR matrices and thus has matrix-vector multiplication. Section C.2 computes in closed DPLR form. Theorem 3 (S4 Convolution). Given any step size , computing the SSM convolution filter can be reduced to 4 Cauchy multiplies, requiring only operations and space. Appendix C, Definition 3 formally defines Cauchy matrices, which are related to rational interpolation problems. Computing with Cauchy matrices is an extremely well-studied problem in numerical analysis, with both fast arithmetic and numerical algorithms based on the famous Fast Multipole Method (FMM) [29, 31, 30]. The computational complexities of these algorithms under various settings are described in Appendix C, Proposition 5. We reiterate that Theorem 3 is our core technical contribution, and its algorithm is the very motivation of the NPLR S4 parameterization. This algorithm is formally sketched in Algorithm 1. 3.4 Architecture Details of the Deep S4 Layer\n\nConcretely, an S4 layer is parameterized as follows. First initialize a SSM with set to the HiPPO matrix (2). By Lemma 3.1 and Theorem 1, this SSM is unitarily equivalent to some for some diagonal and vectors . These comprise S4\u2019s trainable parameters. The overall deep neural network (DNN) architecture of S4 is similar to prior work. As defined above, S4 defines a map from , i.e. a 1-D sequence map. Typically, DNNs operate on feature maps of size instead of . S4 handles multiple features by simply defining independent copies of itself, and then mixing the features with a position-wise linear layer for a total of parameters per layer. Nonlinear activation functions are also inserted between these layers. Overall, S4 defines a sequence-to-sequence map of shape (batch size, sequence length, hidden dimension), exactly the same as related sequence models such as Transformers, RNNs, and CNNs. Note that the core S4 module is a linear transformation, but the addition of non-linear transformations through the depth of the network makes the overall deep SSM non-linear. This is analogous to a vanilla CNN, since convolutional layers are also linear. The broadcasting across hidden features described in this section is also analogous to depthwise-separable convolutions. Thus, the overall deep S4 model is closely related to a depthwise-separable CNN but with global convolution kernels. Finally, we note that follow-up work found that this version of S4 can sometimes suffer from numerical instabilities when the matrix has eigenvalues on the right half-plane [14]. It introduced a slight change to the NPLR parameterization for S4 from to that corrects this potential problem. Table 1 compares the complexities of the most common deep sequence modeling mechanisms. 4 Experiments\n\nSection 4.1 benchmarks S4 against the LSSL and efficient Transformer models. Section 4.2 validates S4 on LRDs: the LRA benchmark and raw speech classification. Section 4.3 investigates whether S4 can be used as a general sequence model to perform effectively and efficiently in a wide variety of settings including image classification, image and text generation, and time series forecasting. 4.1 S4 Efficiency Benchmarks\n\nWe benchmark that S4 can be trained quickly and efficiently, both compared to the LSSL, as well as efficient Transformer variants designed for long-range sequence modeling. As outlined in Section 3, S4 is theoretically much more efficient than the LSSL, and Fig. 3 confirms that the S4 is orders of magnitude more speed- and memory-efficient for practical layer sizes. In fact, S4\u2019s speed and memory use is competitive with the most efficient Transformer variants benchmarked by Tay et al. [40]\u2014Linear Transformer [22] and Performer [8]\u2014in a parameter-matched setting (Fig.",
    "s4-3": "3, following the protocol of Tay et al. [40]). 4.2 Learning Long Range Dependencies\n\nAs described in Sections 2.2 and 3.1, S4 uses a principled approach to address LRDs based on the HiPPO theory of continuous-time memorization. Our goal in this section is to validate that S4 achieves high performance on difficult tasks that require long-range reasoning. We focus here on two problems: (i) the Long-Range Arena, a well-known benchmark designed to test efficient sequence models on LRDs, and (ii) a speech classification problem as a real-world test of LRDs. Long Range Arena (LRA). LRA [40] contains tasks with lengths 1K-16K steps, encompassing modalities and objectives that require similarity, structural, and visuospatial reasoning. Table 2 compares S4 against the 11 Transformer variants from Tay et al. [40] as well as follow-up work. S4 substantially advances the SoTA, outperforming all baselines on all tasks and averaging compared to less than for every baseline. Notably, S4 solves the Path-X task, an extremely challenging task that involves reasoning about LRDs over sequences of length . All previous models have failed (i.e. random guessing) due to memory or computation bottlenecks, or simply being unable to learn such long dependencies. We analyze S4\u2019s performance on Path-X by visualizing its learned representations, in particular 1-D convolution kernels which are the focus of our technical results in Section 3. Fig. 4 shows that S4 learns a variety of filters that display spatially consistent structure and demonstrate awareness of the 2-D nature of the data. In particular, the lower layers learn simple kernels that extract features from just a few rows of local context while ignoring the rest of the image. On the other hand, higher layers aggregate information globally across full columns of the image at varying spatial frequencies. Filters in these higher layers span the entire context ( pixels), confirming S4\u2019s ability to learn LRDs. Raw Speech Classification. Speech is a typical real-world time series domain, involving signals sampled from an underlying physical process at high frequency. We perform speech classification using the SC10 subset of the Speech Commands dataset [47] (see Section D.5). While most sequence models for speech rely on extensive preprocessing (e.g. to MFCC features), we classify raw speech (length-) following Romero et al. [35]. S4 achieves accuracy, higher than all baselines that use the shorter MFCC features, and validates that a powerful LRD model is able to extract more information from the raw data and outperform hand-crafted pre-processing. Additionally, we include a baseline CNN specifically designed for raw speech, the discriminator from the WaveGAN model [11], which performs worse than S4 while having more parameters and incorporating many more architectural heuristics (Section D.2). 4.3 S4 as a General Sequence Model\n\nA key goal of sequence modeling research is to develop a single model that can be applied in many domains (e.g. images, audio, text, time-series) with a broad range of capabilities (e.g. efficient training, fast generation, handling irregularly sampled data). As a fundamental scientific model, SSMs are a promising candidate that come with a range of capabilities, and S4\u2019s strong results on LRD benchmarks spanning images, text, and speech are evidence of S4\u2019s potential as a general sequence model. In this section, we focus on understanding this question in more depth by highlighting key strengths of S4 in settings that usually require specialized models. The tasks we focus on (generative modeling, image classification, time-series forecasting) are considered as LRD tasks in the literature, and serve as additional validation that S4 handles LRDs efficiently. Large-scale generative modeling. We investigate two well-studied image and text benchmarks to validate the scalability, flexibility, and efficiency of S4. These tasks require much larger models than our previous tasks \u2013 up to M parameters. First, CIFAR density estimation is a popular benchmark for autoregressive models, where images are flattened into a sequence of RGB subpixels that are predicted one by one. Fig. 8 shows that with no 2D inductive bias, S4 is competitive with the best models designed for this task. Second, WikiText-103 is an established benchmark for language modeling, an important task for large-scale sequence models where tokens are predicted sequentially based on past context. Although RNNs were the model of choice for many years, Transformers are now the dominant model in such applications that contain data that is inherently discrete. We show that alternative models to Transformers can still be competitive in these settings. By simply taking a strong Transformer baseline [2] and replacing the self-attention layers, S4 substantially closes the gap to Transformers (within ppl), setting SoTA for attention-free models by over ppl.",
    "s4-4": "Fast autoregressive inference. A prominent limitation of autoregressive models is inference speed (e.g. generation), since they require a pass over the full context for every new sample. Several methods have been specifically crafted to overcome this limitation such as the Linear Transformer, a hybrid Transformer/RNN that switches to a stateful, recurrent view at inference time for speed. As a stateful model, SSMs automatically have this ability (Fig. 1). By switching to its recurrent representation (Section 2.3), S4 requires constant memory and computation per time step \u2013 in contrast to standard autoregressive models which scale in the context length. On both CIFAR-10 and WikiText-103, we report the throughput of various models at generation time, with S4 around faster than a vanilla Transformer on both tasks (details in Section D.3.3). Sampling resolution change. As a continuous-time model, S4 automatically adapts to data sampled at different rates, a challenging setting for time series with a dedicated line of work [37, 10, 35]. Without re-training, S4 achieves accuracy at the frequency on Speech Commands 10 (Fig. 6), simply by changing its internal step size (Section 2.3). Learning with weaker inductive bias. Beyond our results on speech (Section 4.2), we further validate that S4 can be applied with minimal modifications on two domains that typically require specialized domain-specific preprocessing and architectures. First, we compare S4 to the Informer [50], a new Transformer architecture that uses a complex encoder-decoder designed for time-series forecasting problems. A simple application of S4 that treats forecasting as a masked sequence-to-sequence transformation (Fig. 11) outperforms the Informer and other baselines on settings across forecasting tasks. Notably, S4 is better on the longest setting in each task, e.g. reducing MSE by when forecasting days of weather data (Table 3). Finally, we evaluate S4 on pixel-level sequential image classification tasks (Fig. 6), popular benchmarks which were originally LRD tests for RNNs [1]. Beyond LRDs, these benchmarks point to a recent effort of the ML community to solve vision problems with reduced domain knowledge, in the spirit of models such as Vision Transformers [12] and MLP-Mixer [41] which involve patch-based models that without 2-D inductive bias. Sequential CIFAR is a particularly challenging dataset where outside of SSMs, all sequence models have a gap of over to a simple 2-D CNN. By contrast, S4 is competitive with a larger ResNet18 (7.9M vs. 11.0M parameters), both with (93.16% vs. 95.62%) or without (91.12% vs. 89.46%) data augmentation. Moreover, it is much more robust to other architectural choices (e.g. 90.46% vs. 79.52% when swapping BatchNorm for LayerNorm). 4.4 SSM Ablations: the Importance of HiPPO\n\nA critical motivation of S4 was the use of the HiPPO matrices to initialize an SSM. We consider several simplifications of S4 to ablate the importance of each of these components, including: (i) how important is the HiPPO initialization? (ii) how important is training the SSM on top of HiPPO? (iii) are the benefits of S4 captured by the NPLR parameterization without HiPPO? As a simple testbed, all experiments in this section were performed on the sequential CIFAR-10 task, whicih we found transferred well to other settings. Models were constrained to at most 100K trainable parameters and trained with a simple plateau learning rate scheduler and no regularization. Unconstrained SSMs. We first investigate generic SSMs with various initializations. We consider a random Gaussian initialization (with variance scaled down until it did not NaN), and the HiPPO initialization. We also consider a random diagonal Gaussian matrix as a potential structured method; parameterizing as a diagonal matrix would allow substantial speedups without going through the complexity of S4\u2019s NPLR parameterization.",
    "s4-5": "We consider both freezing the matrix and training it. Fig. 9 shows both training and validation curves, from which we can make several observations. First, training the SSM improved all methods, particularly the randomly initialized ones. For all methods, training the SSM led to improvements in both training and validation curves. Second, a large generalization gap exists between the initializations. In particular, note that when is trained, all initializations are able to reach perfect training accuracy. However, their validation accuracies are separated by over . NPLR SSMs. The previous experiment validates the importance of HiPPO in SSMs. This was the main motivation of the NPLR algorithm in S4, which utilizes structure of the HiPPO matrix (2) to make SSMs computationally feasible. Fig. 10(a) shows that random NPLR matrices still do not perform well, which validates that S4\u2019s effectiveness primarily comes from the HiPPO initialization, not the NPLR parameterization. Finally, Fig. 10(b) considers the main ablations considered in this section (with trainable SSMs) and adds minor regularization. With 0.1 Dropout, the same trends still hold, and the HiPPO initialization\u2014in other words, the full S4 method\u2014achieves test accuracy with just 100K parameters. 5 Conclusion\n\nWe introduce S4, a sequence model that uses a new parameterization for the state space model\u2019s continuous-time, recurrent, and convolutional views to efficiently model LRDs in a principled manner. Results across established benchmarks evaluating a diverse range of data modalities and model capabilities suggest that S4 has the potential to be an effective general sequence modeling solution. Acknowledgments\n\nWe thank Aditya Grover and Chris Cundy for helpful discussions about earlier versions of the method. We thank Simran Arora, Sabri Eyuboglu, Bibek Paudel, and Nimit Sohoni for valuable feedback on earlier drafts of this work. This work was done with the support of Google Cloud credits under HAI proposals 540994170283 and 578192719349. We gratefully acknowledge the support of NIH under No. U54EB020405 (Mobilize), NSF under Nos. CCF1763315 (Beyond Sparsity), CCF1563078 (Volume to Velocity), and 1937301 (RTML); ONR under No. N000141712266 (Unifying Weak Supervision); ONR N00014-20-1-2480: Understanding and Applying Non-Euclidean Geometry in Machine Learning; N000142012275 (NEPTUNE); the Moore Foundation, NXP, Xilinx, LETI-CEA, Intel, IBM, Microsoft, NEC, Toshiba, TSMC, ARM, Hitachi, BASF, Accenture, Ericsson, Qualcomm, Analog Devices, the Okawa Foundation, American Family Insurance, Google Cloud, Salesforce, Total, the HAI-AWS Cloud Credits for Research program, the Stanford Data Science Initiative (SDSI), and members of the Stanford DAWN project: Facebook, Google, and VMWare.",
    "s4-6": "The Mobilize Center is a Biomedical Technology Resource Center, funded by the NIH National Institute of Biomedical Imaging and Bioengineering through Grant P41EB027060.",
    "s4-7": "The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views, policies, or endorsements, either expressed or implied, of NIH, ONR, or the U.S. Government. References\n\nArjovsky et al. [2016] Martin Arjovsky, Amar Shah, and Yoshua Bengio. Unitary evolution recurrent neural networks. In The International Conference on Machine Learning (ICML), pages 1120\u20131128, 2016. Baevski and Auli [2018] Alexei Baevski and Michael Auli. Adaptive input representations for neural language modeling.",
    "s4-8": "arXiv preprint arXiv:1809.10853, 2018. Bai et al. [2018] Shaojie Bai, J Zico Kolter, and Vladlen Koltun. An empirical evaluation of generic convolutional and recurrent networks for sequence modeling.",
    "s4-9": "arXiv preprint arXiv:1803.01271, 2018. Bai et al. [2019] Shaojie Bai, J Zico Kolter, and Vladlen Koltun. Trellis networks for sequence modeling. In The International Conference on Learning Representations (ICLR), 2019. Chang et al. [2017] Shiyu Chang, Yang Zhang, Wei Han, Mo Yu, Xiaoxiao Guo, Wei Tan, Xiaodong Cui, Michael Witbrock, Mark Hasegawa-Johnson, and Thomas S Huang. Dilated recurrent neural networks. In Advances in Neural Information Processing Systems (NeurIPS), 2017. Child et al. [2019] Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse transformers.",
    "s4-10": "arXiv preprint arXiv:1904.10509, 2019. Chilkuri and Eliasmith [2021] Narsimha Chilkuri and Chris Eliasmith. Parallelizing legendre memory unit training.",
    "s4-11": "The International Conference on Machine Learning (ICML), 2021. Choromanski et al. [2020] Krzysztof Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos, Peter Hawkins, Jared Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. Rethinking attention with performers. In The International Conference on Learning Representations (ICLR), 2020. Dauphin et al. [2017] Yann N Dauphin, Angela Fan, Michael Auli, and David Grangier. Language modeling with gated convolutional networks.",
    "s4-12": "In International conference on machine learning, pages 933\u2013941. PMLR, 2017. De Brouwer et al. [2019] Edward De Brouwer, Jaak Simm, Adam Arany, and Yves Moreau. Gru-ode-bayes: Continuous modeling of sporadically-observed time series.",
    "s4-13": "In Advances in Neural Information Processing Systems (NeurIPS), 2019. Donahue et al. [2019] Chris Donahue, Julian McAuley, and Miller Puckette. Adversarial audio synthesis. In ICLR, 2019. Dosovitskiy et al. [2020] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale.",
    "s4-14": "arXiv preprint arXiv:2010.11929, 2020. Erichson et al. [2021] N Benjamin Erichson, Omri Azencot, Alejandro Queiruga, Liam Hodgkinson, and Michael W Mahoney. Lipschitz recurrent neural networks. In International Conference on Learning Representations, 2021. Goel et al. [2022] Karan Goel, Albert Gu, Chris Donahue, and Christopher R\u00e9. It\u2019s raw! audio generation with state-space models. arXiv preprint arXiv:2202.09729, 2022. Golub and Van Loan [2013] Gene H Golub and Charles F Van Loan. Matrix computations, volume 3. JHU press, 2013. Gu et al. [2020a] Albert Gu, Tri Dao, Stefano Ermon, Atri Rudra, and Christopher R\u00e9. Hippo: Recurrent memory with optimal polynomial projections.",
    "s4-15": "In Advances in Neural Information Processing Systems (NeurIPS), 2020a. Gu et al. [2020b] Albert Gu, Caglar Gulcehre, Tom Le Paine, Matt Hoffman, and Razvan Pascanu. Improving the gating mechanism of recurrent neural networks. In The International Conference on Machine Learning (ICML), 2020b. Gu et al. [2021] Albert Gu, Isys Johnson, Karan Goel, Khaled Saab, Tri Dao, Atri Rudra, and Christopher R\u00e9. Combining recurrent, convolutional, and continuous-time models with the structured learnable linear state space layer.",
    "s4-16": "In Advances in Neural Information Processing Systems (NeurIPS), 2021. Gu et al. [2022a] Albert Gu, Ankit Gupta, Karan Goel, and Christopher R\u00e9. On the parameterization and initialization of diagonal state space models.",
    "s4-17": "arXiv preprint arXiv:2206.11893, 2022a. Gu et al. [2022b] Albert Gu, Isys Johnson, Aman Timalsina, Atri Rudra, and Christopher R\u00e9. How to train your hippo: State space models with generalized basis projections.",
    "s4-18": "arXiv preprint arXiv:2206.12037, 2022b. Hochreiter and Schmidhuber [1997] Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural computation, 9(8):1735\u20131780, 1997. Katharopoulos et al. [2020] Angelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and Fran\u00e7ois Fleuret. Transformers are rnns: Fast autoregressive transformers with linear attention.",
    "s4-19": "In International Conference on Machine Learning, pages 5156\u20135165. PMLR, 2020. Kidger et al. [2020] Patrick Kidger, James Morrill, James Foster, and Terry Lyons. Neural controlled differential equations for irregular time series.",
    "s4-20": "arXiv preprint arXiv:2005.08926, 2020. Lezcano-Casado and Mart\u00ednez-Rubio [2019] Mario Lezcano-Casado and David Mart\u00ednez-Rubio. Cheap orthogonal constraints in neural networks: A simple parametrization of the orthogonal and unitary group.",
    "s4-21": "In The International Conference on Machine Learning (ICML), 2019. Li et al. [2018] Shuai Li, Wanqing Li, Chris Cook, Ce Zhu, and Yanbo Gao. Independently recurrent neural network (IndRNN): Building a longer and deeper RNN.",
    "s4-22": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 5457\u20135466, 2018. Lioutas and Guo [2020] Vasileios Lioutas and Yuhong Guo. Time-aware large kernel convolutions. In International Conference on Machine Learning, pages 6172\u20136183. PMLR, 2020. Merity et al. [2018] Stephen Merity, Nitish Shirish Keskar, James Bradbury, and Richard Socher. Scalable language modeling: Wikitext-103 on a single gpu in 12 hours.",
    "s4-23": "SysML, 2018. Oord et al. [2016] Aaron van den Oord, Sander Dieleman, Heiga Zen, Karen Simonyan, Oriol Vinyals, Alex Graves, Nal Kalchbrenner, Andrew Senior, and Koray Kavukcuoglu. Wavenet: A generative model for raw audio.",
    "s4-24": "arXiv preprint arXiv:1609.03499, 2016. Pan [2001] Victor Pan. Structured matrices and polynomials: unified superfast algorithms. Springer Science & Business Media, 2001. Pan [2017] Victor Pan. Fast approximate computations with cauchy matrices and polynomials. Mathematics of Computation, 86(308):2799\u20132826, 2017. Pan [2015] Victor Y Pan. Transformations of matrix structures work again. Linear Algebra and Its Applications, 465:107\u2013138, 2015. Pascanu et al. [2013] Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difficulty of training recurrent neural networks. In International conference on machine learning, pages 1310\u20131318, 2013. Rae et al. [2018] Jack Rae, Chris Dyer, Peter Dayan, and Timothy Lillicrap. Fast parametric learning with activation memorization.",
    "s4-25": "The International Conference on Machine Learning (ICML), 2018. Ramachandran et al. [2017] Prajit Ramachandran, Tom Le Paine, Pooya Khorrami, Mohammad Babaeizadeh, Shiyu Chang, Yang Zhang, Mark A Hasegawa-Johnson, Roy H Campbell, and Thomas S Huang. Fast generation for convolutional autoregressive models.",
    "s4-26": "arXiv preprint arXiv:1704.06001, 2017. Romero et al. [2021] David W Romero, Anna Kuzina, Erik J Bekkers, Jakub M Tomczak, and Mark Hoogendoorn. Ckconv: Continuous kernel convolution for sequential data.",
    "s4-27": "arXiv preprint arXiv:2102.02611, 2021. Romero et al. [2022] David W Romero, Robert-Jan Bruintjes, Jakub M Tomczak, Erik J Bekkers, Mark Hoogendoorn, and Jan C van Gemert. Flexconv: Continuous kernel convolutions with differentiable kernel sizes. In The International Conference on Learning Representations (ICLR), 2022. Rubanova et al. [2019] Yulia Rubanova, Tian Qi Chen, and David K Duvenaud. Latent ordinary differential equations for irregularly-sampled time series. In Advances in Neural Information Processing Systems, pages 5321\u20135331, 2019. Rusch and Mishra [2021] T Konstantin Rusch and Siddhartha Mishra. Unicornn: A recurrent model for learning very long time dependencies.",
    "s4-28": "The International Conference on Machine Learning (ICML), 2021. Salimans et al. [2017] Tim Salimans, Andrej Karpathy, Xi Chen, and Diederik P Kingma. Pixelcnn++: Improving the pixelcnn with discretized logistic mixture likelihood and other modifications.",
    "s4-29": "arXiv preprint arXiv:1701.05517, 2017. Tay et al. [2021] Yi Tay, Mostafa Dehghani, Samira Abnar, Yikang Shen, Dara Bahri, Philip Pham, Jinfeng Rao, Liu Yang, Sebastian Ruder, and Donald Metzler. Long range arena : A benchmark for efficient transformers.",
    "s4-30": "In International Conference on Learning Representations, 2021. URL https://openreview.net/forum?id=qVyeW-grC2k. Tolstikhin et al. [2021] Ilya Tolstikhin, Neil Houlsby, Alexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Thomas Unterthiner, Jessica Yung, Daniel Keysers, Jakob Uszkoreit, Mario Lucic, et al. Mlp-mixer: An all-mlp architecture for vision.",
    "s4-31": "arXiv preprint arXiv:2105.01601, 2021. Trinh et al. [2018] Trieu H Trinh, Andrew M Dai, Minh-Thang Luong, and Quoc V Le. Learning longer-term dependencies in RNNs with auxiliary losses. In The International Conference on Machine Learning (ICML), 2018. Tustin [1947] Arnold Tustin. A method of analysing the behaviour of linear systems in terms of time series. Journal of the Institution of Electrical Engineers-Part IIA: Automatic Regulators and Servo Mechanisms, 94(1):130\u2013142, 1947. Vaswani et al. [2017] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems (NeurIPS), 2017. Voelker et al. [2019] Aaron Voelker, Ivana Kaji\u0107, and Chris Eliasmith. Legendre memory units: Continuous-time representation in recurrent neural networks.",
    "s4-32": "In Advances in Neural Information Processing Systems, pages 15544\u201315553, 2019. Voelker [2019] Aaron Russell Voelker. Dynamical systems in spiking neuromorphic hardware. PhD thesis, University of Waterloo, 2019. Warden [2018] Pete Warden. Speech commands: A dataset for limited-vocabulary speech recognition. ArXiv, abs/1804.03209, 2018. Woodbury [1950] Max A Woodbury. Inverting modified matrices. Memorandum report, 42:106, 1950. Wu et al. [2019] Felix Wu, Angela Fan, Alexei Baevski, Yann N Dauphin, and Michael Auli. Pay less attention with lightweight and dynamic convolutions. In The International Conference on Learning Representations (ICLR), 2019. Zhou et al. [2021] Haoyi Zhou, Shanghang Zhang, Jieqi Peng, Shuai Zhang, Jianxin Li, Hui Xiong, and Wancai Zhang. Informer: Beyond efficient transformer for long sequence time-series forecasting.",
    "s4-33": "In The Thirty-Fifth AAAI Conference on Artificial Intelligence, AAAI 2021, Virtual Conference, volume 35, pages 11106\u201311115. AAAI Press, 2021. Appendix A Discussion\n\nRelated Work. Our work is most closely related to a line of work originally motivated by a particular biologically-inspired SSM, which led to mathematical models for addressing LRDs. Voelker [46], Voelker et al. [45] derived a non-trainable SSM motivated from approximating a neuromorphic spiking model, and Chilkuri and Eliasmith [7] showed that it could be sped up at train time with a convolutional view. Gu et al. [16] extended this special case to a general continuous-time function approximation framework with several more special cases of matrices designed for long-range dependencies. However, instead of using a true SSM, all of these works fixed a choice of and built RNNs around it. Most recently, Gu et al. [18] used the full (1) explicitly as a deep SSM model, exploring new conceptual views of SSMs, as well as allowing to be trained. As mentioned in Section 1, their method used a naive instantiation of SSMs that suffered from an additional factor of in memory and in computation. Beyond this work, our technical contributions (Section 3) on the S4 parameterization and algorithms are applicable to a broader family of SSMs including these investigated in prior works, and our techniques for working with these models may be of independent interest. Implementation. The computational core of S4\u2019s training algorithm is the Cauchy kernel discussed in Sections 3.2, 3.3 and C.3. As described in Section C.3 Proposition 5, there are many algorithms for it with differing computational complexities and sophistication. Our current implementation of S4 actually uses the naive algorithm which is easily parallelized on GPUs and has more easily accessible libraries allowing it to be implemented; we leverage the pykeops library for memory-efficient kernel operations. However, this library is a much more general library that may not be optimized for the Cauchy kernels used here, and we believe that a dedicated CUDA implementation can be more efficient. Additionally, as discussed in this work, there are asymptotically faster and numerically stable algorithms for the Cauchy kernel (Proposition 5). However, these algorithms are currently not implemented for GPUs due to a lack of previous applications that require them. We believe that more efficient implementations of these self-contained computational kernels are possible, and that S4 (and SSMs at large) may have significant room for further improvements in efficiency. Limitations and Future Directions. In this work, we show that S4 can address a wide variety of data effectively. However, it may not necessarily be the most suitable model for all types of data. For example, Fig. 8 still found a gap compared to Transformers for language modeling. An interesting future direction is exploring combinations of S4 with other sequence models to complement their strengths. We are excited about other directions, including continuing to explore the benefits of S4 on audio data (e.g. pre-training or generation settings), and generalizing HiPPO and S4 to higher-dimensional data for image and video applications. Appendix B Numerical Instability of LSSL\n\nThis section proves the claims made in Section 3.1 about prior work. We first derive the explicit diagonalization of the HiPPO matrix, confirming its instability because of exponentially large entries. We then discuss the proposed theoretically fast algorithm from [18] (Theorem 2) and show that it also involves exponentially large terms and thus cannot be implemented. B.1 HiPPO Diagonalization\n\nProof of Lemma 3.2. The HiPPO matrix (2) is equal, up to sign and conjugation by a diagonal matrix, to\n\n\ud835\udc68 \ud835\udc68 \\displaystyle\\bm{A} = [ 1 \u2212 1 2 1 \u2212 3 3 \u2212 1 3 \u2212 5 4 1 \u2212 3 5 \u2212 7 5 \u2212 1 3 \u2212 5 7 \u2212 9 6 1 \u2212 3 5 \u2212 7 9 \u2212 11 7 \u2212 1 3 \u2212 5 7 \u2212 9 11 \u2212 13 8 \u22ee \u22f1 ] absent matrix 1 1 2 1 3 3 1 3 5 4 1 3 5 7 5 1 3 5 7 9 6 1 3 5 7 9 11 7 1 3 5 7 9 11 13 8 \u22ee missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression \u22f1 \\displaystyle=\\begin{bmatrix}1\\\\\n-1&2\\\\\n1&-3&3\\\\\n-1&3&-5&4\\\\\n1&-3&5&-7&5\\\\\n-1&3&-5&7&-9&6\\\\\n1&-3&5&-7&9&-11&7\\\\\n-1&3&-5&7&-9&11&-13&8\\\\\n\\vdots&&&&&&&&\\ddots\\\\\n\\end{bmatrix} \ud835\udc68 n \u200b k subscript \ud835\udc68 \ud835\udc5b \ud835\udc58 \\displaystyle\\bm{A}_{nk} = { ( \u2212 1 ) n \u2212 k \u200b ( 2 \u200b k + 1 ) n > k k + 1 n = k 0 n < k . absent cases superscript 1 \ud835\udc5b \ud835\udc58 2 \ud835\udc58 1 \ud835\udc5b \ud835\udc58 \ud835\udc58 1 \ud835\udc5b \ud835\udc58 0 \ud835\udc5b \ud835\udc58 \\displaystyle=\\begin{cases}(-1)^{n-k}(2k+1)&n>k\\\\\nk+1&n=k\\\\\n0&n<k\\end{cases}. Our goal is to show that this is diagonalized by the matrix\n\n\ud835\udc7d = ( i + j i \u2212 j ) i \u200b j = [ 1 1 1 1 3 1 1 6 5 1 1 10 15 7 1 1 15 35 28 9 1 \u22ee \u22f1 ] , \ud835\udc7d subscript binomial \ud835\udc56 \ud835\udc57 \ud835\udc56 \ud835\udc57 \ud835\udc56 \ud835\udc57 matrix 1 1 1 1 3 1 1 6 5 1 1 10 15 7 1 1 15 35 28 9 1 \u22ee missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression \u22f1 \\displaystyle\\bm{V}=\\binom{i+j}{i-j}_{ij}=\\begin{bmatrix}1\\\\\n1&1\\\\\n1&3&1\\\\\n1&6&5&1\\\\\n1&10&15&7&1\\\\\n1&15&35&28&9&1\\\\\n\\vdots&&&&&&\\ddots\\\\\n\\end{bmatrix},\n\nor in other words that columns of this matrix are eigenvectors of . Concretely, we will show that the -th column of this matrix with elements\n\n\ud835\udc97 i ( j ) = { 0 i < j ( i + j i \u2212 j ) = ( i + j 2 \u200b j ) i \u2265 j subscript superscript \ud835\udc97 \ud835\udc57 \ud835\udc56 cases 0 \ud835\udc56 \ud835\udc57 binomial \ud835\udc56 \ud835\udc57 \ud835\udc56 \ud835\udc57 binomial \ud835\udc56 \ud835\udc57 2 \ud835\udc57 \ud835\udc56 \ud835\udc57 \\displaystyle\\bm{v}^{(j)}_{i}=\\begin{cases}0&i<j\\\\\n\\binom{i+j}{i-j}=\\binom{i+j}{2j}&i\\geq j\\end{cases}\n\nis an eigenvector with eigenvalue . In other words we must show that for all indices ,\n\n( \ud835\udc68 \u200b \ud835\udc97 ( j ) ) k = \u2211 i \ud835\udc68 k \u200b i \u200b \ud835\udc97 i ( j ) = ( j + 1 ) \u200b \ud835\udc97 k ( j ) . subscript \ud835\udc68 superscript \ud835\udc97 \ud835\udc57 \ud835\udc58 subscript \ud835\udc56 subscript \ud835\udc68 \ud835\udc58 \ud835\udc56 subscript superscript \ud835\udc97 \ud835\udc57 \ud835\udc56 \ud835\udc57 1 subscript superscript \ud835\udc97 \ud835\udc57 \ud835\udc58 (\\bm{A}\\bm{v}^{(j)})_{k}=\\sum_{i}\\bm{A}_{ki}\\bm{v}^{(j)}_{i}=(j+1)\\bm{v}^{(j)}_{k}. (7)\n\nIf , then for all inside the sum, either or . In the first case and in the second case , so both sides of equation (7) are equal to . It remains to show the case , which proceeds by induction on . Expanding equation (7) using the formula for yields\n\n( \ud835\udc68 \u200b \ud835\udc97 ) k ( j ) = \u2211 i \ud835\udc68 k \u200b i \u200b \ud835\udc97 i ( j ) = \u2211 i = j k \u2212 1 ( \u2212 1 ) k \u2212 i \u200b ( 2 \u200b i + 1 ) \u200b ( i + j 2 \u200b j ) + ( k + 1 ) \u200b ( k + j 2 \u200b j ) . subscript superscript \ud835\udc68 \ud835\udc97 \ud835\udc57 \ud835\udc58 subscript \ud835\udc56 subscript \ud835\udc68 \ud835\udc58 \ud835\udc56 subscript superscript \ud835\udc97 \ud835\udc57 \ud835\udc56 superscript subscript \ud835\udc56 \ud835\udc57 \ud835\udc58 1 superscript 1 \ud835\udc58 \ud835\udc56 2 \ud835\udc56 1 binomial \ud835\udc56 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle(\\bm{A}\\bm{v})^{(j)}_{k}=\\sum_{i}\\bm{A}_{ki}\\bm{v}^{(j)}_{i}=\\sum_{i=j}^{k-1}(-1)^{k-i}(2i+1)\\binom{i+j}{2j}+(k+1)\\binom{k+j}{2j}. In the base case , the sum disappears and we are left with , as desired. Otherwise, the sum for is the same as the sum for but with sign reversed and a few edge terms. The result follows from applying the inductive hypothesis and algebraic simplification:\n\n( \ud835\udc68 \u200b \ud835\udc97 ) k ( j ) subscript superscript \ud835\udc68 \ud835\udc97 \ud835\udc57 \ud835\udc58 \\displaystyle(\\bm{A}\\bm{v})^{(j)}_{k} = \u2212 ( \ud835\udc68 \u200b \ud835\udc97 ) k \u2212 1 ( j ) \u2212 ( 2 \u200b k \u2212 1 ) \u200b ( k \u2212 1 + j 2 \u200b j ) + k \u200b ( k \u2212 1 + j 2 \u200b j ) + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent subscript superscript \ud835\udc68 \ud835\udc97 \ud835\udc57 \ud835\udc58 1 2 \ud835\udc58 1 binomial \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 binomial \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=-(\\bm{A}\\bm{v})^{(j)}_{k-1}-(2k-1)\\binom{k-1+j}{2j}+k\\binom{k-1+j}{2j}+(k+1)\\binom{k+j}{2j} = \u2212 ( j + 1 ) \u200b ( k \u2212 1 + j 2 \u200b j ) \u2212 ( k \u2212 1 ) \u200b ( k \u2212 1 + j 2 \u200b j ) + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent \ud835\udc57 1 binomial \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=-(j+1)\\binom{k-1+j}{2j}-(k-1)\\binom{k-1+j}{2j}+(k+1)\\binom{k+j}{2j} = \u2212 ( j + k ) \u200b ( k \u2212 1 + j 2 \u200b j ) + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent \ud835\udc57 \ud835\udc58 binomial \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=-(j+k)\\binom{k-1+j}{2j}+(k+1)\\binom{k+j}{2j} = \u2212 ( j + k ) \u200b ( k \u2212 1 + j ) !",
    "s4-34": "( k \u2212 1 \u2212 j ) ! \u200b ( 2 \u200b j ) ! + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent \ud835\udc57 \ud835\udc58 \ud835\udc58 1 \ud835\udc57 \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=-(j+k)\\frac{(k-1+j)!}{(k-1-j)!(2j)!}+(k+1)\\binom{k+j}{2j} = \u2212 ( k + j ) ! ( k \u2212 1 \u2212 j ) ! \u200b ( 2 \u200b j ) ! + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent \ud835\udc58 \ud835\udc57 \ud835\udc58 1 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=-\\frac{(k+j)!}{(k-1-j)!(2j)!}+(k+1)\\binom{k+j}{2j} = \u2212 ( k \u2212 j ) \u200b ( k + j ) ! ( k \u2212 j ) ! \u200b ( 2 \u200b j ) ! + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent \ud835\udc58 \ud835\udc57 \ud835\udc58 \ud835\udc57 \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=-(k-j)\\frac{(k+j)!}{(k-j)!(2j)!}+(k+1)\\binom{k+j}{2j} = ( j \u2212 k ) \u200b ( k + 1 ) \u200b ( k + j 2 \u200b j ) + ( k + 1 ) \u200b ( k + j 2 \u200b j ) absent \ud835\udc57 \ud835\udc58 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \ud835\udc58 1 binomial \ud835\udc58 \ud835\udc57 2 \ud835\udc57 \\displaystyle=(j-k)(k+1)\\binom{k+j}{2j}+(k+1)\\binom{k+j}{2j} = ( j + 1 ) \u200b \ud835\udc97 k ( j ) . absent \ud835\udc57 1 subscript superscript \ud835\udc97 \ud835\udc57 \ud835\udc58 \\displaystyle=(j+1)\\bm{v}^{(j)}_{k}. B.2 Fast but Unstable LSSL Algorithm\n\nInstead of diagonalization, Gu et al. [18, Theorem 2] proposed a sophisticated fast algorithm to compute\n\nK L \u200b ( \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) = ( \ud835\udc6a \u00af \u200b \ud835\udc69 \u00af , \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af , \u2026 , \ud835\udc6a \u00af \u200b \ud835\udc68 \u00af L \u2212 1 \u200b \ud835\udc69 \u00af ) . subscript \ud835\udc3e \ud835\udc3f bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 \u2026 bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc3f 1 bold-\u00af \ud835\udc69 \\displaystyle K_{L}(\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}})=(\\bm{\\overline{C}}\\bm{\\overline{B}},\\bm{\\overline{C}}\\bm{\\overline{A}}\\bm{\\overline{B}},\\dots,\\bm{\\overline{C}}\\bm{\\overline{A}}^{L-1}\\bm{\\overline{B}}). This algorithm runs in operations and space. However, we now show that this algorithm is also numerically unstable. There are several reasons for the instability of this algorithm, but most directly we can pinpoint a particular intermediate quantity that they use. Definition 1. The fast LSSL algorithm computes coefficients of , the characteristic polynomial of , as an intermediate computation. Additionally, it computes the coefficients of its inverse, . We now claim that this quantity is numerically unfeasible. We narrow down to the case when is the identity matrix. Note that this case is actually in some sense the most typical case: when discretizing the continuous-time SSM to discrete-time by a step-size , the discretized transition matrix is brought closer to the identity. For example, with the Euler discretization , we have as the step size . Lemma B.1. When , the fast LSSL algorithm requires computing terms exponentially large in . Proof. The characteristic polynomial of is\n\np \u200b ( x ) = \ud835\uddbd\ud835\uddbe\ud835\uddcd \u200b | \ud835\udc70 \u2212 x \u200b \ud835\udc70 | = ( 1 \u2212 x ) N . \ud835\udc5d \ud835\udc65 \ud835\uddbd\ud835\uddbe\ud835\uddcd \ud835\udc70 \ud835\udc65 \ud835\udc70 superscript 1 \ud835\udc65 \ud835\udc41 \\displaystyle p(x)=\\mathsf{det}\\left|\\bm{I}-x\\bm{I}\\right|=(1-x)^{N}. These coefficients have size up to . The inverse of has even larger coefficients. It can be calculated in closed form by the generalized binomial formula:\n\n( 1 \u2212 x ) \u2212 N = \u2211 k = 0 \u221e ( N + k \u2212 1 k ) \u200b x k . superscript 1 \ud835\udc65 \ud835\udc41 superscript subscript \ud835\udc58 0 binomial \ud835\udc41 \ud835\udc58 1 \ud835\udc58 superscript \ud835\udc65 \ud835\udc58 \\displaystyle(1-x)^{-N}=\\sum_{k=0}^{\\infty}\\binom{N+k-1}{k}x^{k}. Taking this , the largest coefficient is\n\n( N + L \u2212 2 L \u2212 1 ) = ( N + L \u2212 2 N \u2212 1 ) = ( L \u2212 1 ) \u200b ( L \u2212 2 ) \u200b \u2026 \u200b ( L \u2212 N + 1 ) ( N \u2212 1 ) ! . binomial \ud835\udc41 \ud835\udc3f 2 \ud835\udc3f 1 binomial \ud835\udc41 \ud835\udc3f 2 \ud835\udc41 1 \ud835\udc3f 1 \ud835\udc3f 2 \u2026 \ud835\udc3f \ud835\udc41 1 \ud835\udc41 1 \\displaystyle\\binom{N+L-2}{L-1}=\\binom{N+L-2}{N-1}=\\frac{(L-1)(L-2)\\dots(L-N+1)}{(N-1)!}. When this is\n\n( 2 \u200b ( N \u2212 1 ) N \u2212 1 ) \u2248 2 2 \u200b N \u03c0 \u200b N binomial 2 \ud835\udc41 1 \ud835\udc41 1 superscript 2 2 \ud835\udc41 \ud835\udf0b \ud835\udc41 \\displaystyle\\binom{2(N-1)}{N-1}\\approx\\frac{2^{2N}}{\\sqrt{\\pi N}}\n\nalready larger than the coefficients of , and only increases as grows. \u220e\n\nAppendix C S4 Algorithm Details\n\nThis section proves the results of Section 3.3, providing complete details of our efficient algorithms for S4. Sections C.1, C.2 and C.3 prove Theorems 1, 2 and 3 respectively. C.1 NPLR Representations of HiPPO Matrices\n\nWe first prove Theorem 1, showing that all HiPPO matrices for continuous-time memory fall under the S4 normal plus low-rank (NPLR) representation. Proof of Theorem 1. We consider each of the three cases HiPPO-LagT, HiPPO-LegT, and HiPPO-LegS separately. Note that the primary HiPPO matrix defined in this work (equation (2)) is the HiPPO-LegT matrix. HiPPO-LagT. The HiPPO-LagT matrix is simply\n\n\ud835\udc68 n \u200b k subscript \ud835\udc68 \ud835\udc5b \ud835\udc58 \\displaystyle\\bm{A}_{nk} = { 0 n < k \u2212 1 2 n = k \u2212 1 n > k absent cases 0 \ud835\udc5b \ud835\udc58 1 2 \ud835\udc5b \ud835\udc58 1 \ud835\udc5b \ud835\udc58 \\displaystyle=\\begin{cases}0&n<k\\\\\n-\\frac{1}{2}&n=k\\\\\n-1&n>k\\\\\n\\end{cases} \ud835\udc68 \ud835\udc68 \\displaystyle\\bm{A} = \u2212 [ 1 2 \u2026 1 1 2 1 1 1 2 1 1 1 1 2 \u22ee \u22f1 ] . absent matrix 1 2 missing-subexpression missing-subexpression missing-subexpression \u2026 1 1 2 missing-subexpression missing-subexpression 1 1 1 2 missing-subexpression 1 1 1 1 2 \u22ee missing-subexpression missing-subexpression missing-subexpression \u22f1 \\displaystyle=-\\begin{bmatrix}\\frac{1}{2}&&&&\\dots\\\\\n1&\\frac{1}{2}&&\\\\\n1&1&\\frac{1}{2}&\\\\\n1&1&1&\\frac{1}{2}\\\\\n\\vdots&&&&\\ddots\\\\\n\\end{bmatrix}. Adding the matrix of all , which is rank 1, yields\n\n\u2212 [ \u2212 1 2 \u2212 1 2 \u2212 1 2 1 2 \u2212 1 2 \u2212 1 2 1 2 1 2 \u2212 1 2 1 2 1 2 1 2 ] . matrix missing-subexpression 1 2 1 2 1 2 1 2 missing-subexpression 1 2 1 2 1 2 1 2 missing-subexpression 1 2 1 2 1 2 1 2 missing-subexpression \\displaystyle-\\begin{bmatrix}&-\\frac{1}{2}&-\\frac{1}{2}&-\\frac{1}{2}\\\\\n\\frac{1}{2}&&-\\frac{1}{2}&-\\frac{1}{2}\\\\\n\\frac{1}{2}&\\frac{1}{2}&&-\\frac{1}{2}\\\\\n\\frac{1}{2}&\\frac{1}{2}&\\frac{1}{2}&\\\\\n\\end{bmatrix}. This matrix is now skew-symmetric. Skew-symmetric matrices are a particular case of normal matrices with pure-imaginary eigenvalues. Gu et al. [16] also consider a case of HiPPO corresponding to the generalized Laguerre polynomials that generalizes the above HiPPO-LagT case. In this case, the matrix (up to conjugation by a diagonal matrix) ends up being close to the above matrix, but with a different element on the diagonal. After adding the rank-1 correction, it becomes the above skew-symmetric matrix plus a multiple of the identity. Thus after diagonalization by the same matrix as in the LagT case, it is still reduced to diagonal plus low-rank (DPLR) form, where the diagonal is now pure imaginary plus a real constant.",
    "s4-35": "HiPPO-LegS. We restate the formula from equation (2) for convenience. \ud835\udc68 n \u200b k = \u2212 { ( 2 \u200b n + 1 ) 1 / 2 \u200b ( 2 \u200b k + 1 ) 1 / 2 if \u200b n > k n + 1 if \u200b n = k 0 if \u200b n < k . subscript \ud835\udc68 \ud835\udc5b \ud835\udc58 cases superscript 2 \ud835\udc5b 1 1 2 superscript 2 \ud835\udc58 1 1 2 if \ud835\udc5b \ud835\udc58 \ud835\udc5b 1 if \ud835\udc5b \ud835\udc58 0 if \ud835\udc5b \ud835\udc58 \\displaystyle\\bm{A}_{nk}=-\\begin{cases}(2n+1)^{1/2}(2k+1)^{1/2}&\\mbox{if }n>k\\\\\nn+1&\\mbox{if }n=k\\\\\n0&\\mbox{if }n<k\\end{cases}. Adding to the whole matrix gives\n\n\u2212 { 1 2 \u200b ( 2 \u200b n + 1 ) 1 / 2 \u200b ( 2 \u200b k + 1 ) 1 / 2 if \u200b n > k 1 2 if \u200b n = k \u2212 1 2 \u200b ( 2 \u200b n + 1 ) 1 / 2 \u200b ( 2 \u200b k + 1 ) 1 / 2 if \u200b n < k cases 1 2 superscript 2 \ud835\udc5b 1 1 2 superscript 2 \ud835\udc58 1 1 2 if \ud835\udc5b \ud835\udc58 1 2 if \ud835\udc5b \ud835\udc58 1 2 superscript 2 \ud835\udc5b 1 1 2 superscript 2 \ud835\udc58 1 1 2 if \ud835\udc5b \ud835\udc58 \\displaystyle-\\begin{cases}\\frac{1}{2}(2n+1)^{1/2}(2k+1)^{1/2}&\\mbox{if }n>k\\\\\n\\frac{1}{2}&\\mbox{if }n=k\\\\\n-\\frac{1}{2}(2n+1)^{1/2}(2k+1)^{1/2}&\\mbox{if }n<k\\\\\n\\end{cases}\n\nNote that this matrix is not skew-symmetric, but is where is a skew-symmetric matrix.",
    "s4-36": "This is diagonalizable by the same unitary matrix that diagonalizes . HiPPO-LegT. Up to the diagonal scaling, the LegT matrix is\n\n\ud835\udc68 = \u2212 [ 1 \u2212 1 1 \u2212 1 \u2026 1 1 \u2212 1 1 1 1 1 \u2212 1 1 1 1 1 \u22ee \u22f1 ] . \ud835\udc68 matrix 1 1 1 1 \u2026 1 1 1 1 1 1 1 1 1 1 1 1 \u22ee missing-subexpression missing-subexpression missing-subexpression \u22f1 \\displaystyle\\bm{A}=-\\begin{bmatrix}1&-1&1&-1&\\dots\\\\\n1&1&-1&1\\\\\n1&1&1&-1\\\\\n1&1&1&1\\\\\n\\vdots&&&&\\ddots\\end{bmatrix}. By adding to this matrix and then the matrix\n\n[ 2 2 2 2 ] matrix missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression 2 missing-subexpression 2 missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression 2 missing-subexpression 2 missing-subexpression missing-subexpression \\displaystyle\\begin{bmatrix}&&&&\\\\\n2&&2&&\\\\\n&&&&\\\\\n2&&2&&\\\\\n\\end{bmatrix}\n\nthe matrix becomes\n\n[ \u2212 2 \u2212 2 2 \u2212 2 2 2 ] matrix missing-subexpression 2 missing-subexpression 2 missing-subexpression 2 missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression missing-subexpression 2 missing-subexpression 2 missing-subexpression 2 missing-subexpression missing-subexpression \\displaystyle\\begin{bmatrix}&-2&&-2&\\\\\n2&&&&\\\\\n&&&-2&\\\\\n2&&2&&\\\\\n\\end{bmatrix}\n\nwhich is skew-symmetric. In fact, this matrix is the inverse of the Chebyshev Jacobi. An alternative way to see this is as follows. The LegT matrix is the inverse of the matrix\n\n[ \u2212 1 1 0 \u2212 1 1 \u2212 1 1 \u2212 1 \u2212 1 ] matrix 1 1 missing-subexpression 0 1 missing-subexpression 1 missing-subexpression missing-subexpression 1 missing-subexpression 1 missing-subexpression missing-subexpression 1 1 \\displaystyle\\begin{bmatrix}-1&1&&0\\\\\n-1&&1&\\\\\n&-1&&1\\\\\n&&-1&-1\\\\\n\\end{bmatrix}\n\nThis can obviously be converted to a skew-symmetric matrix by adding a rank 2 term. The inverses of these matrices are also rank-2 differences from each other by the Woodbury identity. A final form is\n\n[ \u2212 1 1 \u2212 1 1 \u2212 1 \u2212 1 1 \u2212 1 \u2212 1 \u2212 1 \u2212 1 1 \u2212 1 \u2212 1 \u2212 1 \u2212 1 ] + [ 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 ] = [ 0 1 0 1 \u2212 1 0 1 0 0 \u2212 1 0 1 \u2212 1 0 \u2212 1 0 ] matrix 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 matrix 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 matrix 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 \\displaystyle\\begin{bmatrix}-1&1&-1&1\\\\\n-1&-1&1&-1\\\\\n-1&-1&-1&1\\\\\n-1&-1&-1&-1\\\\\n\\end{bmatrix}+\\begin{bmatrix}1&0&1&0\\\\\n0&1&0&1\\\\\n1&0&1&0\\\\\n0&1&0&1\\\\\n\\end{bmatrix}=\\begin{bmatrix}0&1&0&1\\\\\n-1&0&1&0\\\\\n0&-1&0&1\\\\\n-1&0&-1&0\\\\\n\\end{bmatrix}\n\nThis has the advantage that the rank-2 correction is symmetric (like the others), but the normal skew-symmetric matrix is now -quasiseparable instead of -quasiseparable. C.2 Computing the S4 Recurrent View\n\nWe prove Theorem 2 showing the efficiency of the S4 parameterization for computing one step of the recurrent representation (Section 2.3). Recall that without loss of generality, we can assume that the state matrix is diagonal plus low-rank (DPLR), potentially over . Our goal in this section is to explicitly write out a closed form for the discretized matrix . Recall from equation (3) that\n\n\ud835\udc68 \u00af bold-\u00af \ud835\udc68 \\displaystyle\\bm{\\overline{A}} = ( \ud835\udc70 \u2212 \u0394 / 2 \u22c5 \ud835\udc68 ) \u2212 1 \u200b ( \ud835\udc70 + \u0394 / 2 \u22c5 \ud835\udc68 ) absent superscript \ud835\udc70 \u22c5 \u0394 2 \ud835\udc68 1 \ud835\udc70 \u22c5 \u0394 2 \ud835\udc68 \\displaystyle=(\\bm{I}-\\Delta/2\\cdot\\bm{A})^{-1}(\\bm{I}+\\Delta/2\\cdot\\bm{A}) \ud835\udc69 \u00af bold-\u00af \ud835\udc69 \\displaystyle\\bm{\\overline{B}} = ( \ud835\udc70 \u2212 \u0394 / 2 \u22c5 \ud835\udc68 ) \u2212 1 \u200b \u0394 \u200b \ud835\udc69 . absent superscript \ud835\udc70 \u22c5 \u0394 2 \ud835\udc68 1 \u0394 \ud835\udc69 \\displaystyle=(\\bm{I}-\\Delta/2\\cdot\\bm{A})^{-1}\\Delta\\bm{B}. We first simplify both terms in the definition of independently. Forward discretization. The first term is essentially the Euler discretization motivated in Section 2.3. \ud835\udc70 + \u0394 2 \u200b \ud835\udc68 \ud835\udc70 \u0394 2 \ud835\udc68 \\displaystyle\\bm{I}+\\frac{\\Delta}{2}\\bm{A} = \ud835\udc70 + \u0394 2 \u200b ( \ud835\udeb2 \u2212 \ud835\udc77 \u200b \ud835\udc78 \u2217 ) absent \ud835\udc70 \u0394 2 \ud835\udeb2 \ud835\udc77 superscript \ud835\udc78 \\displaystyle=\\bm{I}+\\frac{\\Delta}{2}(\\bm{\\Lambda}-\\bm{P}\\bm{Q}^{*}) = \u0394 2 \u200b [ 2 \u0394 \u200b \ud835\udc70 + ( \ud835\udeb2 \u2212 \ud835\udc77 \u200b \ud835\udc78 \u2217 ) ] absent \u0394 2 delimited-[] 2 \u0394 \ud835\udc70 \ud835\udeb2 \ud835\udc77 superscript \ud835\udc78 \\displaystyle=\\frac{\\Delta}{2}\\left[\\frac{2}{\\Delta}\\bm{I}+(\\bm{\\Lambda}-\\bm{P}\\bm{Q}^{*})\\right] = \u0394 2 \u200b \ud835\udc68 \ud835\udfce absent \u0394 2 subscript \ud835\udc68 0 \\displaystyle=\\frac{\\Delta}{2}\\bm{A_{0}}\n\nwhere is defined as the term in the final brackets. Backward discretization. The second term is known as the Backward Euler\u2019s method. Although this inverse term is normally difficult to deal with, in the DPLR case we can simplify it using Woodbury\u2019s Identity (Proposition 4). ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 1 superscript \ud835\udc70 \u0394 2 \ud835\udc68 1 \\displaystyle\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)^{-1} = ( \ud835\udc70 \u2212 \u0394 2 \u200b ( \ud835\udeb2 \u2212 \ud835\udc77 \u200b \ud835\udc78 \u2217 ) ) \u2212 1 absent superscript \ud835\udc70 \u0394 2 \ud835\udeb2 \ud835\udc77 superscript \ud835\udc78 1 \\displaystyle=\\left(\\bm{I}-\\frac{\\Delta}{2}(\\bm{\\Lambda}-\\bm{P}\\bm{Q}^{*})\\right)^{-1} = 2 \u0394 \u200b [ 2 \u0394 \u2212 \ud835\udeb2 + \ud835\udc77 \u200b \ud835\udc78 \u2217 ] \u2212 1 absent 2 \u0394 superscript delimited-[] 2 \u0394 \ud835\udeb2 \ud835\udc77 superscript \ud835\udc78 1 \\displaystyle=\\frac{2}{\\Delta}\\left[\\frac{2}{\\Delta}-\\bm{\\Lambda}+\\bm{P}\\bm{Q}^{*}\\right]^{-1} = 2 \u0394 \u200b [ \ud835\udc6b \u2212 \ud835\udc6b \u200b \ud835\udc77 \u200b ( \ud835\udc70 + \ud835\udc78 \u2217 \u200b \ud835\udc6b \u200b \ud835\udc77 ) \u2212 1 \u200b \ud835\udc78 \u2217 \u200b \ud835\udc6b ] absent 2 \u0394 delimited-[] \ud835\udc6b \ud835\udc6b \ud835\udc77 superscript \ud835\udc70 superscript \ud835\udc78 \ud835\udc6b \ud835\udc77 1 superscript \ud835\udc78 \ud835\udc6b \\displaystyle=\\frac{2}{\\Delta}\\left[\\bm{D}-\\bm{D}\\bm{P}\\left(\\bm{I}+\\bm{Q}^{*}\\bm{D}\\bm{P}\\right)^{-1}\\bm{Q}^{*}\\bm{D}\\right] = 2 \u0394 \u200b \ud835\udc68 \ud835\udfcf absent 2 \u0394 subscript \ud835\udc68 1 \\displaystyle=\\frac{2}{\\Delta}\\bm{A_{1}}\n\nwhere and is defined as the term in the final brackets. Note that is actually a scalar in the case when the low-rank term has rank . S4 Recurrence. Finally, the full bilinear discretization can be rewritten in terms of these matrices as\n\n\ud835\udc68 \u00af bold-\u00af \ud835\udc68 \\displaystyle\\bm{\\overline{A}} = \ud835\udc68 \ud835\udfcf \u200b \ud835\udc68 \ud835\udfce absent subscript \ud835\udc68 1 subscript \ud835\udc68 0 \\displaystyle=\\bm{A_{1}}\\bm{A_{0}} \ud835\udc69 \u00af bold-\u00af \ud835\udc69 \\displaystyle\\bm{\\overline{B}} = 2 \u0394 \u200b \ud835\udc68 \ud835\udfcf \u200b \u0394 \u200b \ud835\udc69 = 2 \u200b \ud835\udc68 \ud835\udfcf \u200b \ud835\udc69 . absent 2 \u0394 subscript \ud835\udc68 1 \u0394 \ud835\udc69 2 subscript \ud835\udc68 1 \ud835\udc69 \\displaystyle=\\frac{2}{\\Delta}\\bm{A_{1}}\\Delta\\bm{B}=2\\bm{A_{1}}\\bm{B}. The discrete-time SSM (3) becomes\n\nx k subscript \ud835\udc65 \ud835\udc58 \\displaystyle x_{k} = \ud835\udc68 \u00af \u200b x k \u2212 1 + \ud835\udc69 \u00af \u200b u k absent bold-\u00af \ud835\udc68 subscript \ud835\udc65 \ud835\udc58 1 bold-\u00af \ud835\udc69 subscript \ud835\udc62 \ud835\udc58 \\displaystyle=\\bm{\\overline{A}}x_{k-1}+\\bm{\\overline{B}}u_{k} = \ud835\udc68 \ud835\udfcf \u200b \ud835\udc68 \ud835\udfce \u200b x k \u2212 1 + 2 \u200b \ud835\udc68 \ud835\udfcf \u200b \ud835\udc69 \u200b u k absent subscript \ud835\udc68 1 subscript \ud835\udc68 0 subscript \ud835\udc65 \ud835\udc58 1 2 subscript \ud835\udc68 1 \ud835\udc69 subscript \ud835\udc62 \ud835\udc58 \\displaystyle=\\bm{A_{1}}\\bm{A_{0}}x_{k-1}+2\\bm{A_{1}}\\bm{B}u_{k} y k subscript \ud835\udc66 \ud835\udc58 \\displaystyle y_{k} = \ud835\udc6a \u200b x k . absent \ud835\udc6a subscript \ud835\udc65 \ud835\udc58 \\displaystyle=\\bm{C}x_{k}. Note that are accessed only through matrix-vector multiplications. Since they are both DPLR, they have matrix-vector multiplication, showing Theorem 2. C.3 Computing the Convolutional View\n\nThe most involved part of using SSMs efficiently is computing . This algorithm was sketched in Section 3.2 and is the main motivation for the S4 parameterization. In this section, we define the necessary intermediate quantities and prove the main technical result. The algorithm for Theorem 3 falls in roughly three stages, leading to Algorithm 1. Assuming has been conjugated into diagonal plus low-rank form, we successively simplify the problem of computing by applying the techniques outlined in Section 3.2.",
    "s4-37": "Remark C.1. We note that for the remainder of this section, we transpose to be a column vector of shape or instead of matrix or row vector as in (1). In other words the SSM is\n\nx \u2032 \u200b ( t ) superscript \ud835\udc65 \u2032 \ud835\udc61 \\displaystyle x^{\\prime}(t) = \ud835\udc68 \u200b x \u200b ( t ) + \ud835\udc69 \u200b u \u200b ( t ) absent \ud835\udc68 \ud835\udc65 \ud835\udc61 \ud835\udc69 \ud835\udc62 \ud835\udc61 \\displaystyle=\\bm{A}x(t)+\\bm{B}u(t) (8) y \u200b ( t ) \ud835\udc66 \ud835\udc61 \\displaystyle y(t) = \ud835\udc6a \u2217 \u200b x \u200b ( t ) + \ud835\udc6b \u200b u \u200b ( t ) . absent superscript \ud835\udc6a \ud835\udc65 \ud835\udc61 \ud835\udc6b \ud835\udc62 \ud835\udc61 \\displaystyle=\\bm{C}^{*}x(t)+\\bm{D}u(t). This convention is made so that has the same shape as and simplifies the implementation of S4. Reduction 0: Diagonalization\n\nBy Lemma 3.1, we can switch the representation by conjugating with any unitary matrix. For the remainder of this section, we can assume that is (complex) diagonal plus low-rank (DPLR). Note that unlike diagonal matrices, a DPLR matrix does not lend itself to efficient computation of . The reason is that computes terms which involve powers of the matrix . These are trivially computable when is diagonal, but is no longer possible for even simple modifications to diagonal matrices such as DPLR. Reduction 1: SSM Generating Function\n\nTo address the problem of computing powers of , we introduce another technique. Instead of computing the SSM convolution filter directly, we introduce a generating function on its coefficients and compute evaluations of it. Definition 2 (SSM Generating Function). We define the following quantities:\n\n\u2022\n\nThe SSM convolution function is and the (truncated) SSM filter of length\n\n\ud835\udca6 L \u200b ( \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) = ( \ud835\udc6a \u00af \u2217 \u200b \ud835\udc69 \u00af , \ud835\udc6a \u00af \u2217 \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af , \u2026 , \ud835\udc6a \u00af \u2217 \u200b \ud835\udc68 \u00af L \u2212 1 \u200b \ud835\udc69 \u00af ) \u2208 \u211d L subscript \ud835\udca6 \ud835\udc3f bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 superscript bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 \u2026 superscript bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc3f 1 bold-\u00af \ud835\udc69 superscript \u211d \ud835\udc3f \\mathcal{K}_{L}(\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}})=(\\bm{\\overline{C}}^{*}\\bm{\\overline{B}},\\bm{\\overline{C}}^{*}\\bm{\\overline{A}}\\bm{\\overline{B}},\\dots,\\bm{\\overline{C}}^{*}\\bm{\\overline{A}}^{L-1}\\bm{\\overline{B}})\\in\\mathbbm{R}^{L} (9)\n\n\u2022\n\nThe SSM generating function at node is\n\n\ud835\udca6 ^ \u200b ( z ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) \u2208 \u2102 := \u2211 i = 0 \u221e \ud835\udc6a \u00af \u2217 \u200b \ud835\udc68 \u00af i \u200b \ud835\udc69 \u00af \u200b z i = \ud835\udc6a \u00af \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b z ) \u2212 1 \u200b \ud835\udc69 \u00af ^ \ud835\udca6 \ud835\udc67 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \u2102 assign superscript subscript \ud835\udc56 0 superscript bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc56 bold-\u00af \ud835\udc69 superscript \ud835\udc67 \ud835\udc56 superscript bold-\u00af \ud835\udc6a superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\hat{\\mathcal{K}}(z;\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}})\\in\\mathbbm{C}:=\\sum_{i=0}^{\\infty}\\bm{\\overline{C}}^{*}\\bm{\\overline{A}}^{i}\\bm{\\overline{B}}z^{i}=\\bm{\\overline{C}}^{*}(\\bm{I}-\\bm{\\overline{A}}z)^{-1}\\bm{\\overline{B}} (10)\n\nand the truncated SSM generating function at node is\n\n\ud835\udca6 ^ L \u200b ( z ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) \u2217 \u2208 \u2102 := \u2211 i = 0 L \u2212 1 \ud835\udc6a \u00af \u2217 \u200b \ud835\udc68 \u00af i \u200b \ud835\udc69 \u00af \u200b z i = \ud835\udc6a \u00af \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af L \u200b z L ) \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b z ) \u2212 1 \u200b \ud835\udc69 \u00af subscript ^ \ud835\udca6 \ud835\udc3f superscript \ud835\udc67 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \u2102 assign superscript subscript \ud835\udc56 0 \ud835\udc3f 1 superscript bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc56 bold-\u00af \ud835\udc69 superscript \ud835\udc67 \ud835\udc56 superscript bold-\u00af \ud835\udc6a \ud835\udc70 superscript bold-\u00af \ud835\udc68 \ud835\udc3f superscript \ud835\udc67 \ud835\udc3f superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\hat{\\mathcal{K}}_{L}(z;\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}})^{*}\\in\\mathbbm{C}:=\\sum_{i=0}^{L-1}\\bm{\\overline{C}}^{*}\\bm{\\overline{A}}^{i}\\bm{\\overline{B}}z^{i}=\\bm{\\overline{C}}^{*}(\\bm{I}-\\bm{\\overline{A}}^{L}z^{L})(\\bm{I}-\\bm{\\overline{A}}z)^{-1}\\bm{\\overline{B}} (11)\n\n\u2022\n\nThe truncated SSM generating function at nodes is\n\n\ud835\udca6 ^ L \u200b ( \u03a9 ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) \u2208 \u2102 M := ( \ud835\udca6 ^ L \u200b ( \u03c9 k ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) ) k \u2208 [ M ] subscript ^ \ud835\udca6 \ud835\udc3f \u03a9 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a superscript \u2102 \ud835\udc40 assign subscript subscript ^ \ud835\udca6 \ud835\udc3f subscript \ud835\udf14 \ud835\udc58 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \ud835\udc58 delimited-[] \ud835\udc40 \\hat{\\mathcal{K}}_{L}(\\Omega;\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}})\\in\\mathbbm{C}^{M}:=\\left(\\hat{\\mathcal{K}}_{L}(\\omega_{k};\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}})\\right)_{k\\in[M]} (12)\n\nIntuitively, the generating function essentially converts the SSM convolution filter from the time domain to frequency domain. Importantly, it preserves the same information, and the desired SSM convolution filter can be recovered from evaluations of its generating function. Lemma C.2. The SSM function can be computed from the SSM generating function at the roots of unity stably in operations. Proof. For convenience define\n\n\ud835\udc72 \u00af bold-\u00af \ud835\udc72 \\displaystyle\\bm{\\overline{K}} = \ud835\udca6 L \u200b ( \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) absent subscript \ud835\udca6 \ud835\udc3f bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \\displaystyle=\\mathcal{K}_{L}(\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}}) \ud835\udc72 ^ bold-^ \ud835\udc72 \\displaystyle\\bm{\\hat{K}} = \ud835\udca6 ^ L \u200b ( \u03a9 ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) absent subscript ^ \ud835\udca6 \ud835\udc3f \u03a9 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \\displaystyle=\\hat{\\mathcal{K}}_{L}(\\Omega;\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}}) \ud835\udc72 ^ \u200b ( z ) bold-^ \ud835\udc72 \ud835\udc67 \\displaystyle\\bm{\\hat{K}}(z) = \ud835\udca6 ^ L \u200b ( z ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) . absent subscript ^ \ud835\udca6 \ud835\udc3f \ud835\udc67 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \\displaystyle=\\hat{\\mathcal{K}}_{L}(z;\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}}). Note that\n\n\ud835\udc72 ^ j = \u2211 k = 0 L \u2212 1 \ud835\udc72 \u00af k \u200b exp \u2061 ( \u2212 2 \u200b \u03c0 \u200b i \u200b j \u200b k L ) . subscript bold-^ \ud835\udc72 \ud835\udc57 superscript subscript \ud835\udc58 0 \ud835\udc3f 1 subscript bold-\u00af \ud835\udc72 \ud835\udc58 2 \ud835\udf0b \ud835\udc56 \ud835\udc57 \ud835\udc58 \ud835\udc3f \\displaystyle\\bm{\\hat{K}}_{j}=\\sum_{k=0}^{L-1}\\bm{\\overline{K}}_{k}\\exp\\left(-2\\pi i\\frac{jk}{L}\\right). Note that this is exactly the same as the Discrete Fourier Transform (DFT):\n\n\ud835\udc72 ^ = \u2131 L \u200b \ud835\udc72 . bold-^ \ud835\udc72 subscript \u2131 \ud835\udc3f \ud835\udc72 \\displaystyle\\bm{\\hat{K}}=\\mathcal{F}_{L}\\bm{K}. Therefore can be recovered from with a single inverse DFT, which requires operations with the Fast Fourier Transform (FFT) algorithm. \u220e\n\nReduction 2: Woodbury Correction\n\nThe primary motivation of Definition 2 is that it turns powers of into a single inverse of (equation (10)). While DPLR matrices cannot be powered efficiently due to the low-rank term, they can be inverted efficiently by the well-known Woodbury identity. Proposition 4 (Binomial Inverse Theorem or Woodbury matrix identity [48, 15]). Over a commutative ring , let and . Suppose and are invertible. Then is invertible and\n\n( \ud835\udc68 + \ud835\udc7c \u200b \ud835\udc7d \u2217 ) \u2212 1 = \ud835\udc68 \u2212 1 \u2212 \ud835\udc68 \u2212 1 \u200b \ud835\udc7c \u200b ( \ud835\udc70 p + \ud835\udc7d \u2217 \u200b \ud835\udc68 \u2212 1 \u200b \ud835\udc7c ) \u2212 1 \u200b \ud835\udc7d \u2217 \u200b \ud835\udc68 \u2212 1 superscript \ud835\udc68 \ud835\udc7c superscript \ud835\udc7d 1 superscript \ud835\udc68 1 superscript \ud835\udc68 1 \ud835\udc7c superscript subscript \ud835\udc70 \ud835\udc5d superscript \ud835\udc7d superscript \ud835\udc68 1 \ud835\udc7c 1 superscript \ud835\udc7d superscript \ud835\udc68 1 \\displaystyle(\\bm{A}+\\bm{U}\\bm{V}^{*})^{-1}=\\bm{A}^{-1}-\\bm{A}^{-1}\\bm{U}(\\bm{I}_{p}+\\bm{V}^{*}\\bm{A}^{-1}\\bm{U})^{-1}\\bm{V}^{*}\\bm{A}^{-1}\n\nWith this identity, we can convert the SSM generating function on a DPLR matrix into one on just its diagonal component.",
    "s4-38": "Lemma C.3. Let be a diagonal plus low-rank representation. Then for any root of unity , the truncated generating function satisfies\n\n\ud835\udc72 ^ \u200b ( z ) bold-^ \ud835\udc72 \ud835\udc67 \\displaystyle\\bm{\\hat{K}}(z) = 2 1 + z \u200b [ \ud835\udc6a ~ \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc69 \u2212 \ud835\udc6a ~ \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc77 \u200b ( 1 + \ud835\udc78 \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc77 ) \u2212 1 \u200b \ud835\udc78 \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc69 ] absent 2 1 \ud835\udc67 delimited-[] superscript bold-~ \ud835\udc6a \ud835\udc79 \ud835\udc67 \ud835\udc69 superscript bold-~ \ud835\udc6a \ud835\udc79 \ud835\udc67 \ud835\udc77 superscript 1 superscript \ud835\udc78 \ud835\udc79 \ud835\udc67 \ud835\udc77 1 superscript \ud835\udc78 \ud835\udc79 \ud835\udc67 \ud835\udc69 \\displaystyle=\\frac{2}{1+z}\\left[\\bm{\\tilde{C}}^{*}\\bm{R}(z)\\bm{B}-\\bm{\\tilde{C}}^{*}\\bm{R}(z)\\bm{P}\\left(1+\\bm{Q}^{*}\\bm{R}(z)\\bm{P}\\right)^{-1}\\bm{Q}^{*}\\bm{R}(z)\\bm{B}\\right] \ud835\udc6a ~ bold-~ \ud835\udc6a \\displaystyle\\bm{\\tilde{C}} = ( \ud835\udc70 \u2212 \ud835\udc68 \u00af L ) \u2217 \u200b \ud835\udc6a absent superscript \ud835\udc70 superscript bold-\u00af \ud835\udc68 \ud835\udc3f \ud835\udc6a \\displaystyle=(\\bm{I}-\\bm{\\overline{A}}^{L})^{*}\\bm{C} \ud835\udc79 \u200b ( z ; \ud835\udeb2 ) \ud835\udc79 \ud835\udc67 \ud835\udeb2 \\displaystyle\\bm{R}(z;\\bm{\\Lambda}) = ( 2 \u0394 \u200b 1 \u2212 z 1 + z \u2212 \ud835\udeb2 ) \u2212 1 . absent superscript 2 \u0394 1 \ud835\udc67 1 \ud835\udc67 \ud835\udeb2 1 \\displaystyle=\\left(\\frac{2}{\\Delta}\\frac{1-z}{1+z}-\\bm{\\Lambda}\\right)^{-1}. Proof. Directly expanding Definition 2 yields\n\n\ud835\udca6 L \u200b ( z ; \ud835\udc68 \u00af , \ud835\udc69 \u00af , \ud835\udc6a \u00af ) subscript \ud835\udca6 \ud835\udc3f \ud835\udc67 bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 bold-\u00af \ud835\udc6a \\displaystyle\\mathcal{K}_{L}(z;\\bm{\\overline{A}},\\bm{\\overline{B}},\\bm{\\overline{C}}) = \ud835\udc6a \u00af \u2217 \u200b \ud835\udc69 \u00af + \ud835\udc6a \u00af \u2217 \u200b \ud835\udc68 \u00af \u200b \ud835\udc69 \u00af \u200b z + \u22ef + \ud835\udc6a \u00af \u2217 \u200b \ud835\udc68 \u00af L \u2212 1 \u200b \ud835\udc69 \u00af \u200b z L \u2212 1 absent superscript bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc69 superscript bold-\u00af \ud835\udc6a bold-\u00af \ud835\udc68 bold-\u00af \ud835\udc69 \ud835\udc67 \u22ef superscript bold-\u00af \ud835\udc6a superscript bold-\u00af \ud835\udc68 \ud835\udc3f 1 bold-\u00af \ud835\udc69 superscript \ud835\udc67 \ud835\udc3f 1 \\displaystyle=\\bm{\\overline{C}}^{*}\\bm{\\overline{B}}+\\bm{\\overline{C}}^{*}\\bm{\\overline{A}}\\bm{\\overline{B}}z+\\dots+\\bm{\\overline{C}}^{*}\\bm{\\overline{A}}^{L-1}\\bm{\\overline{B}}z^{L-1} = \ud835\udc6a \u00af \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af L ) \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b z ) \u2212 1 \u200b \ud835\udc69 \u00af absent superscript bold-\u00af \ud835\udc6a \ud835\udc70 superscript bold-\u00af \ud835\udc68 \ud835\udc3f superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\displaystyle=\\bm{\\overline{C}}^{*}\\left(\\bm{I}-\\bm{\\overline{A}}^{L}\\right)\\left(\\bm{I}-\\bm{\\overline{A}}z\\right)^{-1}\\bm{\\overline{B}} = \ud835\udc6a ~ \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b z ) \u2212 1 \u200b \ud835\udc69 \u00af absent superscript bold-~ \ud835\udc6a superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\displaystyle=\\bm{\\tilde{C}}^{*}\\left(\\bm{I}-\\bm{\\overline{A}}z\\right)^{-1}\\bm{\\overline{B}}\n\nwhere . We can now explicitly expand the discretized SSM matrices and back in terms of the original SSM parameters and . Lemma C.4 provides an explicit formula, which allows further simplifying\n\n\ud835\udc6a ~ \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b z ) \u2212 1 \u200b \ud835\udc69 \u00af superscript bold-~ \ud835\udc6a superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\displaystyle\\bm{\\tilde{C}}^{*}\\left(\\bm{I}-\\bm{\\overline{A}}z\\right)^{-1}\\bm{\\overline{B}} = 2 1 + z \u200b \ud835\udc6a ~ \u2217 \u200b ( 2 \u0394 \u200b 1 \u2212 z 1 + z \u2212 \ud835\udc68 ) \u2212 1 \u200b \ud835\udc69 absent 2 1 \ud835\udc67 superscript bold-~ \ud835\udc6a superscript 2 \u0394 1 \ud835\udc67 1 \ud835\udc67 \ud835\udc68 1 \ud835\udc69 \\displaystyle=\\frac{2}{1+z}\\bm{\\tilde{C}}^{*}\\left(\\frac{2}{\\Delta}\\frac{1-z}{1+z}-\\bm{A}\\right)^{-1}\\bm{B} = 2 1 + z \u200b \ud835\udc6a ~ \u2217 \u200b ( 2 \u0394 \u200b 1 \u2212 z 1 + z \u2212 \ud835\udeb2 + \ud835\udc77 \u200b \ud835\udc78 \u2217 ) \u2212 1 \u200b \ud835\udc69 absent 2 1 \ud835\udc67 superscript bold-~ \ud835\udc6a superscript 2 \u0394 1 \ud835\udc67 1 \ud835\udc67 \ud835\udeb2 \ud835\udc77 superscript \ud835\udc78 1 \ud835\udc69 \\displaystyle=\\frac{2}{1+z}\\bm{\\tilde{C}}^{*}\\left(\\frac{2}{\\Delta}\\frac{1-z}{1+z}-\\bm{\\Lambda}+\\bm{P}\\bm{Q}^{*}\\right)^{-1}\\bm{B} = 2 1 + z \u200b [ \ud835\udc6a ~ \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc69 \u2212 \ud835\udc6a ~ \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc77 \u200b ( 1 + \ud835\udc78 \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc77 ) \u2212 1 \u200b \ud835\udc78 \u2217 \u200b \ud835\udc79 \u200b ( z ) \u200b \ud835\udc69 ] . absent 2 1 \ud835\udc67 delimited-[] superscript bold-~ \ud835\udc6a \ud835\udc79 \ud835\udc67 \ud835\udc69 superscript bold-~ \ud835\udc6a \ud835\udc79 \ud835\udc67 \ud835\udc77 superscript 1 superscript \ud835\udc78 \ud835\udc79 \ud835\udc67 \ud835\udc77 1 superscript \ud835\udc78 \ud835\udc79 \ud835\udc67 \ud835\udc69 \\displaystyle=\\frac{2}{1+z}\\left[\\bm{\\tilde{C}}^{*}\\bm{R}(z)\\bm{B}-\\bm{\\tilde{C}}^{*}\\bm{R}(z)\\bm{P}\\left(1+\\bm{Q}^{*}\\bm{R}(z)\\bm{P}\\right)^{-1}\\bm{Q}^{*}\\bm{R}(z)\\bm{B}\\right]. The last line applies the Woodbury Identity (Proposition 4) where . \u220e\n\nThe previous proof used the following self-contained result to back out the original SSM matrices from the discretization. Lemma C.4. Let be the SSM matrices discretized by the bilinear discretization with step size . Then\n\n\ud835\udc6a \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b \ud835\udc9b ) \u2212 1 \u200b \ud835\udc69 \u00af = 2 \u200b \u0394 1 + z \u200b \ud835\udc6a \u2217 \u200b [ 2 \u200b 1 \u2212 z 1 + z \u2212 \u0394 \u200b \ud835\udc68 ] \u2212 1 \u200b \ud835\udc69 superscript \ud835\udc6a superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc9b 1 bold-\u00af \ud835\udc69 2 \u0394 1 \ud835\udc67 superscript \ud835\udc6a superscript delimited-[] 2 1 \ud835\udc67 1 \ud835\udc67 \u0394 \ud835\udc68 1 \ud835\udc69 \\displaystyle\\bm{C}^{*}\\left(\\bm{I}-\\bm{\\overline{A}z}\\right)^{-1}\\bm{\\overline{B}}=\\frac{2\\Delta}{1+z}\\bm{C}^{*}\\left[{2\\frac{1-z}{1+z}}-\\Delta\\bm{A}\\right]^{-1}\\bm{B}\n\nProof. Recall that the bilinear discretization that we use (equation (3)) is\n\n\ud835\udc68 \u00af bold-\u00af \ud835\udc68 \\displaystyle\\bm{\\overline{A}} = ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 1 \u200b ( \ud835\udc70 + \u0394 2 \u200b \ud835\udc68 ) absent superscript \ud835\udc70 \u0394 2 \ud835\udc68 1 \ud835\udc70 \u0394 2 \ud835\udc68 \\displaystyle=\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)^{-1}\\left(\\bm{I}+\\frac{\\Delta}{2}\\bm{A}\\right) \ud835\udc69 \u00af bold-\u00af \ud835\udc69 \\displaystyle\\bm{\\overline{B}} = ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 1 \u200b \u0394 \u200b \ud835\udc69 absent superscript \ud835\udc70 \u0394 2 \ud835\udc68 1 \u0394 \ud835\udc69 \\displaystyle=\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)^{-1}\\Delta\\bm{B}\n\nThe result is proved algebraic manipulations. \ud835\udc6a \u2217 \u200b ( \ud835\udc70 \u2212 \ud835\udc68 \u00af \u200b z ) \u2212 1 \u200b \ud835\udc69 \u00af superscript \ud835\udc6a superscript \ud835\udc70 bold-\u00af \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\displaystyle\\bm{C}^{*}\\left(\\bm{I}-\\bm{\\overline{A}}z\\right)^{-1}\\bm{\\overline{B}} = \ud835\udc6a \u2217 \u200b [ ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 1 \u200b ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 1 \u200b ( \ud835\udc70 + \u0394 2 \u200b \ud835\udc68 ) \u200b z ] \u2212 1 \u200b \ud835\udc69 \u00af absent superscript \ud835\udc6a superscript delimited-[] superscript \ud835\udc70 \u0394 2 \ud835\udc68 1 \ud835\udc70 \u0394 2 \ud835\udc68 superscript \ud835\udc70 \u0394 2 \ud835\udc68 1 \ud835\udc70 \u0394 2 \ud835\udc68 \ud835\udc67 1 bold-\u00af \ud835\udc69 \\displaystyle=\\bm{C}^{*}\\left[\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)^{-1}\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)-\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)^{-1}\\left(\\bm{I}+\\frac{\\Delta}{2}\\bm{A}\\right)z\\right]^{-1}\\bm{\\overline{B}} = \ud835\udc6a \u2217 \u200b [ ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u2212 ( \ud835\udc70 + \u0394 2 \u200b \ud835\udc68 ) \u200b z ] \u2212 1 \u200b ( \ud835\udc70 \u2212 \u0394 2 \u200b \ud835\udc68 ) \u200b \ud835\udc69 \u00af absent superscript \ud835\udc6a superscript delimited-[] \ud835\udc70 \u0394 2 \ud835\udc68 \ud835\udc70 \u0394 2 \ud835\udc68 \ud835\udc67 1 \ud835\udc70 \u0394 2 \ud835\udc68 bold-\u00af \ud835\udc69 \\displaystyle=\\bm{C}^{*}\\left[\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)-\\left(\\bm{I}+\\frac{\\Delta}{2}\\bm{A}\\right)z\\right]^{-1}\\left(\\bm{I}-\\frac{\\Delta}{2}\\bm{A}\\right)\\bm{\\overline{B}} = \ud835\udc6a \u2217 \u200b [ \ud835\udc70 \u200b ( 1 \u2212 z ) \u2212 \u0394 2 \u200b \ud835\udc68 \u200b ( 1 + z ) ] \u2212 1 \u200b \u0394 \u200b \ud835\udc69 absent superscript \ud835\udc6a superscript delimited-[] \ud835\udc70 1 \ud835\udc67 \u0394 2 \ud835\udc68 1 \ud835\udc67 1 \u0394 \ud835\udc69 \\displaystyle=\\bm{C}^{*}\\left[\\bm{I}(1-z)-\\frac{\\Delta}{2}\\bm{A}(1+z)\\right]^{-1}\\Delta\\bm{B} = \u0394 1 \u2212 z \u200b \ud835\udc6a \u2217 \u200b [ \ud835\udc70 \u2212 \u0394 \u200b \ud835\udc68 2 \u200b 1 \u2212 z 1 + z ] \u2212 1 \u200b \ud835\udc69 absent \u0394 1 \ud835\udc67 superscript \ud835\udc6a superscript delimited-[] \ud835\udc70 \u0394 \ud835\udc68 2 1 \ud835\udc67 1 \ud835\udc67 1 \ud835\udc69 \\displaystyle=\\frac{\\Delta}{1-z}\\bm{C}^{*}\\left[\\bm{I}-\\frac{\\Delta\\bm{A}}{2\\frac{1-z}{1+z}}\\right]^{-1}\\bm{B} = 2 \u200b \u0394 1 + z \u200b \ud835\udc6a \u2217 \u200b [ 2 \u200b 1 \u2212 z 1 + z \u200b \ud835\udc70 \u2212 \u0394 \u200b \ud835\udc68 ] \u2212 1 \u200b \ud835\udc69 absent 2 \u0394 1 \ud835\udc67 superscript \ud835\udc6a superscript delimited-[] 2 1 \ud835\udc67 1 \ud835\udc67 \ud835\udc70 \u0394 \ud835\udc68 1 \ud835\udc69 \\displaystyle=\\frac{2\\Delta}{1+z}\\bm{C}^{*}\\left[{2\\frac{1-z}{1+z}}\\bm{I}-\\Delta\\bm{A}\\right]^{-1}\\bm{B}\n\nNote that in the S4 parameterization, instead of constantly computing , we can simply reparameterize our parameters to learn directly instead of , saving a minor computation cost and simplifying the algorithm. Reduction 3: Cauchy Kernel\n\nWe have reduced the original problem of computing to the problem of computing the SSM generating function in the case that is a diagonal matrix.",
    "s4-39": "We show that this is exactly the same as a Cauchy kernel, which is a well-studied problem with fast and stable numerical algorithms. Definition 3. A Cauchy matrix or kernel on nodes and is\n\n\ud835\udc74 \u2208 \u2102 M \u00d7 N \ud835\udc74 superscript \u2102 \ud835\udc40 \ud835\udc41 \\displaystyle\\bm{M}\\in\\mathbbm{C}^{M\\times N} = \ud835\udc74 \u200b ( \u03a9 , \u039b ) = ( \ud835\udc74 i \u200b j ) i \u2208 [ M ] , j \u2208 [ N ] \ud835\udc74 i \u200b j = 1 \u03c9 i \u2212 \u03bb j . formulae-sequence absent \ud835\udc74 \u03a9 \u039b subscript subscript \ud835\udc74 \ud835\udc56 \ud835\udc57 formulae-sequence \ud835\udc56 delimited-[] \ud835\udc40 \ud835\udc57 delimited-[] \ud835\udc41 subscript \ud835\udc74 \ud835\udc56 \ud835\udc57 1 subscript \ud835\udf14 \ud835\udc56 subscript \ud835\udf06 \ud835\udc57 \\displaystyle=\\bm{M}(\\Omega,\\Lambda)=(\\bm{M}_{ij})_{i\\in[M],j\\in[N]}\\qquad\\bm{M}_{ij}=\\frac{1}{\\omega_{i}-\\lambda_{j}}. The computation time of a Cauchy matrix-vector product of size is denoted by . Computing with Cauchy matrices is an extremely well-studied problem in numerical analysis, with both fast arithmetic algorithms and fast numerical algorithms based on the famous Fast Multipole Method (FMM) [29, 31, 30]. Proposition 5 (Cauchy). A Cauchy kernel requires space, and operation count\n\n\ud835\udc9e \u200b ( M , N ) = { O \u200b ( M \u200b N ) naively O \u200b ( ( M + N ) \u200b log 2 \u2061 ( M + N ) ) in exact arithmetic O \u200b ( ( M + N ) \u200b log \u2061 ( M + N ) \u200b log \u2061 1 \u03b5 ) numerically to precision \u03b5 . \ud835\udc9e \ud835\udc40 \ud835\udc41 cases \ud835\udc42 \ud835\udc40 \ud835\udc41 naively \ud835\udc42 \ud835\udc40 \ud835\udc41 superscript 2 \ud835\udc40 \ud835\udc41 in exact arithmetic \ud835\udc42 \ud835\udc40 \ud835\udc41 \ud835\udc40 \ud835\udc41 1 \ud835\udf00 numerically to precision \u03b5 \\displaystyle\\mathcal{C}(M,N)=\\begin{cases}O\\left(MN\\right)&\\text{naively}\\\\\nO\\left((M+N)\\log^{2}(M+N)\\right)&\\text{in exact arithmetic}\\\\\nO\\left((M+N)\\log(M+N)\\log\\frac{1}{\\varepsilon}\\right)&\\text{numerically to precision $\\varepsilon$}.\\end{cases}\n\nCorollary C.5. Evaluating (defined in Lemma C.3) for any set of nodes , diagonal matrix , and vectors can be computed in operations and space, where is the cost of a Cauchy matrix-vector multiplication. Proof. For any fixed , we want to compute . Computing this over all is therefore exactly a Cauchy matrix-vector multiplication. \u220e\n\nThis completes the proof of Theorem 3. In Algorithm 1, note that the work is dominated by Step 4, which has a constant number of calls to a black-box Cauchy kernel, with complexity given by Proposition 5. Appendix D Experiment Details and Full Results\n\nThis section contains full experimental procedures and extended results and citations for our experimental evaluation in Section 4. Section D.1 corresponds to benchmarking results in Section 4.1, Section D.2 corresponds to LRD experiments (LRA and Speech Commands) in Section 4.2, and Section D.3 corresponds to the general sequence modeling experiments (generation, image classification, forecasting) in Section 4.3. D.1 Benchmarking\n\nBenchmarking results from Fig. 3 and Fig. 3 were tested on a single A100 GPU. Benchmarks against LSSL\n\nFor a given dimension , a single LSSL or S4 layer was constructed with hidden features. For LSSL, the state size was set to as done in [18]. For S4, the state size was set to parameter-match the LSSL, which was a state size of due to differences in the parameterization. Fig. 3 benchmarks a single forward+backward pass of a single layer. Benchmarks against Efficient Transformers\n\nFollowing [40], the Transformer models had 4 layers, hidden dimension with heads, query/key/value projection dimension , and batch size , for a total of roughly parameters. The S4 model was parameter tied while keeping the depth and hidden dimension constant (leading to a state size of ). We note that the relative orderings of these methods can vary depending on the exact hyperparameter settings. D.2 Long-Range Dependencies\n\nThis section includes information for reproducing our experiments on the Long-Range Arena and Speech Commands long-range dependency tasks. Long Range Arena\n\nTable 4 contains extended results table with all 11 methods considered in [40]. For the S4 model, hyperparameters for all datasets are reported in Table 5. For all datasets, we used the AdamW optimizer with a constant learning rate schedule with decay on validation plateau. However, the learning rate on HiPPO parameters (in particular ) were reduced to a maximum starting LR of , which improves stability since the HiPPO equation is crucial to performance. The S4 state size was always fixed to . As S4 is a sequence-to-sequence model with output shape (batch, length, dimension) and LRA tasks are classification, mean pooling along the length dimension was applied after the last layer. We note that most of these results were trained for far longer than what was necessary to achieve SotA results (e.g., the Image task reaches SotA in 1 epoch). Results often keep improving with longer training times. Updated results. The above hyperparameters describe the results reported in the original paper, shown in Table 4, which have since been improved. See Section D.5. Hardware. All models were run on single GPU. Some tasks used an A100 GPU (notably, the Path-X experiments), which has a larger max memory of 40Gb. To reproduce these on smaller GPUs, the batch size can be reduced or gradients can be accumulated for two batches. Speech Commands\n\nWe provide details of sweeps run for baseline methods run by us\u2014numbers for all others method are taken from Gu et al. [18]. The best hyperparameters used for S4 are included in Table 5. Transformer [44] For MFCC, we swept the number of model layers , dropout and learning rates . We used attention heads, model dimension , prenorm, positional encodings, and trained for epochs with a batch size of . For Raw, the Transformer model\u2019s memory usage made training impossible. Performer [8] For MFCC, we swept the number of model layers , dropout and learning rates . We used attention heads, model dimension , prenorm, positional encodings, and trained for epochs with a batch size of . For Raw, we used a model dimension of , attention heads, prenorm, and a batch size of . We reduced the number of model layers to , so the model would fit on the single GPU. We trained for epochs with a learning rate of and no dropout. ExpRNN [24] For MFCC, we swept hidden sizes and learning rates . Training was run for epochs, with a single layer model using a batch size of . For Raw, we swept hidden sizes and learning rates (however, ExpRNN failed to learn). LipschitzRNN [13] For MFCC, we swept hidden sizes and learning rates . Training was run for epochs, with a single layer model using a batch size of . For Raw, we found that LipschitzRNN was too slow to train on a single GPU (requiring a full day for epoch of training alone). WaveGAN Discriminator [11] The WaveGAN-D in Fig. 6 is actually our improved version of the discriminator network from the recent WaveGAN model for speech [11]. This CNN actually did not work well out-of-the-box, and we added several features to help it perform better. The final model is highly specialized compared to our model, and includes:\n\n\u2022\n\nDownsampling or pooling between layers, induced by strided convolutions, that decrease the sequence length between layers. \u2022\n\nA global fully-connected output layer; thus the model only works for one input sequence length and does not work on MFCC features or the frequency-shift setting in Fig. 6. \u2022\n\nBatch Normalization is essential, whereas S4 works equally well with either Batch Normalization or Layer Normalization. \u2022\n\nAlmost as many parameters as the S4 model (M vs. M). D.3 General Sequence Modeling\n\nThis subsection corresponds to the experiments in Section 4.3. Because of the number of experiments in this section, we use subsubsection dividers for different tasks to make it easier to follow: CIFAR-10 density estimation (Section D.3.1), WikiText-103 language modeling (Section D.3.2), autoregressive generation (Section D.3.3), sequential image classification (Section D.3.4), and time-series forecasting (Section D.3.5). D.3.1 CIFAR Density Estimation\n\nThis task used a different backbone than the rest of our experiments. We used blocks of alternating S4 layers and position-wise feed-forward layers (in the style of Transformer blocks). Each feed-forward intermediate dimension was set to the hidden size of the incoming S4 layer. Similar to Salimans et al. [39], we used a UNet-style backbone consisting of identical blocks followed by a downsampling layer. The downsampling rates were (the 3 chosen because the sequence consists of RGB pixels). The base model had with starting hidden dimension 128, while the large model had with starting hidden dimension 192. We experimented with both the mixture of logistics from [39] as well as a simpler 256-way categorical loss. We found they were pretty close and ended up using the simpler softmax loss along with using input embeddings. We used the LAMB optimizer with learning rate 0.005. The base model had no dropout, while the large model had dropout 0.1 before the linear layers inside the S4 and FF blocks. D.3.2 WikiText-103 Language Modeling\n\nThe RNN baselines included in Fig. 8 are the AWD-QRNN [27], an efficient linear gated RNN, and the LSTM + Cache + Hebbian + MbPA [33], the best performing pure RNN in the literature. The CNN baselines are the CNN with GLU activations [9], the TrellisNet [4], Dynamic Convolutions [49], and TaLK Convolutions [26]. The Transformer baseline is [2], which uses Adaptive Inputs with a tied Adaptive Softmax. This model is a standard high-performing Transformer baseline on this benchmark, used for example by Lioutas and Guo [26] and many more. Our S4 model uses the same Transformer backbone as in [2]. The model consists of 16 blocks of S4 layers alternated with position-wise feedforward layers, with a feature dimension of 1024. Because our S4 layer has around 1/4 the number of parameters as a self-attention layer with the same dimension, we made two modifications to match the parameter count better: (i) we used a GLU activation after the S4 linear layer (Section 3.4) (ii) we used two S4 layers per block. Blocks use Layer Normalization in the pre-norm position. The embedding and softmax layers were the Adaptive Embedding from [2] with standard cutoffs 20000, 40000, 200000. Evaluation was performed similarly to the basic setting in [2], Table 5, which uses sliding non-overlapping windows. Other settings are reported in [2] that include more context at training and evaluation time and improves the score. Because such evaluation protocols are orthogonal to the basic model, we do not consider them and report the base score from [2] Table 5. Instead of SGD+Momentum with multiple cosine learning rate annealing cycles, our S4 model was trained with the simpler AdamW optimizer with a single cosine learning rate cycle with a maximum of 800000 steps. The initial learning rate was set to 0.0005. We used 8 A100 GPUs with a batch size of 1 per gpu and context size 8192. We used no gradient clipping and a weight decay of 0.1. Unlike [2] which specified different dropout rates for different parameters, we used a constant dropout rate of 0.25 throughout the network, including before every linear layer and on the residual branches. D.3.3 Autoregressive Generation Speed\n\nProtocol. To account for different model sizes and memory requirements for each method, we benchmark generation speed by throughput, measured in images per second (Fig. 8) or tokens per second (Fig. 8). Each model generates images on a single GPU, maximizing batch size to fit in memory. (For CIFAR-10 generation we limited memory to 16Gb, to be more comparable to the Transformer and Linear Transformer results reported from [22].)\n\nBaselines. The Transformer and Linear Transformer baselines reported in Fig. 8 are the results reported directly from Katharopoulos et al. [22]. Note that the Transformer number is the one in their Appendix, which implements the optimized cached implementation of self-attention. For all other baseline models, we used open source implementations of the models to benchmark generation speed. For the PixelCNN++, we used the fast cached version by Ramachandran et al. [34], which sped up generation by orders of magnitude from the naive implementation. This code was only available in TensorFlow, which may have slight differences compared to the rest of the baselines which were implemented in PyTorch. We were unable to run the Sparse Transformer [6] model due to issues with their custom CUDA implementation of the sparse attention kernel, which we were unable to resolve. The Transformer baseline from Fig. 8 was run using a modified GPT-2 backbone from the HuggingFace repository, configured to recreate the architecture reported in [2]. These numbers are actually slightly favorable to the baseline, as we did not include the timing of the embedding or softmax layers, whereas the number reported for S4 is the full model. D.3.4 Pixel-Level Sequential Image Classification\n\nOur models were trained with the AdamW optimizer for up to 200 epochs. Hyperparameters for the CIFAR-10 model is reported in Table 5. For our comparisons against ResNet-18, the main differences between the base models are that S4 uses LayerNorm by default while ResNet uses BatchNorm. The last ablation in Section 4.3 swaps the normalization type, using BatchNorm for S4 and LayerNorm for ResNet, to ablate this architectural difference. The experiments with augmentation take the base model and train with mild data augmentation: horizontal flips and random crops (with symmetric padding). D.3.5 Time Series Forecasting compared to Informer\n\nWe include a simple figure (Fig. 11) contrasting the architecture of S4 against that of the Informer [50]. In Fig. 11, the goal is to forecast a contiguous range of future predictions (Green, length ) given a range of past context (Blue, length ). We simply concatenate the entire context with a sequence of masks set to the length of the forecast window. This input is a single sequence of length that is run through the same simple deep S4 model used throughout this work, which maps to an output of length . We then use just the last outputs as the forecasted predictions. Tables 7 and 8 contain full results on all 50 settings considered by Zhou et al. [50]. S4 sets the best results on 40 out of 50 of these settings. D.4 Visualizations\n\nWe visualize the convolutional filter learned by S4 for the Pathfinder and CIFAR-10 tasks in Fig.",
    "s4-40": "12. D.5 Reproduction\n\nSince the first version of this paper, several experiments have been updated. Please read the corresponding paragraph below before citing LRA or SC results. Long Range Arena\n\nFollow-ups to this paper expanded the theoretical understanding of S4 while improving some results. The results reported in Table 2 have been updated to results from the papers [19, 20]. More specifically, the method S4-LegS in those works refers to the same model presented in this paper, with the \u201c-LegS\u201d suffix referring to the initialization defined in equation (2). As such, results from the original Table 2 have been directly updated. The updated results have only minor hyperparameter changes compared to the original results. The original results and hyperparameters are shown in Table 4 (Section D.2). Appendix B of [19] describes the changes in hyperparameters, which are also documented from the experiment configuration files in the publically available code at https://github.com/HazyResearch/state-spaces. Speech Commands\n\nThe Speech Commands (SC) dataset [47] is originally a 35-class dataset of spoken English words. However, this paper was part of a line of work starting with Kidger et al. [23] that has used a smaller 10-class subset of SC [23, 35, 18, 36]. In an effort to avoid dataset fragmentation in the literature, we have since moved to the original dataset. We are now calling this 10-class subset SC10 to distinguish it from the full 35-class SC dataset. To cite S4 as a baseline for Speech Commands, please use Table 11 from [19] instead of Fig.",
    "s4-41": "6 from this paper. In addition to using the full SC dataset, it also provides a number of much stronger baselines than the ones used in this work. WikiText-103\n\nThe original version of this paper used an S4 model with batch size , context size which achieved a validation perplexity of 20.88 and test perplexity of 21.28. It was later retrained with a batch size of and context size which achieved a validation perplexity of 19.69 and test perplexity of 20.95, and a model checkpoint is available in the public repository.",
    "s4-42": "The rest of the model is essentially identical, so the results from the original table have been updated. \u25c4 Feeling lucky? Conversion report Report an issue View original on arXiv\u25ba\n\nCopyright Privacy Policy\n\nGenerated on Sat Mar 2 02:58:01 2024 by LaTeXML"
}