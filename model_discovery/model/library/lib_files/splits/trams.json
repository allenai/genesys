{
    "trams-0": "TRAMS: Training-free Memory Selection for Long-range Language Modeling\n\nHaofei Yu, Cunxiang Wang, Yue Zhang, Wei Bi Language Technologies Institute, Carnegie Mellon University, USA School of Engineering, Westlake University, China Tencent AI Lab, China haofeiy@cs.cmu.edu, {wangcunxiang, zhangyue}@westlake.edu.cn, victoriabi@tencent.com Work done during internship at Tencent AI Lab.",
    "trams-1": "Co-first Author. The correponding author. Abstract\n\nThe Transformer architecture is crucial for numerous AI models, but it still faces challenges in long-range language modeling. Though several specific transformer architectures have been designed to tackle issues of long-range dependencies, existing methods like Transformer-XL are plagued by a high percentage of ineffective memories. In this study, we present a plug-and-play strategy, known as TRAining-free Memory Selection (TRAMS), that selects tokens participating in attention calculation based on one simple metric.",
    "trams-2": "This strategy allows us to keep tokens that are likely to have a high attention score with the current queries and ignore the other ones. We have tested our approach on the word-level benchmark (WikiText-103) and the character-level benchmark (enwik8), and the results indicate an improvement without having additional training or adding additional parameters. 1 Introduction\n\nTransformer-based models Kenton and Toutanova (2019); Liu et al.",
    "trams-3": "(2019); Raffel et al. (2020); Lan et al. (2019); Brown et al. (2020) have achieved remarkable performance over the past few years. The key component of these model architectures is the attention mechanism Vaswani et al. (2017). However, the original attention design struggles to efficiently handle long sequences, which becomes particularly problematic in scenarios such as document-level translation (Werlen et al., 2018; Kim et al., 2019) and large-scale text generation (Zhou et al., 2023), as its time and space computation costs increase quadratically with the sequence length (Tay et al., 2022). The primary factor for this elevated computational complexity can be traced back to the multiplication between queries and keys used in the attention module. In general, the time complexity for calculation is if a transformer model with dimensions is set up with an input consisting of tokens. To tackle this computation bottleneck, numerous efforts have been made. The first line of work is to find a new efficient expression to compute the attention score. Despite the advancements made, these methods often compromise performance, thus paving the way for alternative solutions. Efficient architectures that provide an approximate expression of attention have been explored widely (Wang et al., 2020; Peng et al., 2022b, a; Choromanski et al., 2021; Zheng et al., 2022b, a). The second line of work is to keep the calculation expression the same and use an external structure like hash function (Kitaev et al., 2019; Daras et al., 2020), clustering (Roy et al., 2021; Vyas et al., 2020) and memory selector (Pietruszka et al., 2022; Dai et al., 2019; Bertsch et al., 2023; Sukhbaatar et al., 2021, 2019; Child et al., 2019) to find the suitable subset of queries and keys in the long sequence for attention calculation. Our work falls into the second category, in which we propose a training-free memory selection mechanism to select suitable tokens for attention computation. Specifically, we focus on pushing Transformer-XL (Dai et al., 2019) architecture to a better position by selecting higher-quality tokens inside its memory. Based on our initial investigation, we construct a memory subset by selecting 50% of the memories with the largest attention values and maintaining the same performance.",
    "trams-4": "It indicates that a large portion of information in memory is not fully utilized. This motivates us to explore better methods to optimize memory usage. Illustrated in Figure 1, we propose a TRAining-free Memory Selection method (TRAMS) that can be directly plugged into memory-based long-range language models and reduces the time complexity of computing attention matrix. Through experiments on two language modeling benchmark datasets, namely word-level WikiText-103 (Merity et al., 2016) and character-level enwik8 (Mahoney, 2011), we achieve an improvement in the model\u2019s performance, as demonstrated by a 0.19 perplexity (ppl) drop in WikiText-103 and a 0.017 reduction in bits-per-character (bpc) in enwik8. To our knowledge, we are the first to design a training-free memory selection method based on Transformer-XL architecture.111Source code for this paper is available at https://github.com/lwaekfjlk/TRAMS.",
    "trams-5": "2 Method\n\n2.1 Problem Definition\n\nWe use to represent the input hidden states for the attention module, to represent the output hidden states for the attention module, to represent the memory hidden states used in the attention calculation. We use , , to represent the trainable projection matrix in the attention module. We define for the dimension of the model, for the memory size, and for the input size. The attention calculation process can be formally written as . With the above annotations, the problem of memory selection can be defined as choosing a subset of hidden states memory from the memory that brings the minimum difference to the transformer layer output but with a smaller memory size. \ud835\udc8e ~ \u2217 superscript ~ \ud835\udc8e \\displaystyle{\\tilde{\\bm{m}}}^{*} = arg \u2061 min \ud835\udc8e ~ \u2282 \ud835\udc8e \u2016 Attn \u200b ( \ud835\udc89 , \ud835\udc8e ~ ) \u2212 Attn \u200b ( \ud835\udc89 , \ud835\udc8e ) \u2016 absent subscript ~ \ud835\udc8e \ud835\udc8e norm Attn \ud835\udc89 ~ \ud835\udc8e Attn \ud835\udc89 \ud835\udc8e \\displaystyle=\\mathop{\\arg\\min}_{\\tilde{\\bm{m}}\\subset\\bm{m}}\\|\\text{Attn}(\\bm{h},\\tilde{\\bm{m}})-\\text{Attn}(\\bm{h},{\\bm{m}})\\| (1)\n\n2.2 Attention Reformulation\n\nStandard Attention\n\nIn a memory-augmented language model, the standard attention mechanism (Vaswani et al., 2017) between input hidden states and memory hidden states can be written as:\n\nAttn \u200b ( \ud835\udc89 , \ud835\udc8e ) = softmax \u200b ( Q \u200b K \u22a4 d ) \u200b V Attn \ud835\udc89 \ud835\udc8e softmax \ud835\udc44 superscript \ud835\udc3e top \ud835\udc51 \ud835\udc49 \\text{Attn}(\\bm{h},\\bm{m})=\\text{softmax}(\\frac{QK^{\\top}}{\\sqrt{d}})V (2)\n\nwhere is the product of target token hidden states and query projection matrix ; is the product of memory token hidden states and key projection matrix ; is also the product of memory token hidden states and value projection matrix . Unlimiformer Attention\n\nDifferent from the well-known attention score calculation, Unlimiformer (Bertsch et al., 2023) proposed a rewritten way to compute the dot-product part of cross-attention in the encoder-decoder architecture:\n\nQ \u200b K \u22a4 \ud835\udc44 superscript \ud835\udc3e top \\displaystyle QK^{\\top} = ( \ud835\udc89 d \u200b W Q ) \u200b ( \ud835\udc89 e \u200b W K ) \u22a4 absent subscript \ud835\udc89 \ud835\udc51 subscript \ud835\udc4a \ud835\udc44 superscript subscript \ud835\udc89 \ud835\udc52 subscript \ud835\udc4a \ud835\udc3e top \\displaystyle=({\\bm{h}_{d}W_{Q}})({\\bm{h}_{e}W_{K}})^{\\top} = ( \ud835\udc89 d \u200b W Q \u200b W K \u22a4 ) \u200b \ud835\udc89 e \u22a4 absent subscript \ud835\udc89 \ud835\udc51 subscript \ud835\udc4a \ud835\udc44 superscript subscript \ud835\udc4a \ud835\udc3e top superscript subscript \ud835\udc89 \ud835\udc52 top \\displaystyle=(\\bm{h}_{d}W_{Q}W_{K}^{\\top})\\bm{h}_{e}^{\\top} (3)\n\nwhere is the encoder hidden state and is the decoder hidden state. It allows Unlimiformer to avoid indexing the keys for each head and layer separately and avoid storing values in a separate index from the keys during NN-based searching and retrieval stage, making it more efficient. TRAMS Attention\n\nEven though we have no need to store or index any key or value for our method, Unlimiformer attention motivates us to transfer more useful information to keys by reformulating attention and allows us to do more effective memory selection solely based on reformulated keys. We can compute this attention formula in a different order but maintain the same result:\n\nQ \u200b K \u22a4 \ud835\udc44 superscript \ud835\udc3e top \\displaystyle QK^{\\top} = ( \ud835\udc89 \u200b W Q ) \u200b ( \ud835\udc8e \u200b W K ) \u22a4 absent \ud835\udc89 subscript \ud835\udc4a \ud835\udc44 superscript \ud835\udc8e subscript \ud835\udc4a \ud835\udc3e top \\displaystyle=({\\bm{h}W_{Q}})({\\bm{m}W_{K}})^{\\top} = ( \ud835\udc89 ) \u200b ( \ud835\udc8e \u200b W K \u200b W Q \u22a4 ) \u22a4 absent \ud835\udc89 superscript \ud835\udc8e subscript \ud835\udc4a \ud835\udc3e superscript subscript \ud835\udc4a \ud835\udc44 top top \\displaystyle=({\\bm{h}})(\\bm{m}W_{K}W_{Q}^{\\top})^{\\top} (4)\n\nThus, we define as the reformulated query for this attention expression and as the reformulated keys for attention. With this reformulation, we transfer all attention-related parametric information onto reformulated key vectors. 2.3 Transformer Hidden Space\n\nSince is the input of the current transformer layer and also the output of the previous transformer layer, it is the result of the last layer\u2019s Layernorm operation. We can define the coordinate-wise average of as and the coordinate-wise standard deviation of as . Expressions can be written as:\n\n\u03bc = 1 d \u200b \u2211 i = 1 d h i \u2248 0 , \u03c3 = 1 d \u200b \u2211 i = 1 d ( h i \u2212 \u03bc ) 2 \u2248 1 formulae-sequence \ud835\udf07 1 \ud835\udc51 superscript subscript \ud835\udc56 1 \ud835\udc51 subscript \u210e \ud835\udc56 0 \ud835\udf0e 1 \ud835\udc51 superscript subscript \ud835\udc56 1 \ud835\udc51 superscript subscript \u210e \ud835\udc56 \ud835\udf07 2 1 \\displaystyle\\mu=\\frac{1}{d}\\sum_{i=1}^{d}h_{i}\\approx 0,\\;\\;\\sigma=\\sqrt{\\frac{1}{d}\\sum_{i=1}^{d}(h_{i}-\\mu)^{2}}\\approx 1 (5)\n\nSince the mean value for the hidden states is around zero, we can confirm the hidden states vectors are approximately orthogonal to the vector and the L2 norm of hidden states is around . With this approximation, we can expand our reformulated attention score as:\n\nQ \u2032 \u200b K \u2032 \u2063 \u22a4 superscript \ud835\udc44 \u2032 superscript \ud835\udc3e \u2032 top \\displaystyle Q^{\\prime}K^{\\prime\\top} = ( \ud835\udc89 ) \u200b ( \ud835\udc8e \u200b W K \u200b W Q \u22a4 ) \u22a4 absent \ud835\udc89 superscript \ud835\udc8e subscript \ud835\udc4a \ud835\udc3e superscript subscript \ud835\udc4a \ud835\udc44 top top \\displaystyle=({\\bm{h}})(\\bm{m}W_{K}W_{Q}^{\\top})^{\\top} = \u2016 Q \u2032 \u2016 \u22c5 \u2016 K \u2032 \u2016 \u22c5 cos \u2061 \u27e8 Q \u2032 , K \u2032 \u27e9 absent \u22c5 norm superscript \ud835\udc44 \u2032 norm superscript \ud835\udc3e \u2032 superscript \ud835\udc44 \u2032 superscript \ud835\udc3e \u2032 \\displaystyle=||Q^{\\prime}||\\cdot||K^{\\prime}||\\cdot\\cos\\left<Q^{\\prime},K^{\\prime}\\right> \u2248 d \u22c5 \u2016 K \u2032 \u2016 \u22c5 cos \u2061 \u27e8 Q \u2032 , K \u2032 \u27e9 absent \u22c5 \ud835\udc51 norm superscript \ud835\udc3e \u2032 superscript \ud835\udc44 \u2032 superscript \ud835\udc3e \u2032 \\displaystyle\\approx\\sqrt{d}\\cdot||K^{\\prime}||\\cdot\\cos\\left<Q^{\\prime},K^{\\prime}\\right> (6)\n\nwhere stands the L2 norm for and stands for the L2 norm for . Based on Fig 2, we see that reformulated query norm has a much sharper distribution compared with key norm , indicating reformulated query norm can be approximated by a constant factor. 2.4 Training-free Memory Selection (TRAMS)\n\nOur target for memory selection is to recover the complete attention score with as few memory tokens as possible. This problem is equivalent to finding the subset of memory tokens that have the highest attention scores with queries. We propose a heuristic method to perform token-level selection for each layer and each head based on a memory-independent metric in this section. There are two crucial components for calculating the attention score after approximating with a constant factor: the norm of the reformulated keys and the angles between the reformulated keys and queries , which is proved in Khandelwal et al. (2019). Commonly, we believe that is the more important factor in general. Yet, if we use the ranking of attention score value for all query and key pairs as ground-truth ranking, based on Fig 3, we empirically discovered that rankings based on key norms and rankings based on angles produce close Spearman correlation scores when only taking the highest 1% attention scores into account. Therefore, it indicates that we can rank our memory tokens based on solely to gain a relatively good performance when we desire top 1% attention scores with queries in our memories instead of all. Additionally, we discovered that relying solely on a large norm isn\u2019t sufficient as a constraint. Specifically, keys that are nearer to tend to yield a higher attention score. To address this, we introduce a combined metric: . This metric allows us to identify tokens that can produce high attention scores when paired with the appropriate query (owing to a high value of ) and low scores when paired with an unsuitable query (owing to the high level of orthogonality with the query space based on ). This is due to the near orthogonality to the query space, as indicated by a small angle with , which is orthogonal to the query space. 3 Experiments\n\nWe introduce the compared methods and report the main results and analysis on different attention variants for inference in this section. Datasets details for WikiText-103 and enwik8 benchmarks and their evaluation metric details are included in Appendix A. The details of the model that we built memory selection on can be seen in Appendix B. 3.1 Compared Methods\n\nTransformer+RPE (Vaswani et al., 2017): the vanilla transformer baseline with relative position embedding that is the same as Transformer-XL. Therefore, the only difference between this model and Transformer-XL is the additional memories. More information related to relative position embedding can be seen in Appendix C. Transformer-XL (Dai et al., 2019): a specific-designed architecture for long-range language modeling. It includes relative position embedding and recurrent memories per layer. Memory slots are filled with hidden states from previous time steps. 3.2 Experimental Settings\n\nWe compare our methods with the Transformer-XL (Dai et al., 2019) under the same size of memory () for attention calculation. For the input token length for both models, we keep the same as in Dai et al. (2019) (). Additionally, the memory selection process is performed on a memory pool with the size of . Our model and the Transformer-XL share the model parameters but have different inference strategies. 3.3 Main Results\n\nThe main results of WikiText-103 and enwik8 datasets are shown in Table 1. Without additional training or additional parameters, we gain 0.19 improvement in perplexity and 0.017 improvement for bit-per-character with our TRAMS mechanism. We implement -test by inferencing on multiple model checkpoints and prove that our results are significant ( < 0.05). 4 Discussions\n\nIs TRAMS vulnerable to the selection of hyperparameters? There are three hyper-parameters in TRAMS: the memory pool size that TRAMS is able to select from; the selected memory size that is used in the forward process; and the input token size that is involved in both backward and forward process. From the ablation study on , Figure 4 suggests an optimal range between 300 to 400 for the memory pool size. Beyond this range, enlarging the memory pool often leads to the selection of irrelevant tokens, deteriorating our performance. Regarding , Figure 5 indicates that TRAMS witnesses a substantial drop in perplexity when the memory size selected is about 25%. Selecting a larger portion does not yield further improvement. This is consistent with Figure 3, where TRAMS excels by concentrating on the top 10% of results. Lastly, in the study on , Figure 6 shows that as the target token length decreases, the efficacy of memory selection improves. What is the inference cost compared to Transformer-XL? Since there is no training part in our model, we focus on discussing the inference cost. Compared with Transformer-XL, our model requires storing a larger memory pool to do memory selection. Therefore, the memory cost of our method would be larger. When it comes to timing cost, our model has an additional memory token norm computation memory sorting operations, and memory selection operations for each layer. These extra operations require extra inference time. Table 2 shows the GPU memory cost and wall-clock time for the Transformer-XL baseline and our model. Our model requires slightly more GPU memory usage and around 50% additional inference time for memory selection. How does TRAMS benefit from memory selection? Memory selection helps the model pick tokens with higher attention scores with the queries, thus increasing the average memory utilization. Quantitatively, our method improves the average attention probability by 24.25% for the same size of memory compared with Transformer-XL. Does each layer hold the same importance? Based on Figure 7, we show the ablation study when applying memory selection on each layer while remaining other layers the same. There is an observable drop when we apply the memory selection on the deeper layers starting from Layer 13 while we do not observe a clear influence when applying memory selection on shallow layers. 5 Case Study\n\nTo have an understanding of what kind of context should be selected, we provide one example case to understand specifically what kind of tokens in the memory would be selected. Based on Table 3, we can see that most of the selected memory tokens are low-frequency words. Those low-frequency words like \u201cJohn\" in the memory would be beneficial for the prediction of \u201cJohn\" in the target sequence. 6 Conclusion\n\nIn this work, we formulate the problem of memory selection in transformer architecture and reformulate the attention calculation process to obtain our self-defined queries and keys. After that, we propose a query-independent metric that utilizes memory hidden states to implement a training-free memory selector. Our experiments indicate that this method offers a simple yet effective means of identifying valuable memory tokens. Exploring optimal memory selection strategies for large language models is a promising avenue for future research. Additionally, integrating trainable parameters into these models as memory selectors presents another exciting direction for future work. Limitations\n\nOur study has a couple of main limitations. First, we are currently focusing on the Transformer-XL architecture, but there are many other models with different sizes we haven\u2019t tried. It indicates that our findings could be limited to typical transformer architecture. Second, our method has many hyperparameters including , , and . Adjusting them can greatly change how well our model works. A careful calibration is thus necessary, and one must tread cautiously to strike a balance and achieve the desired performance, which could be time-consuming and computationally expensive. Ethics Statement\n\nThere are no recognized potential risks. References\n\nBertsch et al. (2023) Amanda Bertsch, Uri Alon, Graham Neubig, and Matthew R Gormley. 2023. Unlimiformer: Long-range transformers with unlimited length input.",
    "trams-6": "arXiv preprint arXiv:2305.01625. Brown et al. (2020) Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. 2020. Language models are few-shot learners. Advances in neural information processing systems, 33:1877\u20131901. Child et al. (2019) Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. 2019. Generating long sequences with sparse transformers.",
    "trams-7": "arXiv preprint arXiv:1904.10509. Choromanski et al. (2021) Krzysztof Choromanski, Haoxian Chen, Han Lin, Yuanzhe Ma, Arijit Sehanobish, Deepali Jain, Michael S Ryoo, Jake Varley, Andy Zeng, Valerii Likhosherstov, et al. 2021. Hybrid random features. arXiv preprint arXiv:2110.04367. Dai et al. (2019) Zihang Dai, Zhilin Yang, Yiming Yang, Jaime G Carbonell, Quoc Le, and Ruslan Salakhutdinov. 2019. Transformer-xl: Attentive language models beyond a fixed-length context. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2978\u20132988. Daras et al. (2020) Giannis Daras, Nikita Kitaev, Augustus Odena, and Alexandros G Dimakis. 2020. Smyrf-efficient attention using asymmetric clustering. Advances in Neural Information Processing Systems, 33:6476\u20136489. Kenton and Toutanova (2019) Jacob Devlin Ming-Wei Chang Kenton and Lee Kristina Toutanova. 2019. Bert: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of NAACL-HLT, pages 4171\u20134186. Khandelwal et al. (2019) Urvashi Khandelwal, Omer Levy, Dan Jurafsky, Luke Zettlemoyer, and Mike Lewis. 2019. Generalization through memorization: Nearest neighbor language models. In International Conference on Learning Representations. Kim et al. (2019) Yunsu Kim, Duc Thanh Tran, and Hermann Ney. 2019. When and why is document-level context useful in neural machine translation? In Proceedings of the Fourth Workshop on Discourse in Machine Translation (DiscoMT 2019), pages 24\u201334. Kingma and Ba (2014) Diederik P Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980. Kitaev et al. (2019) Nikita Kitaev, Lukasz Kaiser, and Anselm Levskaya. 2019. Reformer: The efficient transformer. In International Conference on Learning Representations. Lan et al. (2019) Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, and Radu Soricut. 2019. Albert: A lite bert for self-supervised learning of language representations.",
    "trams-8": "In International Conference on Learning Representations. Liu et al. (2019) Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. 2019. Roberta: A robustly optimized bert pretraining approach. arXiv preprint arXiv:1907.11692. Mahoney (2011) Matt Mahoney. 2011. Large text compression benchmark. Merity et al. (2016) Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. 2016. Pointer sentinel mixture models. In International Conference on Learning Representations. Peng et al. (2022a) Hao Peng, Jungo Kasai, Nikolaos Pappas, Dani Yogatama, Zhaofeng Wu, Lingpeng Kong, Roy Schwartz, and Noah A Smith. 2022a. Abc: Attention with bounded-memory control. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 7469\u20137483. Peng et al. (2022b) Hao Peng, Nikolaos Pappas, Dani Yogatama, Roy Schwartz, Noah Smith, and Lingpeng Kong. 2022b. Random feature attention. In International Conference on Learning Representations. Pietruszka et al. (2022) Micha\u0142 Pietruszka, \u0141ukasz Borchmann, and \u0141ukasz Garncarek. 2022. Sparsifying transformer models with trainable representation pooling. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 8616\u20138633. Raffel et al. (2020) Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. 2020. Exploring the limits of transfer learning with a unified text-to-text transformer. The Journal of Machine Learning Research, 21(1):5485\u20135551. Roy et al. (2021) Aurko Roy, Mohammad Saffar, Ashish Vaswani, and David Grangier. 2021. Efficient content-based sparse attention with routing transformers. Transactions of the Association for Computational Linguistics, 9:53\u201368. Sukhbaatar et al. (2019) Sainbayar Sukhbaatar, \u00c9douard Grave, Piotr Bojanowski, and Armand Joulin. 2019. Adaptive attention span in transformers. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 331\u2013335. Sukhbaatar et al. (2021) Sainbayar Sukhbaatar, Da Ju, Spencer Poff, Stephen Roller, Arthur Szlam, Jason Weston, and Angela Fan. 2021. Not all memories are created equal: Learning to forget by expiring. In International Conference on Machine Learning, pages 9902\u20139912.",
    "trams-9": "PMLR. Tay et al. (2022) Yi Tay, Mostafa Dehghani, Dara Bahri, and Donald Metzler. 2022. Efficient transformers: A survey. ACM Computing Surveys, 55(6):1\u201328. Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. Advances in neural information processing systems, 30. Vyas et al. (2020) Apoorv Vyas, Angelos Katharopoulos, and Fran\u00e7ois Fleuret. 2020. Fast transformers with clustered attention.",
    "trams-10": "Advances in Neural Information Processing Systems, 33:21665\u201321674. Wang et al. (2020) Sinong Wang, Belinda Z Li, Madian Khabsa, Han Fang, and Hao Ma. 2020. Linformer: Self-attention with linear complexity.",
    "trams-11": "arXiv preprint arXiv:2006.04768. Werlen et al. (2018) Lesly Miculicich Werlen, Dhananjay Ram, Nikolaos Pappas, and James Henderson. 2018. Document-level neural machine translation with hierarchical attention networks. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2947\u20132954. Zheng et al. (2022a) Lin Zheng, Chong Wang, and Lingpeng Kong. 2022a. Linear complexity randomized self-attention mechanism.",
    "trams-12": "In International Conference on Machine Learning, pages 27011\u201327041. PMLR. Zheng et al. (2022b) Lin Zheng, Jianbo Yuan, Chong Wang, and Lingpeng Kong. 2022b. Efficient attention via control variates. In The Eleventh International Conference on Learning Representations. Zhou et al. (2023) Wangchunshu Zhou, Yuchen Eleanor Jiang, Peng Cui, Tiannan Wang, Zhenxin Xiao, Yifan Hou, Ryan Cotterell, and Mrinmaya Sachan. 2023. Recurrentgpt: Interactive generation of (arbitrarily) long text. arXiv preprint arXiv:2305.13304. Appendix A Dataset and Evaluation Metrics\n\nWikiText-103 (Merity et al., 2016) is a commonly used word-level language modeling benchmark. It has an average length of 3.6 thousand tokens per article and includes 28 thousand Wikipedia articles. This word-level dataset has a vocabulary size of around 260K. We use the same data pre-processing setting in Dai et al. (2019) for this dataset. We use perplexity as our metric. Enwik8 (Mahoney, 2011) is a character-level language modeling benchmark. This dataset contains 100M unprocessed Wikipedia characters. The train set, dev set, and test set include 80M, 10M, and 10M characters separately. enwik8 has no pre-processing stage and is directly used. bpc (bit per character) is defined as an evaluation metric and we report results on both the dev set and test set. Appendix B Training Configurations\n\nSince we do inference experiments based on a trained model, we separately train two Transformer-XL models for WikiText-103 and enwik8. For the training stage, we use Adam (Kingma and Ba, 2014) to optimize with a batch size=60, learning rate=2.5e-4, target length=150, memory length=150, and a cosine scheduler without warmup steps. When it comes to a different dataset, we use different Transformer-XL architecture. For WikiText-103, we use a 16-layer transformer architecture with 10 heads, 410 hid dim, 0.1 dropout ratio, 0.0 attention dropout ratio, 2100 inner dim, and adaptive softmax mechanism. For enwik8, we propose a 12-layer transformer architecture with 8 heads, 512 hid dim, 0.1 dropout ratio, 0.0 attention dropout ratio, and 2048 inner dim.",
    "trams-13": "Both models are trained for 350K steps. A batch size=10 and target length=150 are fixed for all inference experiments to avoid unfair comparison. All experiments including training and inference are conducted using 4 2080Ti GPUs. It takes 280 GPU hours to train the enwik8 model checkpoint. It takes 61 GPU hours to train the WikiText-103 model checkpoint. Appendix C Relative Position Embedding\n\nConcerning positional encodings, we maintain the same results with Transformer-XL.",
    "trams-14": "The positional encodings include learnable parameters of , , and . Typically, is derived from a learnable network included in the model. The advantage of using this design when computing the attention score is that it avoids temporal confusion caused by indexing the same position and considers the relative distance between two tokens. The formula for attention score calculation with relative position embedding can be written as:\n\n\ud835\udc68 i , j x \u200b l subscript superscript \ud835\udc68 \ud835\udc65 \ud835\udc59 \ud835\udc56 \ud835\udc57 \\displaystyle\\bm{A}^{{xl}}_{i,j} = \ud835\udc7f i \u22a4 \u200b \ud835\udc7e q \u22a4 \u200b \ud835\udc7e k E \u200b \ud835\udc7f j + \ud835\udc7f i \u22a4 \u200b \ud835\udc7e q \u22a4 \u200b \ud835\udc7e k R \u200b \ud835\udc79 i \u2212 j absent superscript subscript \ud835\udc7f \ud835\udc56 top superscript subscript \ud835\udc7e \ud835\udc5e top superscript subscript \ud835\udc7e \ud835\udc58 \ud835\udc38 subscript \ud835\udc7f \ud835\udc57 superscript subscript \ud835\udc7f \ud835\udc56 top superscript subscript \ud835\udc7e \ud835\udc5e top superscript subscript \ud835\udc7e \ud835\udc58 \ud835\udc45 subscript \ud835\udc79 \ud835\udc56 \ud835\udc57 \\displaystyle=\\bm{X}_{i}^{\\top}\\bm{W}_{q}^{\\top}\\bm{W}_{k}^{E}\\bm{X}_{j}+\\bm{X}_{i}^{\\top}\\bm{W}_{q}^{\\top}\\bm{W}_{k}^{R}\\bm{R}_{i-j} + \ud835\udc96 \u22a4 \u200b \ud835\udc7e k E \u200b \ud835\udc7f j + \ud835\udc97 \u22a4 \u200b \ud835\udc7e k R \u200b \ud835\udc79 i \u2212 j superscript \ud835\udc96 top superscript subscript \ud835\udc7e \ud835\udc58 \ud835\udc38 subscript \ud835\udc7f \ud835\udc57 superscript \ud835\udc97 top superscript subscript \ud835\udc7e \ud835\udc58 \ud835\udc45 subscript \ud835\udc79 \ud835\udc56 \ud835\udc57 \\displaystyle+\\bm{u}^{\\top}\\bm{W}_{k}^{E}\\bm{X}_{j}+\\bm{v}^{\\top}\\bm{W}_{k}^{R}\\bm{R}_{i-j} (7)\n\nMoreover, after doing ablation studies on relative position embedding, we found that contributes the most to the result and , only has a small influence on the final performance.",
    "trams-15": "The existence of leads to the exponentially decayed attention probability distribution related to a memory position. As a result, we base our memory selection on the which includes positional information instead of the pure . To be noticed, all concepts related to are all equipped with position embedding instead of a simple dot product. \u25c4 Feeling lucky? Conversion report Report an issue View original on arXiv\u25ba\n\nCopyright Privacy Policy\n\nGenerated on Tue Feb 27 23:03:45 2024 by LaTeXML"
}