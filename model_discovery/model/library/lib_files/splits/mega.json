{
    "mega-0": "# Mega: Moving Average Equipped Gated Attention \n\nXuezhe Ma*<br>XUEZHEMA@ISI.EDU<br>University of Southern California<br>Chunting Zhou*<br>CHUNTINZ@FB.COM<br>Meta AI Research<br>Xiang Kong<br>XIANGK@CS.CMU.EDU<br>Carnegie Mellon University<br>Junxian He<br>JUNXIANH2@GMAIL.COM<br>Shanghai Jiao Tong University<br>Liangke Gui<br>LIANGKEG@CS.CMU.EDU<br>Graham Neubig<br>GNEUBIG@CS.CMU.EDU<br>Carnegie Mellon University<br>Jonathan May<br>JONMAY@ISI.EDU<br>University of Southern California<br>Luke Zettlemoyer<br>LSZ@FB.COM<br>Meta AI Research\n\n\n#### Abstract\n\nThe design choices in the Transformer attention mechanism, including weak inductive bias and quadratic computational complexity, have limited its application for modeling long sequences. In this paper, we introduce MEGA, a simple, theoretically grounded, single-head gated attention mechanism equipped with (exponential) moving average to incorporate inductive bias of position-aware local dependencies into the position-agnostic attention mechanism. We further propose a variant of MEGA that offers linear time and space complexity yet yields only minimal quality loss, by efficiently splitting the whole sequence into multiple chunks with fixed length. Extensive experiments on a wide range of sequence modeling benchmarks, including the Long Range Arena, neural machine translation, autoregressive language modeling, and image and speech classification, show that MEGA achieves significant improvements over other sequence models, including variants of Transformers and recent state space models. ${ }^{1}$\n\n\n## 1. Introduction\n\nDesigning a single unified model to capture long range dependencies in sequential data across a diverge range of modalities, such as language, audio, image and video, is a central and challenging problem in sequence modeling. A number of different archtectures have been developed, including convolutional neural networks (CNNs) (Kim, 2014; Strubell et al., 2017), recurrent neural networks (RNNs) (Goller and Kuchler, 1996; Hochreiter and Schmidhuber, 1997; Cho et al., 2014), Transformers (Vaswani et al., 2017) and recent state space models (SSMs) (Gu et al., 2022a; Mehta et al., 2022). Among these models, the Transformer\n*. Equal Contribution. Correspondence to xuezhema@isi.edu and chuntinz@fb.com\n\n1. The implementation of the algorithm is available at https://github.com/facebookresearch/mega\n\nTable 1: Experimental results of Transformer (XFM), S4 and MEGA on five sequence modeling benchmarks of different types of data, including long range arena (LRA), machine translation (WMT16 en-de), language modeling (WikiText-103), image classification (ImageNet-1k), raw speech classification (SC-Raw).",
    "mega-1": "|  | LRA $($ Acc. $\\uparrow$ ) | WMT16 $($ BLEU $\\uparrow$ ) | WT103 (PPL. $\\downarrow)$ | ImageNet $($ Acc. $\\uparrow$ ) | SC $($ Acc. $\\uparrow$ ) |\n| :--- | :---: | :---: | :---: | :---: | :---: |\n| XFM | 59.24 | 27.97 | 18.66 | 81.80 | $\\boldsymbol{X}$ |\n| S4 | 85.86 | - | 20.95 | - | $\\mathbf{9 7 . 5 0}$ |\n| MEGA | $\\mathbf{8 8 . 2 1}$ | $\\mathbf{2 9 .",
    "mega-2": "1 8}$ | $\\mathbf{1 8 . 0 7}$ | $\\mathbf{8 2 . 3 1}$ | 97.30 |\n\narchitecture (Vaswani et al., 2017) has stood out for its impressive empirical success on a wide range of language and vision tasks, including machine translation (Vaswani et al., 2017; Ott et al., 2018), language understanding (Devlin et al., 2019; Liu et al., 2019), image recognition (Dosovitskiy et al., 2020; Touvron et al., 2021) and genetic sequence modeling (Madani et al., 2020; Jumper et al., 2021), mainly because of the conceptually attractive attention mechanism (Bahdanau et al., 2015; Luong et al., 2015; Vaswani et al., 2017) which directly models interactions between each pair of input tokens. Attention provides the key mechanism that captures contextual information from the entire sequence by modeling pairwise interactions between the inputs at every timestep. However, there are two common drawbacks in the design of attention mechanism: i) weak inductive bias; and ii) quadratic computational complexity. First, the attention mechanism does not assume prior knowledge of the patterns of dependencies between tokens (e.g. positional inductive bias), instead learning to predict the pairwise attention weights directly from data. Second, the cost to compute and store the attention weights is quadratic in the length of the input sequences. Recent studies have shown the limitations of applying Transformers to long sequence tasks, w.r.t both accuracy and efficiency (Tay et al., 2020). In this work, we propose a moving average equipped gated attention mechanism (MEGA) to solve the two weaknesses simultaneously. The key idea is to incorporate inductive biases into the attention mechanism across the timestep dimension, by leveraging the classic exponential moving average (EMA) approach (Hunter, 1986). EMA captures local dependencies that exponentially decay over time (see Figure 1), and has been widely used in time series data modeling (\u00a72). We introduce a multi-dimensional damped form of EMA with learnable coefficients (\u00a73.1), and subsequently develop the moving average equipped gated attention mechanism by integrating the EMA with a variant of the single-head gated attention (Hua et al., 2022) (\u00a73.2). Theoretically, we show that the single-head gated attention is as expressive as the most commonly used multi-head attention (\u00a73.3). Benefiting from the incorporated moving average mechanism, we further propose a variant of MEGA with linear complexity, named MEGA-chunk, which simply chunks input sequences into fixed blocks with minimal loss of contextual information (\u00a73.5). Experimentally, through five sequence modeling tasks across various data types, including long-context sequence modeling, neural machine translation, auto-regressive language modeling, and image and speech classification, we demonstrate that MEGA significantly outperforms a variety of strong baseline models, in terms of both effectiveness and efficiency (\u00a74) (see Table 1). These improvements illustrate the importance of modeling long- and short-term dependencies via different patterns of inductive biases. ![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-03.jpg?height=330&width=1526&top_left_y=295&top_left_x=297)\n\nFigure 1: Illustration of the exponential moving average (EMA) approach, which averages the input values $\\boldsymbol{X}$ with weights decaying exponentially over timesteps. ## 2. Background\n\nIn this section, we set up notations, briefly review two widely used approaches for sequence modeling \u2014 the self-attention mechanism and exponential moving average (EMA)\u2014and discuss the motivation for combining them. We use $\\boldsymbol{X}=\\left\\{\\mathbf{x}_{1}, \\mathbf{x}_{2}, \\ldots, \\mathbf{x}_{n}\\right\\} \\in \\mathbb{R}^{n \\times d}$ to denote a sequence of input representations with length $n$. Let $\\boldsymbol{Y}=\\left\\{\\mathbf{y}_{1}, \\mathbf{y}_{2}, \\ldots, \\mathbf{y}_{n}\\right\\} \\in \\mathbb{R}^{n \\times d}$ be the sequence of output representations of each layer with the same length $n$ as the input $\\boldsymbol{X}$. In this paper, we assume the representations of the input and output sequences have the same dimension $d$. ### 2.1 Self-Attention Mechanism\n\nThe traditional self-attention mechanism is a function:\n\n$$\n\\boldsymbol{Y}=\\operatorname{Attn}(\\boldsymbol{X})=f\\left(\\frac{\\boldsymbol{Q} \\boldsymbol{K}^{T}}{\\tau(\\boldsymbol{X})}\\right) \\boldsymbol{V}\n$$\n\nwhere Attn : $\\mathbb{R}^{n \\times d} \\rightarrow \\mathbb{R}^{n \\times d}$ is the self-attention function. $\\boldsymbol{Q}=\\boldsymbol{X} W_{q}+b_{q}, \\boldsymbol{K}=\\boldsymbol{X} W_{k}+$ $b_{k}$, and $\\boldsymbol{V}=\\boldsymbol{X} W_{v}+b_{v}$ are the sequences of queries, keys and values, with learnable parameters $W_{q}, W_{k}, W_{v} \\in \\mathbb{R}^{d \\times d}$, and $b_{q}, b_{k}, b_{v} \\in \\mathbb{R}^{d} . f(\\cdot)$ is an attention function, e.g. the softmax function $f_{\\text {softmax }}(\\cdot)$ (Bahdanau et al., 2015), or the recently proposed squared ReLU function $f_{\\text {relu }^{2}}(\\cdot)$ (So et al., 2021; Hua et al., 2022). $\\tau(\\boldsymbol{X})$ is a scaling term, which is commonly set to $\\tau(\\boldsymbol{X})=\\sqrt{d}$ for $f_{\\text {softmax }}(\\cdot)$, or $\\tau(\\boldsymbol{X})=n$ for $f_{\\text {relu }}{ }^{2}(\\cdot)$. The commonly used multi-head variant of attention performs the attention function $h$ times in parallel. We can define a matrix $\\boldsymbol{A}=f\\left(\\frac{\\boldsymbol{Q} \\boldsymbol{K}^{T}}{\\tau(\\boldsymbol{X})}\\right) \\in \\mathbb{R}^{n \\times n}$ following (1), which is called the attention matrix, as it specifies the weight of the dependency strength between every pair of tokens in $\\boldsymbol{X}$. Since it models pairwise dependency weights, the matrix $\\boldsymbol{A}$ in principle delivers a flexible and powerful mechanism to learn long-distance dependencies with minimal inductive biases. However, it is in practice a challenging task to recognize all the dependency patterns in $\\boldsymbol{A}$ directly from data, particularly when processing long sequences. Moreover, calculating $\\boldsymbol{A}$ with $h$ attention heads takes $O\\left(h n^{2}\\right)$ time and space, and the quadratic dependency on sequence length becomes a significant bottleneck. ### 2.2 Exponential Moving Average (EMA)\n\nThe moving average is a classic approach for sequential data modeling, which has been widely used in time series data to smooth out short-term fluctuations and highlight long-term trends or cycles. The Exponential Moving Average (EMA) (Winters, 1960; Hunter, 1986), a special\ncase of moving average, applies weighting factors that decrease exponentially. Formally, an EMA recursively calculates the output sequence $\\boldsymbol{Y}$ :\n\n$$\n\\mathbf{y}_{t}=\\boldsymbol{\\alpha} \\odot \\mathbf{x}_{t}+(1-\\boldsymbol{\\alpha}) \\odot \\mathbf{y}_{t-1}\n$$\n\nwhere $\\boldsymbol{\\alpha} \\in(0,1)^{d}$ is the EMA coefficient representing the degree of weighting decrease, and $\\odot$ is the element-wise product. A higher $\\boldsymbol{\\alpha}$ discounts older observations faster (see Figure 1). Using an EMA places a strong inductive bias on the learning of pairwise dependencies: the dependency weight between two tokens decreases exponentially over time with an inputagnostic decay factor $\\boldsymbol{\\alpha}$. This property favors local dependencies, and limits long-distance dependencies. Despite the recurrent formulation in (2), the computation of EMA can be represented as $n$ individual convolutions, which can be computed efficiently using fast Fourier transforms (FFTs) (see Appendix A for details). ### 2.3 Why Combine Attention with EMA? As discussed in Sections 2.1 and 2.2, EMA and attention mechanisms each have their own limitations, despite their wide applications and impressive successes in sequence modeling. By leveraging their properties to complement each other, we propose to embed an EMA into the calculation of the attention matrix $\\boldsymbol{A}$. The resulting model enjoys the benefit from strong inductive bias, while maintaining the capacity to learn complex dependency patterns. Moreover, this integration enables the design of a computationally efficient chunk-wise attention mechanism with linear complexity w.r.t sequence length (\u00a73.5). ## 3. Moving Average Equipped Gated Attention (MEga)\n\nIn this section, we describe in detail our proposed method, moving average equipped gated attention (MEGA). We first introduce multi-dimensional damped EMA (\u00a73.1), which is a key component combined with the single-head gated attention in MEGA (\u00a73.2), and discuss the relationship between MEGA and three closely related models: GRU (Cho et al., 2014), Flash (Hua et al., 2022) and S4 (Gu et al., 2022a). We also provide theoretical justification for the design of single-head gated attention (\u00a73.3). Then, we describe the detailed architecture of each MEga block, including feed-forward and normalization layers (\u00a73.4). At last, we present MEGA-chunk, a variant of MEGA that simply splits input sequences into fixed chunks, reducing time and space complexity from quadratic to linear (\u00a73.5). ### 3.1 Multi-dimensional Damped EMA\n\nMEGA introduces a modification of the standard EMA, named multi-dimensional damped $E M A$, to improve its flexibility and capacity. Damped EMA. Previous studies (McKenzie and Gardner Jr, 2010; Svetunkov, 2016) have shown that relaxing the coupled weights of the previous and current observations ( $\\boldsymbol{\\alpha}$ vs. $1-\\boldsymbol{\\alpha}$ in (2)) produces robust dependency modeling. Inspired by this, Mega allows the damping of the influence of the previous time step:\n\n$$\n\\mathbf{y}_{t}=\\boldsymbol{\\alpha} \\odot \\mathbf{x}_{t}+(1-\\boldsymbol{\\alpha} \\odot \\boldsymbol{\\delta}) \\odot \\mathbf{y}_{t-1}\n$$\n\nwhere $\\boldsymbol{\\delta} \\in(0,1)^{d}$ is the damping factor.",
    "mega-3": "![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-05.jpg?height=497&width=459&top_left_y=299&top_left_x=299)\n(a) Mega architecture. ![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-05.jpg?height=489&width=562&top_left_y=306&top_left_x=787)\n(b) Mega layer. ![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-05.jpg?height=418&width=372&top_left_y=344&top_left_x=1427)\n(c) Single-head attention unit. Figure 2: MEGA - model architecture. Figure (a) shows the overall architecture of each MEgA block. Figure (b) illustrates the gated attention sub-layer equipped with EMA, while Figure (c) displays the details of a single-head attention unit. Multi-dimensional Damped EMA. To further improve the expressiveness of EMA, we introduce a multi-dimensional variant of EMA. Concretely, we first expand each dimension of the input sequence $\\boldsymbol{X}$ individually into $h$ dimensions via an expansion matrix $\\boldsymbol{\\beta} \\in \\mathbb{R}^{\\boldsymbol{d} \\times h}$. Formally, for each dimension $j \\in\\{1,2, \\ldots, d\\}$ :\n\n$$\n\\mathbf{u}_{t}^{(j)}=\\boldsymbol{\\beta}_{j} \\mathbf{x}_{t, j}\n$$\n\nwhere $\\boldsymbol{\\beta}_{j} \\in \\mathbb{R}^{h}$ is the $j$-th row of $\\boldsymbol{\\beta}, \\mathbf{u}_{t}^{(j)} \\in \\mathbb{R}^{h}$ is the expanded $h$-dimensional vector for the $j$-th dimension at timestep $t$. Correspondingly, we extend the shape of $\\boldsymbol{\\alpha}$ and $\\boldsymbol{\\delta}$ from a one-dimensional vector to a two-dimensional matrix, i.e. $\\boldsymbol{\\alpha}, \\boldsymbol{\\delta} \\in \\mathbb{R}^{\\boldsymbol{d} \\times h}$, where $\\boldsymbol{\\alpha}_{j}, \\boldsymbol{\\delta}_{j} \\in \\mathbb{R}^{h}$ denote the $j$-th row of $\\boldsymbol{\\alpha}$ and $\\boldsymbol{\\delta}$, respectively. Then, for each dimension $j$, the damped EMA is applied to the $h$-dimensional hidden space:\n\n$$\n\\begin{aligned}\n\\mathbf{h}_{t}^{(j)} & =\\boldsymbol{\\alpha}_{j} \\odot \\mathbf{u}_{t}^{(j)}+\\left(1-\\boldsymbol{\\alpha}_{j} \\odot \\boldsymbol{\\delta}_{j}\\right) \\odot \\mathbf{h}_{t-1}^{(j)} \\\\\n\\mathbf{y}_{t, j} & =\\boldsymbol{\\eta}_{j}^{T} \\mathbf{h}_{t}^{(j)}\n\\end{aligned}\n$$\n\nwhere $\\mathbf{h}_{t}^{(j)} \\in \\mathbb{R}^{h}$ is the EMA hidden state for the $j$-th dimension at timestep $t . \\boldsymbol{\\eta} \\in \\mathbb{R}^{d \\times h}$ is the projection matrix to map the $h$-dimensional hidden state back to 1-dimensional output $\\mathbf{y}_{t, j} \\in \\mathbb{R} . \\boldsymbol{\\eta}_{j} \\in \\mathbb{R}^{h}$ is the $\\boldsymbol{j}$-th row of $\\boldsymbol{\\eta}$. The output $\\boldsymbol{Y}$ from (5) is denoted as $\\boldsymbol{Y} \\triangleq \\operatorname{EMA}(\\boldsymbol{X})$. Because we do not need to explicitly compute $\\mathbf{h}_{t}^{(j)}$ to get the output $\\mathbf{y}_{t, j}$, and the time and space complexity is similar to the standard EMA in (2) (see Appendix A for the details). Experimental improvements demonstrate its effectiveness (\u00a74). ### 3.2 Moving Average Equipped Gated Attention\n\nThe gated attention mechanism in MegA adopts the Gated Recurrent Unit (GRU; Cho et al. (2014)) and Gated Attention Unit (GAU; Hua et al. (2022)) as the backbone architectures,\nwith an EMA-based sub-layer embedded into the calculation of the attention matrix. Formally, we first use the output from (5) to compute the shared representation in GAU:\n\n$$\n\\begin{aligned}\n\\boldsymbol{X}^{\\prime} & =\\operatorname{EMA}(\\boldsymbol{X}) & \\in \\mathbb{R}^{n \\times d} \\\\\n\\boldsymbol{Z} & =\\phi_{\\text {silu }}\\left(\\boldsymbol{X}^{\\prime} W_{z}+b_{z}\\right) & \\in \\mathbb{R}^{n \\times z}\n\\end{aligned}\n$$\n\nwhere $\\boldsymbol{X}^{\\prime}$ can be regarded as the updated or contextual input, because it encodes contextual information through EMA. $\\boldsymbol{Z}$ is the shared representation with $z$ dimensions, with projection matrix $W_{z} \\in \\mathbb{R}^{d \\times z}$ and bias term $b_{z} \\in \\mathbb{R}^{z}$. $\\phi_{\\text {silu }}$ is the self-gated activation function (SiLU) (Ramachandran et al., 2017; Elfwing et al., 2018). Following GAU, the query and key sequences are computed by applying per-dimension scalars and offsets to $\\boldsymbol{Z}$, and the value sequence is from the original $\\boldsymbol{X}$ :\n\n$$\n\\begin{aligned}\n\\boldsymbol{Q} & =\\boldsymbol{\\kappa}_{q} \\odot \\boldsymbol{Z}+\\boldsymbol{\\mu}_{q} & & \\in \\mathbb{R}^{n \\times z} \\\\\n\\boldsymbol{K} & =\\boldsymbol{\\kappa}_{k} \\odot \\boldsymbol{Z}+\\boldsymbol{\\mu}_{k} & & \\in \\mathbb{R}^{n \\times z} \\\\\n\\boldsymbol{V} & =\\phi_{\\mathrm{silu}}\\left(\\boldsymbol{X} W_{v}+b_{v}\\right) & & \\in \\mathbb{R}^{n \\times v}\n\\end{aligned}\n$$\n\nwhere $\\boldsymbol{\\kappa}_{q}, \\boldsymbol{\\mu}_{q}, \\boldsymbol{\\kappa}_{k}, \\boldsymbol{\\mu}_{k} \\in \\mathbb{R}^{z}$ are the learnable scalars and offsets of queries and keys, respectively. $v$ is the expanded intermediate dimension for the value sequence. The output of attention is computed as follows:\n\n$$\n\\boldsymbol{O}=f\\left(\\frac{\\boldsymbol{Q} \\boldsymbol{K}^{T}}{\\tau(\\boldsymbol{X})}+\\boldsymbol{b}_{\\mathrm{rel}}\\right) \\boldsymbol{V}\n$$\n\nThe graphical specification is displayed in Figure 2 (c). $\\boldsymbol{b}_{\\mathrm{rel}} \\in \\mathbb{R}^{n \\times n}$ is the relative positional bias. We choose $\\boldsymbol{b}_{\\text {rel }}$ from existing approaches, including T5 (Raffel et al., 2020), RoPE (Su et al., 2021), TUPE (Ke et al., 2020) and ALiBi (Press et al., 2021). Subsequently, MEga introduces the reset gate $\\boldsymbol{\\gamma}$, the update gate $\\boldsymbol{\\varphi}$, and computes the candidate activation output $\\hat{\\boldsymbol{H}}$ :\n\n$$\n\\begin{aligned}\n\\boldsymbol{\\gamma} & =\\phi_{\\text {silu }}\\left(\\boldsymbol{X}^{\\prime} W_{\\gamma}+b_{\\gamma}\\right) & & \\in \\mathbb{R}^{n \\times v} \\\\\n\\varphi & =\\phi_{\\text {sigmoid }}\\left(\\boldsymbol{X}^{\\prime} W_{\\varphi}+b_{\\varphi}\\right) & & \\in \\mathbb{R}^{n \\times d} \\\\\n\\hat{\\boldsymbol{H}} & =\\phi_{\\text {silu }}\\left(\\boldsymbol{X}^{\\prime} W_{h}+(\\boldsymbol{\\gamma} \\odot \\boldsymbol{O}) U_{h}+b_{h}\\right) & & \\in \\mathbb{R}^{n \\times d}\n\\end{aligned}\n$$\n\nThe final output $\\boldsymbol{Y}$ is computed with the update gate $\\boldsymbol{\\varphi}$ :\n\n$$\n\\boldsymbol{Y}=\\varphi \\odot \\hat{\\boldsymbol{H}}+(1-\\varphi) \\odot \\boldsymbol{X} \\quad \\in \\mathbb{R}^{n \\times d}\n$$\n\nThe graphical architecture of a MEGA sub-layer is visualized in Figure 2 (b).",
    "mega-4": "Laplace Attention Function. As mentioned in Section 2.1, the softmax function is the most common choice for the attention function $f(\\cdot)$. So et al. (2021) recently introduced the squared ReLU function $f_{\\text {relu }^{2}}(\\cdot)$ via architecture search techniques, which has shown faster convergence speed and competitive generalization performance on language tasks (Hua et al., 2022). However, one issue of $f_{\\text {relu }^{2}}(\\cdot)$ is that neither its range nor its gradient is bounded,\nleading to unstable model training (see Appendix C. 1 for details). To address this issue, we propose a new attention function based on the Laplace function:\n\n$$\nf_{\\text {laplace }}(x ; \\mu, \\sigma)=0.5 \\times\\left[1+\\operatorname{erf}\\left(\\frac{x-\\mu}{\\sigma \\sqrt{2}}\\right)\\right]\n$$\n\nwhere $\\operatorname{erf}(\\cdot)$ is the error function. $\\mu$ and $\\sigma$ are two coefficients that we adjust to approximate\n\n![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-07.jpg?height=58&width=1519&top_left_y=616&top_left_x=303) function are provided in Appendix C. Relation to and Differences from GRU, Flash and S4. The computation of the the reset gate $\\boldsymbol{\\gamma}$, the update gate $\\boldsymbol{\\varphi}$, and the candidate activation output $\\hat{\\boldsymbol{H}}$ in (12-14) is reminiscent of GRUs (Cho et al., 2014). The main difference is that in a GRU the two gates are applied between the hidden states of the current and previous timesteps, while in MEGA they are applied between the outputs from EMA and gated attention sub-layers.",
    "mega-5": "In addition, the output gating mechanism in (15) is similar to the gated residual connection proposed in Parisotto et al. (2020); Xu et al. (2020) to reduce the variance of output $\\boldsymbol{Y}$. The computation of the shared representation $\\boldsymbol{Z}$, together with the sequences of queries, keys and values in (7-10) are inspired from GAU in Flash (Hua et al., 2022). Mega integrates EMA into GAU by computing $\\boldsymbol{Z}$ in (7) from the EMA output $\\boldsymbol{X}^{\\prime}$ rather than the original input $\\boldsymbol{X}$, and combining the GAU output with $\\boldsymbol{X}^{\\prime}$ for the candidate activation $\\hat{\\boldsymbol{H}}$ in (14). Experimental gains over Flash demonstrate the effectiveness of this design chice (\u00a74.1). The multi-dimensional damped EMA can be seen as a simplified variant of a state space model. From this perspective, MEGA is also closely related to S 4 (Gu et al., 2022a), a state space model with structured state matrices. S4 leverages the HiPPO framework (Gu et al., 2020) to initialize its low-rank structured state matrices, and the computation of the convolutional kernel in S4 requires complex fast Fourier transformers (FFTs). The EMA sub-layer in MEGA applies diagonalization on the state matrix and restricts the diagonal elements in the range of $(0,1)$. Thus, the convolution kernel would be a Vandermonde product, which can be computed in an efficient and numerically stable way. Similar diagonalization has been used in a concurrent work S4D (Gu et al., 2022b). Moreover, unlike S4 and S4D, the parameter initialization in MEGA does not rely on the HiPPO framework. ### 3.3 Theoretical Justification of Single-head Gated Attention\n\nSingle-head gated attention has been empirically shown as performant as vanilla multi-head attention Liu et al. (2021); Hua et al. (2022), without any discussions on its theoretical insights. In this section, we provide theoretical justifications of the expressiveness of singlehead gated attention. To facilitate subsequent analysis, we simplify the notations of the multi-head attention. Specifically, we denote the sequences of queries, keys and values as the outputs of three transformations of the input sequence:\n\n$$\n\\boldsymbol{Q}=\\mathcal{Q}(\\boldsymbol{X}), \\quad \\boldsymbol{K}=\\mathcal{K}(\\boldsymbol{X}), \\quad \\boldsymbol{V}=\\mathcal{V}(\\boldsymbol{X})\n$$\n\nwhere $\\mathcal{Q}, \\mathcal{K}, \\mathcal{V}$ are three transformations, such as linear projections. Let $\\boldsymbol{q} \\in \\boldsymbol{Q}=\\left\\{\\boldsymbol{q}_{1}, \\ldots, \\boldsymbol{q}_{n}\\right\\}$ be a single query vector $\\left(\\boldsymbol{q} \\in \\mathbb{R}^{d}\\right)$, and $\\boldsymbol{a}=\\mathcal{A}(\\boldsymbol{q}, \\boldsymbol{K})$ denote the corresponding attention weights of $\\boldsymbol{q}$, where $\\mathcal{A}$ is the attention transformation, i.e. $f(\\cdot)$ in (11). For multi-head attention, a common implementation is to split the query into $h$ heads across the model dimension:\n\n$$\n\\boldsymbol{q}=\\left[\\begin{array}{c}\n\\boldsymbol{q}^{(1)} \\\\\n\\vdots \\\\\n\\boldsymbol{q}^{(h)}\n\\end{array}\\right]\n$$\n\nwhere $\\boldsymbol{q}^{(i)} \\in \\mathbb{R}^{d / h}$, and $i \\in\\{1, \\ldots, h\\}$ is the query of the $i$-th head. $\\boldsymbol{K}$ and $\\boldsymbol{V}$ are split in the same way. The attention weight of the $i$-th head is $\\boldsymbol{a}^{(i)}=\\mathcal{A}\\left(\\boldsymbol{q}^{(i)}, \\boldsymbol{K}^{(i)}\\right)$. Then, the outputs of single-head and multi-head attention are, respectively:\n\n$$\n\\boldsymbol{O}_{\\mathrm{SHA}}=\\boldsymbol{a}^{T} \\boldsymbol{V}=\\left[\\begin{array}{c}\n\\boldsymbol{a}^{T} \\boldsymbol{V}^{(1)} \\\\\n\\vdots \\\\\n\\boldsymbol{a}^{T} \\boldsymbol{V}^{(h)}\n\\end{array}\\right], \\quad \\boldsymbol{O}_{\\mathrm{MHA}}=\\left[\\begin{array}{c}\n\\boldsymbol{a}^{(1)^{T}} \\boldsymbol{V}^{(1)} \\\\\n\\vdots \\\\\n\\boldsymbol{a}^{(h)^{T}} \\boldsymbol{V}^{(h)}\n\\end{array}\\right]\n$$\n\nIt is straightforward to see that $\\boldsymbol{O}_{\\mathrm{MHA}}$ is more expressive than $\\boldsymbol{O}_{\\mathrm{SHA}}$, because $\\boldsymbol{O}_{\\mathrm{MHA}}$ leverages $h$ sets of attention weights. In the single-head gated attention, we introduce a gate vector $\\boldsymbol{\\gamma}=\\mathcal{G}(\\boldsymbol{X})$ for each $\\boldsymbol{q}$, and the output of single-head gated attention is $\\boldsymbol{O}_{\\mathrm{SHGA}}=\\boldsymbol{O}_{\\mathrm{SHA}} \\odot \\boldsymbol{\\gamma}$. The following theorem reveals the equivalence of $\\boldsymbol{O}_{\\mathrm{SHGA}}$ and $\\boldsymbol{O}_{\\mathrm{MHA}}$ w.r.t expressiveness (proof in Appendix B):\n\nTheorem 1 Suppose the transformation $\\mathcal{G}$ is a universal approximator. Then, for each $\\boldsymbol{X}$ there exists $\\gamma=\\mathcal{G}(\\boldsymbol{X})$ such that\n\n$$\n\\boldsymbol{O}_{\\mathrm{SHGA}}=\\boldsymbol{O}_{\\mathrm{MHA}}\n$$\n\nTheorem 1 indicates that by simply introducing the gate vector, $\\boldsymbol{O}_{\\mathrm{SHGA}}$ is as expressive as $\\boldsymbol{O}_{\\mathrm{MHA}}$. In practice, the transformation $\\mathcal{G}$ is commonly modeled by a (shallow) neural network, whose universality of approximation has been extensively studied (Hornik et al., 1989; Yarotsky, 2017; Park et al., 2020). ### 3.4 MegA Blocks\n\nThe MEgA layer (moving average equipped gated attention) is used as a drop-in-replacement for regular attention in Transformer. It is followed by position-wise feed-forward networks (FFNs) and normalization layers to compose one MEGA block. As the gated residual connection has already been included in (15), we omit the original residual connection and directly apply a normalization layer to $\\boldsymbol{Y}$. Concretely,\n\n$$\n\\begin{aligned}\n\\boldsymbol{Y} & =\\operatorname{Norm}(\\operatorname{Mega}(\\boldsymbol{X})) \\\\\n\\boldsymbol{Y}^{\\prime} & =\\operatorname{Norm}(\\operatorname{FFN}(\\boldsymbol{Y})+\\boldsymbol{Y})\n\\end{aligned}\n$$\n\nwhere $\\boldsymbol{Y}^{\\prime}$ is the output of the MEga block. The overall architecture of a MEgA block is shown in Figure 2 (a). In Transformer, the hidden dimension of FFNs is usually set to $d_{\\text {FFN }}=4 d$. To retain a similar model size with each Transformer block, we reduce the hidden dimension of FFN to $d_{\\mathrm{FFN}}=2 d$ and set the expanded dimension $v=2 d$ for the value sequence in (10) throughout this paper, unless specified otherwise. ![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-09.jpg?height=400&width=1531&top_left_y=302&top_left_x=299)\n\nFigure 3: Illustration of the MEgA-chunk model with two chunks of length 3. ### 3.5 Mega-chunk: Mega with Linear Complexity\n\nSo far we have only focused on introducing stronger inductive bias into the attention mechanism, which still has quadratic computational complexity. In this section, we propose MEgA-chunk, a variant of MEgA with linear complexity, which simply applies attention to each local chunk of fixed length. Specifically, we first split the sequences of queries, keys and values in (8-10) into chunks of length $c$. e.g. $\\boldsymbol{Q}=\\left\\{\\boldsymbol{Q}_{1}, \\ldots, \\boldsymbol{Q}_{k}\\right\\}$, where $k=n / c$ is the number of chunks. ${ }^{2}$ The attention operation in (11) is individually applied to each chunk, yielding linear complexity $O\\left(k c^{2}\\right)=O(n c)$ w.r.t $n$. However, this method suffers from the critical limitation of losing contextual information from other chunks. Fortunately, the EMA sub-layer in MEGA mitigates this problem by capturing local contextual information near each token, whose outputs are used as the inputs to the attention sub-layer. As a result, the effective context being exploited by chunk-wise attention can go beyond the chunk boundary. Figure 3 illustrates the largest possible dependency length captured by one MEgA-chunk block. ## 4. Experiments\n\nTo evaluate MEGA, we conduct experiments on five benchmark sequence modeling tasks across various data types, comparing with current state-of-the-art models on each task. All the numbers with $\\ddagger$ indicate results from the baseline models replicated by us. More detailed descriptions, results and analysis are provided in Appendix D. ### 4.1 Long-Context Sequence Modeling\n\nWe begin our experiments with an evaluation on the Long Range Arena (LRA) benchmark recently introduced by Tay et al. (2021), which is designed for the purpose of evaluating sequence models under the long-context scenario. They collect six tasks in this benchmark which are ListOps (Nangia and Bowman, 2018), byte-level text classification (Text; Maas et al. (2011)), byte-level document retrieval (Retrieval; Radev et al. (2013)), image classification on sequences of pixels (Image; Krizhevsky et al. (2009)), Pathfinder (Linsley et al., 2018) and its extreme long version (Path-X; Tay et al. (2021)). These tasks consist of input sequences ranging from 1 K to 16 K tokens and span across a variety of data types and modalities. [^0]Table 2: (Long Range Arena) Accuracy on the full suite of long range arena (LRA) tasks, together with training speed and peak memory consumption comparison on the Text task with input length of 4 K . $\\ddagger$ indicates results replicated by us. | Models | ListOps | Text | Retrieval | Image | Pathfinder | Path-X | Avg. | Speed | Mem. |\n| :--- | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| XFM | 36.37 | 64.27 | 57.46 | 42.44 | 71.40 | $\\boldsymbol{x}$ | 54.39 | - | - |\n| XFM $\\ddagger$ | 37.11 | 65.21 | 79.14 | 42.94 | 71.83 | $\\boldsymbol{x}$ | 59.24 | $1 \\times$ | $1 \\times$ |\n| Reformer | 37.27 | 56.10 | 53.40 | 38.07 | 68.50 | $\\boldsymbol{x}$ | 50.67 | $0.8 \\times$ | $0.24 \\times$ |\n| Linformer | 35.70 | 53.94 | 52.27 | 38.56 | 76.34 | $\\boldsymbol{x}$ | 51.36 | $5.5 \\times$ | $0.10 \\times$ |\n| BigBird | 36.05 | 64.02 | 59.29 | 40.83 | 74.87 | $\\boldsymbol{X}$ | 55.01 | $1.1 \\times$ | $0.30 \\times$ |\n| Performer | 18.01 | 65.40 | 53.82 | 42.77 | 77.05 | $\\boldsymbol{x}$ | 51.41 | $\\mathbf{5 . 7} \\times$ | $\\mathbf{0 . 1 1}$ |\n| Luna-256 | 37.98 | 65.78 | 79.56 | 47.86 | 78.55 | $\\boldsymbol{x}$ | 61.95 | $4.9 \\times$ | $0.16 \\times$ |\n| S4-v1 | 58.35 | 76.02 | 87.09 | 87.26 | 86.05 | 88.10 | 80.48 | - | - |\n| S4-v2 | 59.60 | 86.82 | 90.90 | 88.65 | 94.20 | 96.35 | 86.09 | - | - |\n| S4-v2 $\\ddagger$ | 59.10 | 86.53 | 90.94 | 88.48 | 94.01 | 96.07 | 85.86 | $4.8 \\times$ | $0.14 \\times$ |\n| MEGA | $\\mathbf{6 3 . 1 4}$ | $\\mathbf{9 0 . 4 3}$ | $\\mathbf{9 1 . 2 5}$ | $\\mathbf{9 0 . 4 4}$ | $\\mathbf{9 6 .",
    "mega-6": "0 1}$ | $\\mathbf{9 7 . 9 8}$ | $\\mathbf{8 8 . 2 1}$ | $2.9 \\times$ | $0.31 \\times$ |\n| MEGA-chunk | 58.76 | 90.19 | 90.97 | 85.80 | 94.41 | 93.81 | 85.66 | $5.5 \\times$ | $0.13 \\times$ |\n\nTable 2 compares MEgA against several baselines, including Transformer and its efficient variants, and the state-of-the-art S4 models (both version 1 (Gu et al., 2022a) and version 2 (Gu et al., 2022b)). ${ }^{3}$ To ensure fair comparison, we adjust the number of layers and model dimensions on each task so that MEga has similar number of parameters with S4-v1. For each experiment, we report the average over 5 runs with different random seeds. The tuning information and the model details are provided in the Appendix D.1. On all the six tasks, MEga substantially outperforms all the baselines. We also evaluate MEgA-chunk on each task, by setting the chunk size $c=128$ for all the tasks, except Path-X where $c=4096$. We observe that MEGA-chunk consistently performs well, particularly on the three language tasks. We also examine the speed and memory efficiency of MEga on the byte-level classification task with the input length of 4 K . MEGA-chunk is highly efficient, which is about 5.5 times faster and consumes only $13 \\%$ as much memory as the vanilla Transformer. It is interesting to see that MEgA with full attention field is also much more efficient than Transformer, benefiting from single-head gated attention. Analysis of Multi-dimensional Damped EMA. To demonstrate the effectiveness of the multi-dimensional damped EMA component in MEGA, we performs ablation studies on two LRA tasks - byte-level text classification (Text) and image classification on sequences of pixels (Image). We train MEgA models with EMA dimension $h \\in\\{0,1,2,4,8,16,32\\}$, where $h=0$ indicates removing the EMA component. From the left figure in Figure 4, we see that without the EMA component, model accuracy on both the two tasks declines rapidly. Meanwhile, with a single dimensional EMA $(h=1)$, MEGA obtains significant improvements, demonstrating the importance of incorporating inductive bias via EMA. Analysis of Chunk Size. We further analyze the impact of chunk size $c$ on the same two tasks, by varying $c \\in\\{16,32,64,128,256,512, \\infty\\}$, where $\\infty$ indicates the original MEGA\n\n[^1]![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-11.jpg?height=323&width=978&top_left_y=348&top_left_x=310)\n\nFigure 4: Ablations on EMA dimension and chunk size.",
    "mega-7": "|  | Text | Image |\n| :--- | :---: | :---: |\n| softmax | $\\mathbf{9 0 . 4 3}$ | 89.87 |\n| relu $^{2}$ | 90.08 | 90.22 |\n| laplace | 90.22 | $\\mathbf{9 0 . 4 3}$ |\n\nTable 3: Attention functions. without chunking. The right figure in Figure 4 shows that image data is more sensitive to chunk size than text data. On the Text task, Mega-chunk with even a small chunk size $c=16$ is able to achieve around $90 \\%$ accuracy. On the Image task, MEgA-chunk with $c=16$ achieves around $75 \\%$ accuracy, which is still much better than the vanilla Transformer model. Analysis of Attention Functions. Finally, we evaluate performance with different attention functions. Table 3 shows the accuracy of the three attention functions on the same two tasks. On text data softmax obtains the best accuracy, while on image data it performs the worst. The laplace function achieves the best accuracy on image data and also competitive result on text data, being consistently better than relu ${ }^{2}$. In the following experiments we use softmax for language tasks and laplace for vision and speech ones. ### 4.2 Raw Speech Classification\n\nTo evaluate the capability of MEGA on the long-range modeling of speech signals, we apply MEGA to classify raw speech (with length 16000), rather than using traditional preprocessing (e.g.",
    "mega-8": "convert to MFCC features). Following Gu et al. (2022a), we perform speech classification on the SC10 subset of the Speech Commands dataset (Warden, 2018). We experiment with the MEga-chunk variant with $c=1000$, since the computation of MEga and Transformer can not fit in GPU memory. As shown in Table 4, our MEgA-chunk (base) model with 300K parameters is able to achieve an accuracy of 96.92 that is slightly worse than 97.50 from the state-of-the-art method $\\mathrm{S} 4,{ }^{4}$ while by adding 0.18 M parameters our MEGA-chunk (big) model performs comparably well with S4. ### 4.3 Auto-regressive Language Modeling\n\nWe evaluate Mega on two established language modeling benchmarks - WikiText-103 (Merity et al., 2017) and enwik8 (Hutter, 2006), which are next-token prediction tasks. WikiText103 is a word-level language modeling dataset containing 103M training tokens from Wikipedia articles. Following previous work (Baevski and Auli, 2018; Dai et al., 2019), we adopt adaptive softmax and input embeddings and use a vocabulary of 260 K tokens. Enwik8 is a characterlevel language modeling benchmark that has 100M tokens of unprocessed Wikipedia articles and a vocabulary size of about 200.",
    "mega-9": "At test time, we split the test data into segments and process each segment sequentially. In Table 5, we compare with previous top-performing\n4. Our S4 number is obtained by directly running the official S 4 code and is a bit worse than the original reported number (98.32), due to different data splits - the file reading order is not deterministic across machines with os.listdir. Table 4: (SC-Raw) Accuracy on Speech Commands. |  | SC-Raw |  |\n| :--- | :---: | :---: |\n| Model | \\#Param. | Acc. |\n| XFM | 786 K | $\\boldsymbol{x}$ |\n| S4 $\\ddagger$ | 300 K | $\\mathbf{9 7 . 5 0}$ |\n| MEGA (base) | 300 K | 96.92 |\n| MEGA (big) | 476 K | 97.30 |\n\nTable 5: (Language Modeling) PPL $(\\downarrow)$ on WikiText103 and bpc $(\\downarrow)$ on enwik8. |  | WikiText-103 |  |  | enwik8 |  |\n| :--- | :---: | :---: | :---: | :---: | :---: |\n| Model | \\#Param. | PPL | Speed | \\#Param. | bpc |\n| XFM-adaptive | 247 M | 18.66 | 5.6 k t/s | - | - |\n| XFM-XL | 257 M | 18.30 | - | 41 M | 1.06 |\n| S4 | 249 M | 20.95 | - | - | - |\n| MEGA | 252 M | $\\mathbf{1 8 . 0 7}$ | 48 k t/s | 39 M | $\\mathbf{1 . 0 2}$ |\n\nmodels that are designed to take advantage of longer context, including Transformers (Baevski and Auli, 2018; Al-Rfou et al., 2019) (XFM-adaptive), Transformer-XL (Dai et al., 2019) (XFM-XL) and S4 (Gu et al., 2022a). On both WikiText-103 and enwik8, we obtain very competitive results, outperforming baselines by a large margin while enjoying much faster $(9 \\times)$ inference speed compared to the Transformer model. MEGA can also naturally achieve length extrapolation at inference time to any sequences that are longer than those seen during training due to the recurrent design of the EMA layer. In addition, we can extrapolate to a longer chunk size for MEGA attention due to the use of rotary positional embeddings for training (Su et al., 2021). We describe them in details and provide complete results of using various test-time chunk sizes and segment lengths in Appendix D.3. ### 4.4 Neural Machine Translation\n\nTo evaluate MEgA on sequence-to-sequence modeling, we conduct experiments on a standard machine translation benchmark, WMT 2016 English-German news translation (WMT'16), consisting of 4.5 M sentence pairs of training data. Following Ott et al. (2018), we validate on newstest13 and test on newstest14. The MEgA models closely follow the architecture of Transformer-base: 6 encoder and decoder layers with model dimension $d=512$. Table 6 presents the BLEU scores on the test sets of WMT'16 from two directions: $\\mathrm{EN} \\rightarrow \\mathrm{DE}$ and $\\mathrm{DE} \\rightarrow \\mathrm{EN}$. For each experiment, we report the average of both tokenized and SacreBLEU ${ }^{5}$ (Post, 2018) scores with 5 different random seeds. MEGA-base significantly outperforms Transformer-base by over 1.1 BLEU. We also report results of MEgA with the Laplace attention function, which slightly but consistently underperforms Softmax. ### 4.5 Image Classification\n\nTo evaluate MEGA on a large-scale image classification task, we conduct experiments on the Imagenet- $1 k$ (Deng et al., 2009) dataset, which consists of 1.28 M training images and 50 K validation images from 1000 classes. Top-1 accuracy on the validation set is reported in Table 7 to assess various models. Mega obtains about $0.5 \\%$ accuracy improvement over DeiT-B (Touvron et al., 2021). We mostly follow DeiT's approach of applying several data augmentation and regularization methods that facilitate the training process, including Cutmix (Yun et al., 2019), Mixup (Zhang et al., 2017), stochastic depth (Huang et al., 2016), repeated augmentation (Hoffer et al., 2020), Rand-Augment (Cubuk et al., 2020), and random erasing (Zhong et al., 2020). These methods were highly tuned towards optimizing\n\n[^2]Table 6: (WMT'16) Test BLEU scores. |  | EN-DE |  | DE-EN |  |\n| :--- | :---: | :---: | :---: | :---: |\n| Model | Token. | Sacre. | Token. | Sacre. |\n| XFM-base | 27.30 | - | - | - |\n| XFM-base $\\ddagger$ | 27.97 | 27.33 | 31.92 | 31.33 |\n| MEGA-softmax | $\\mathbf{2 9 .",
    "mega-10": "1 8}$ | $\\mathbf{2 8 .",
    "mega-11": "4 7}$ | $\\mathbf{3 2 . 9 0}$ | $\\mathbf{3 2 . 3 5}$ |\n| MEGA-laplace | 28.95 | 28.27 | 32.81 | 32.22 |\n\nTable 7: (ImageNet) Top-1 accuracy. | Model | Img. size | \\#Param. | Acc. |\n| :--- | :---: | :---: | :---: |\n| ResNet-152 | $224^{2}$ | 60 M | 78.3 |\n| VIT-B | $384^{2}$ | 86 M | 77.9 |\n| DeiT-B | $224^{2}$ | 86 M | 81.8 |\n| MeGA | $224^{2}$ | 90 M | $\\mathbf{8 2 . 3}$ |\n\nthe performance of DeiT, which might be sub-optimal for MEGA. Exploring the optimal data augmentation and regularization methods for MEGA is an interesting direction for future work. More training details are presented in the Appendix D.5. ## 5. Related Work\n\nA number of techniques have been recently introduced to address the two issues of Transformer models; we only mention a few here due to space limits. Inductive Bias. To incorporate stronger inductive bias into the attention mechanism, one research direction focuses on injecting position information via advanced positional encoding methods, including absolute and relative positional embeddings (Vaswani et al., 2017; Huang et al., 2020; Ke et al., 2020), and relative positional biases (Su et al., 2021; Press et al., 2021). Another line of research combines the attention mechanism with other neural architectures with intrinsic strong inductive bias, such as convolutional (Gehring et al., 2017; Dai et al., 2021) and recurrence (Dai et al., 2019; Rae et al., 2020; Lei, 2021). Computational Efficiency. Many advanced variants of Transformer models ('xformers') (Tay et al., 2020, 2021) have recently emerged to improve the time and memory efficiency. Popular techniques include sparse attention patterns (Parmar et al., 2018; Beltagy et al., 2020; Kitaev et al., 2020), low-rank approximations of the attention matrix (Wang et al., 2020; Ma et al., 2021), and approximations through kernelization (Choromanski et al., 2020; Peng et al., 2021). Although these models demonstrate better asymptotic complexity for long sequences, their efficiency gains are less prominent for moderate length sequences and their performance remains behind that of Transformers with regular attention. Convolutional Neural Networks with Continuous Kernels. As EMA and more general state space models such as S4 can be regarded as a convolution transform with kernel size equal to the sequence length, MEGA is also relevant with CNNs with continuous kernels, including CKConv (Romero et al., 2021), FlexConv (Romero et al., 2022a) and CCNN (Romero et al., 2022b). ## 6. Conclusion\n\nWe have introduced MEGA, a simple, efficient and effective neural architecture used as a drop-in replacement for regular multi-head attention. By leveraging the classic exponential moving average (EMA) approach, MEGA is capable of incorporating stronger inductive biases into the attention mechanism. Moreover, the EMA approach enables the design of\n\nMEgA-chunk, an efficient variant of MEGA with linear complexity. On five sequence modeling tasks across various data types, MEGA achieves impressive improvements over a variety of strong baselines, including previous state-of-the-art systems. These improvements lead to a potential direction of future work to apply MEGA for multi-modality modeling. ## References\n\nRami Al-Rfou, Dokook Choe, Noah Constant, Mandy Guo, and Llion Jones. Character-level language modeling with deeper self-attention. In Proceedings of the AAAI conference on artificial intelligence, volume 33, pages 3159-3166, 2019. Alexei Baevski and Michael Auli. Adaptive input representations for neural language modeling. In International Conference on Learning Representations, 2018. Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly learning to align and translate. In International Conference on Learning Representations (ICLR), 2015. Iz Beltagy, Matthew E Peters, and Arman Cohan. Longformer: The long-document transformer. arXiv preprint arXiv:2004.05150, 2020. Kyunghyun Cho, Bart van Merri\u00ebnboer, Dzmitry Bahdanau, and Yoshua Bengio. On the properties of neural machine translation: Encoder-decoder approaches. Syntax, Semantics and Structure in Statistical Translation, page 103, 2014. Krzysztof Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos, Peter Hawkins, Jared Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. Rethinking attention with performers. arXiv preprint arXiv:2009.14794, 2020. Ekin D Cubuk, Barret Zoph, Jonathon Shlens, and Quoc V Le. Randaugment: Practical automated data augmentation with a reduced search space. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition workshops, pages 702-703, 2020. Zihang Dai, Zhilin Yang, Yiming Yang, Jaime G Carbonell, Quoc Le, and Ruslan Salakhutdinov. Transformer-xl: Attentive language models beyond a fixed-length context. In Proceedings of the 57 th Annual Meeting of the Association for Computational Linguistics, pages 2978-2988, 2019. Zihang Dai, Hanxiao Liu, Quoc V Le, and Mingxing Tan. Coatnet: Marrying convolution and attention for all data sizes. Advances in Neural Information Processing Systems, 34: $3965-3977,2021$. Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database.",
    "mega-12": "In 2009 IEEE conference on computer vision and pattern recognition, pages $248-255$. Ieee, 2009. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational\n\nLinguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171-4186, 2019. Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An image is worth $16 \\times 16$ words: Transformers for image recognition at scale.",
    "mega-13": "In International Conference on Learning Representations (ICLR-2020), 2020. Stefan Elfwing, Eiji Uchibe, and Kenji Doya. Sigmoid-weighted linear units for neural network function approximation in reinforcement learning. Neural Networks, 107:3-11, 2018. Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N Dauphin. Convolutional sequence to sequence learning. In International conference on machine learning (ICML-2017), pages 1243-1252. PMLR, 2017. Christoph Goller and Andreas Kuchler. Learning task-dependent distributed representations by backpropagation through structure. In Neural Networks, 1996., IEEE International Conference on, volume 1, pages 347-352. IEEE, 1996. Albert Gu, Tri Dao, Stefano Ermon, Atri Rudra, and Christopher R\u00e9. Hippo: Recurrent memory with optimal polynomial projections. Advances in Neural Information Processing Systems, 33:1474-1487, 2020. Albert Gu, Karan Goel, and Christopher R\u00e9. Efficiently modeling long sequences with structured state spaces. In International Conference on Learning Representations (ICLR2022), 2022a. Albert Gu, Ankit Gupta, Karan Goel, and Christopher R\u00e9. On the parameterization and initialization of diagonal state space models. arXiv preprint arXiv:2206.11893, 2022b. Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural computation, 9 $(8): 1735-1780,1997$. Elad Hoffer, Tal Ben-Nun, Itay Hubara, Niv Giladi, Torsten Hoefler, and Daniel Soudry. Augment your batch: Improving generalization through instance repetition. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 81298138, 2020. Kurt Hornik, Maxwell Stinchcombe, and Halbert White. Multilayer feedforward networks are universal approximators. Neural networks, 2(5):359-366, 1989. Weizhe Hua, Zihang Dai, Hanxiao Liu, and Quoc Le. Transformer quality in linear time. In International Conference on Machine Learning (ICML-2022), pages 9099-9117. PMLR, 2022 . Gao Huang, Yu Sun, Zhuang Liu, Daniel Sedra, and Kilian Q Weinberger. Deep networks with stochastic depth. In European conference on computer vision, pages 646-661. Springer, 2016 . Zhiheng Huang, Davis Liang, Peng Xu, and Bing Xiang. Improve transformer models with better relative position embeddings. In Findings of the Association for Computational Linguistics (EMNLP-2020), pages 3327-3335, 2020. J Stuart Hunter. The exponentially weighted moving average. Journal of quality technology, 18(4):203-210, 1986. Marcus Hutter. The human knowledge compression contest. 2006. URL http://prize. hutter1.net/. John Jumper, Richard Evans, Alexander Pritzel, Tim Green, Michael Figurnov, Olaf Ronneberger, Kathryn Tunyasuvunakool, Russ Bates, Augustin \u017d\u00eddek, Anna Potapenko, et al. Highly accurate protein structure prediction with alphafold. Nature, 596(7873):583-589, 2021 . Guolin Ke , Di He, and Tie-Yan Liu. Rethinking positional encoding in language pre-training. In International Conference on Learning Representations (ICLR-2020), 2020. Yoon Kim. Convolutional neural networks for sentence classification.",
    "mega-14": "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP-2014), pages 1746-1751, Doha, Qatar, October 2014. Association for Computational Linguistics. Nikita Kitaev, \u0141ukasz Kaiser, and Anselm Levskaya. Reformer: The efficient transformer.",
    "mega-15": "arXiv preprint arXiv:2001.04451, 2020. Alex Krizhevsky et al. Learning multiple layers of features from tiny images. Technical Report. University of Toronto, 2009. Tao Lei. When attention meets fast recurrence: Training language models with reduced compute. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 7633-7648, 2021. Drew Linsley, Junkyung Kim, Vijay Veerabadran, Charles Windolf, and Thomas Serre. Learning long-range spatial dependencies with horizontal gated recurrent units. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett, editors, Advances in Neural Information Processing Systems, volume 31. Curran Associates, Inc., 2018. Hanxiao Liu, Zihang Dai, David So, and Quoc V Le. Pay attention to mlps. Advances in Neural Information Processing Systems, 34:9204-9215, 2021. Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining approach.",
    "mega-16": "arXiv preprint arXiv:1907.11692, 2019. Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-based neural machine translation. In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1412-1421, 2015. Xuezhe Ma. Apollo: An adaptive parameter-wise diagonal quasi-newton method for nonconvex stochastic optimization.",
    "mega-17": "arXiv preprint arXiv:2009.13586, 2020. Xuezhe Ma, Xiang Kong, Sinong Wang, Chunting Zhou, Jonathan May, Hao Ma, and Luke Zettlemoyer. Luna: Linear unified nested attention.",
    "mega-18": "Advances in Neural Information Processing Systems, 34:2441-2453, 2021. Andrew Maas, Raymond E Daly, Peter T Pham, Dan Huang, Andrew Y Ng, and Christopher Potts. Learning word vectors for sentiment analysis. In Proceedings of the 49 th annual meeting of the association for computational linguistics: Human language technologies, pages $142-150,2011$. Ali Madani, Bryan McCann, Nikhil Naik, Nitish Shirish Keskar, Namrata Anand, Raphael R Eguchi, Possu Huang, and Richard Socher. Progen: Language modeling for protein generation. bioRxiv, 2020. Eddie McKenzie and Everette S Gardner Jr. Damped trend exponential smoothing: a modelling viewpoint. International Journal of Forecasting, 26(4):661-665, 2010. Harsh Mehta, Ankit Gupta, Ashok Cutkosky, and Behnam Neyshabur. Long range language modeling via gated state spaces. arXiv preprint arXiv:2206.13947, 2022. Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. Pointer sentinel mixture models. In International Conference on Learning Representations, 2017. URL https://openreview.net/forum?id=Byj72udxe. Nikita Nangia and Samuel Bowman. Listops: A diagnostic dataset for latent tree learning.",
    "mega-19": "In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Student Research Workshop, pages 92-99, 2018. Myle Ott, Sergey Edunov, David Grangier, and Michael Auli. Scaling neural machine translation. In Proceedings of the Third Conference on Machine Translation: Research Papers, pages 1-9, 2018. Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, and Michael Auli. fairseq: A fast, extensible toolkit for sequence modeling.",
    "mega-20": "In Proceedings of NAACL-HLT 2019: Demonstrations, 2019. Emilio Parisotto, Francis Song, Jack Rae, Razvan Pascanu, Caglar Gulcehre, Siddhant Jayakumar, Max Jaderberg, Raphael Lopez Kaufman, Aidan Clark, Seb Noury, et al. Stabilizing transformers for reinforcement learning. In International conference on machine learning, pages 7487-7498. PMLR, 2020. Sejun Park, Chulhee Yun, Jaeho Lee, and Jinwoo Shin. Minimum width for universal approximation.",
    "mega-21": "arXiv preprint arXiv:2006.08859, 2020. Niki Parmar, Ashish Vaswani, Jakob Uszkoreit, Lukasz Kaiser, Noam Shazeer, Alexander Ku, and Dustin Tran. Image transformer. In International Conference on Machine Learning (ICML-2018), pages 4055-4064. PMLR, 2018. Hao Peng, Nikolaos Pappas, Dani Yogatama, Roy Schwartz, Noah Smith, and Lingpeng Kong. Random feature attention. In International Conference on Learning Representations, 2021. URL https://openreview.net/forum?id=QtTKTdVrFBB. Matt Post. A call for clarity in reporting BLEU scores. In Proceedings of the Third Conference on Machine Translation: Research Papers, pages 186-191, Belgium, Brussels, 2018. Association for Computational Linguistics. Ofir Press, Noah Smith, and Mike Lewis. Train short, test long: Attention with linear biases enables input length extrapolation. In International Conference on Learning Representations (ICLR-2021), 2021. Dragomir R Radev, Pradeep Muthukrishnan, Vahed Qazvinian, and Amjad Abu-Jbara. The acl anthology network corpus. Language Resources and Evaluation, 47(4):919-944, 2013. Jack W Rae, Anna Potapenko, Siddhant M Jayakumar, Chloe Hillier, and Timothy P Lillicrap. Compressive transformers for long-range sequence modeling. In International Conference on Learning Representations (ICLR-2020), 2020. Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J Liu, et al. Exploring the limits of transfer learning with a unified text-to-text transformer.",
    "mega-22": "J. Mach. Learn. Res., 21(140):1-67, 2020. Prajit Ramachandran, Barret Zoph, and Quoc V Le. Swish: a self-gated activation function.",
    "mega-23": "arXiv preprint arXiv:1710.05941, 7(1):5, 2017. David W Romero, Anna Kuzina, Erik J Bekkers, Jakub Mikolaj Tomczak, and Mark Hoogendoorn. Ckconv: Continuous kernel convolution for sequential data. In International Conference on Learning Representations, 2021. David W Romero, Robert-Jan Bruintjes, Jakub Mikolaj Tomczak, Erik J Bekkers, Mark Hoogendoorn, and Jan van Gemert. Flexconv: Continuous kernel convolutions with differentiable kernel sizes. In International Conference on Learning Representations, 2022a. David W Romero, David M Knigge, Albert Gu, Erik J Bekkers, Efstratios Gavves, Jakub M Tomczak, and Mark Hoogendoorn. Towards a general purpose cnn for long range dependencies in nd. arXiv preprint arXiv:2206.03398, 2022b. Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words with subword units. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1715-1725, 2016. David So, Wojciech Ma\u0144ke, Hanxiao Liu, Zihang Dai, Noam Shazeer, and Quoc V Le. Searching for efficient transformers for language modeling. Advances in Neural Information Processing Systems, 34:6010-6022, 2021. Emma Strubell, Patrick Verga, David Belanger, and Andrew McCallum. Fast and accurate entity recognition with iterated dilated convolutions. In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing (EMNLP-2017), pages 2670-2680, Copenhagen, Denmark, September 2017. Association for Computational Linguistics. Jianlin Su, Yu Lu, Shengfeng Pan, Bo Wen, and Yunfeng Liu. Roformer: Enhanced transformer with rotary position embedding.",
    "mega-24": "arXiv preprint arXiv:2104.09864, 2021. Ivan Svetunkov. Complex exponential smoothing. Lancaster University (United Kingdom), 2016. Yi Tay, Mostafa Dehghani, Dara Bahri, and Donald Metzler. Efficient transformers: A survey. arXiv preprint arXiv:2009.06732, 2020. Yi Tay, Mostafa Dehghani, Samira Abnar, Yikang Shen, Dara Bahri, Philip Pham, Jinfeng Rao, Liu Yang, Sebastian Ruder, and Donald Metzler. Long range arena : A benchmark for efficient transformers. In International Conference on Learning Representations, 2021. URL https://openreview.net/forum?id=qVyeW-grC2k. Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, and Herv\u00e9 J\u00e9gou. Training data-efficient image transformers \\& distillation through attention. In International Conference on Machine Learning, pages 10347-10357. PMLR, 2021. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information processing systems, pages 5998-6008, 2017. Sinong Wang, Belinda Li, Madian Khabsa, Han Fang, and Hao Ma. Linformer: Self-attention with linear complexity.",
    "mega-25": "arXiv preprint arXiv:2006.04768, 2020. Pete Warden. Speech commands: A dataset for limited-vocabulary speech recognition.",
    "mega-26": "arXiv preprint arXiv:1804.03209, 2018. Peter R Winters. Forecasting sales by exponentially weighted moving averages. Management science, 6(3):324-342, 1960 . Hongfei Xu, Qiuhui Liu, Deyi Xiong, and Josef van Genabith. Transformer with depth-wise lstm. arXiv preprint arXiv:2007.06257, 2020. Dmitry Yarotsky. Error bounds for approximations with deep relu networks.",
    "mega-27": "Neural Networks, $94: 103-114,2017$. Sangdoo Yun, Dongyoon Han, Seong Joon Oh, Sanghyuk Chun, Junsuk Choe, and Youngjoon Yoo. Cutmix: Regularization strategy to train strong classifiers with localizable features. In Proceedings of the IEEE/CVF international conference on computer vision, pages $6023-6032,2019$. Hongyi Zhang, Moustapha Cisse, Yann N Dauphin, and David Lopez-Paz. mixup: Beyond empirical risk minimization. arXiv preprint arXiv:1710.09412, 2017. Zhun Zhong, Liang Zheng, Guoliang Kang, Shaozi Li, and Yi Yang. Random erasing data augmentation. In Proceedings of the AAAI conference on artificial intelligence, volume 34, pages $13001-13008,2020$. ## Appendix: Mega: Moving Average Equipped Gated Attention\n\n## Appendix A. Efficient Computation of Multi-dimensional Damped EMA\n\nNote that the computation of the multi-dimensional damped EMAs of different dimensions are entirely independent of each other. Without loss of generality, we set $d=1$ and omit the dimension index $j$ in the following formulations. We denote the initial hidden state as $\\boldsymbol{h}_{0}$. The multi-dimensional damped EMA defined in (5) can be vectorized into the following formulation:\n\n$$\n\\begin{aligned}\n& \\mathbf{h}_{t}=\\boldsymbol{\\alpha} \\odot \\mathbf{u}_{t}+(1-\\boldsymbol{\\alpha} \\odot \\boldsymbol{\\delta}) \\odot \\mathbf{h}_{t-1} \\\\\n& \\mathbf{y}_{t}=\\boldsymbol{\\eta}^{T} \\mathbf{h}_{t}\n\\end{aligned}\n$$\n\nwhere $\\boldsymbol{\\alpha}, \\boldsymbol{\\delta}$, and $\\boldsymbol{\\eta} \\in \\mathbb{R}^{h}$. $\\mathbf{u}_{t}=\\boldsymbol{\\beta} \\mathbf{x}_{t} \\in \\mathbb{R}^{h}$ and $\\mathbf{h}_{t} \\in \\mathbb{R}^{h}$ is the EMA hidden state at timestep $t$. Let's denote $\\boldsymbol{\\phi}=1-\\boldsymbol{\\alpha} \\odot \\boldsymbol{\\delta}$. Then, unrolling the above two equations explicitly yields:\n\n$$\n\\begin{array}{lll}\n\\mathbf{h}_{1}=\\boldsymbol{\\phi} \\odot \\mathbf{h}_{0}+\\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{1} & \\mathbf{h}_{2}=\\boldsymbol{\\phi}^{2} \\odot \\mathbf{h}_{0}+\\boldsymbol{\\phi} \\odot \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{1}+\\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{2} & \\ldots \\\\\n\\mathbf{y}_{1}=\\boldsymbol{\\eta}^{T} \\boldsymbol{\\phi} \\odot \\mathbf{h}_{0}+\\boldsymbol{\\eta}^{T} \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{1} & \\mathbf{y}_{2}=\\boldsymbol{\\eta}^{T} \\boldsymbol{\\phi}^{2} \\odot \\mathbf{h}_{0}+\\boldsymbol{\\eta}^{T} \\boldsymbol{\\phi} \\odot \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{1}+\\boldsymbol{\\eta}^{T} \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{2} & \\ldots\n\\end{array}\n$$\n\nThis can be written into a vectorized formula:\n\n$$\n\\begin{aligned}\n\\mathbf{y}_{t} & =\\boldsymbol{\\eta}^{T} \\boldsymbol{\\phi}^{t} \\odot \\mathbf{h}_{0}+\\boldsymbol{\\eta}^{T} \\boldsymbol{\\phi}^{t-1} \\odot \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{1}+\\ldots+\\boldsymbol{\\eta}^{T} \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta} \\mathbf{x}_{t} \\\\\n\\mathbf{y} & =\\mathcal{K} * \\mathbf{x}+\\boldsymbol{\\eta}^{T} \\boldsymbol{\\phi}^{t} \\odot \\mathbf{h}_{0}\n\\end{aligned}\n$$\n\nwhere $*$ is the convolution transform with kernel $\\mathcal{K} \\in \\mathbb{R}^{n}$ :\n\n$$\n\\mathcal{K}=\\left(\\boldsymbol{\\eta}^{T}(\\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta}), \\boldsymbol{\\eta}^{T}(\\boldsymbol{\\phi} \\odot \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta}), \\ldots, \\boldsymbol{\\eta}^{T}\\left(\\boldsymbol{\\phi}^{t} \\odot \\boldsymbol{\\alpha} \\odot \\boldsymbol{\\beta}\\right)\\right. $$\n\nIn the proposed multi-dimensional damped EMA, $\\mathcal{K}$ can be efficiently computed by the Vandermonde product.",
    "mega-28": "With $K$ provided, the output $\\mathbf{y}$ in (25) can be computed efficiently with FFTs. ## Appendix B. Proof of Theorem 1\n\nProof We split $\\gamma$ into $h$ heads in the same way as $\\boldsymbol{Q}, \\boldsymbol{K}$, and $\\boldsymbol{V}$ :\n\n$$\n\\gamma=\\left[\\begin{array}{c}\n\\gamma^{(1)} \\\\\n\\vdots \\\\\n\\gamma^{(h)}\n\\end{array}\\right]\n$$\n\nThen we have\n\n$$\n\\boldsymbol{O}_{\\mathrm{SHGA}}=\\boldsymbol{a}^{T} \\boldsymbol{V} \\odot \\boldsymbol{\\gamma}=\\left[\\begin{array}{c}\n\\boldsymbol{a}^{T} \\boldsymbol{V}^{(1)} \\odot \\boldsymbol{\\gamma}^{(1)} \\\\\n\\vdots \\\\\n\\boldsymbol{a}^{T} \\boldsymbol{V}^{(h)} \\odot \\boldsymbol{\\gamma}^{(h)}\n\\end{array}\\right]\n$$\n\nTo prove Theorem 1, we need to find $\\boldsymbol{\\gamma}$ such that\n\n$$\n\\boldsymbol{a}^{T} \\boldsymbol{V}^{(i)} \\odot \\boldsymbol{\\gamma}^{(i)}=\\boldsymbol{a}^{(i)^{T}} \\boldsymbol{V}^{(i)} \\Longleftrightarrow \\boldsymbol{\\gamma}^{(i)}=\\boldsymbol{a}^{(i)^{T}} \\boldsymbol{V}^{(i)} \\oslash \\boldsymbol{a}^{T} \\boldsymbol{V}^{(i)}, \\forall i \\in\\{1, \\ldots, h\\}\n$$\n\nwhere $\\oslash$ is the element-wise divide operation. Since $\\mathcal{G}(\\boldsymbol{X})$ is a universal approximator and $\\boldsymbol{Q}$, $\\boldsymbol{K}, \\boldsymbol{V}$ and $\\boldsymbol{a}$ are all transformed from $\\boldsymbol{X}, \\boldsymbol{\\gamma}$ can theoretically recover $\\boldsymbol{a}^{(i)^{T}} \\boldsymbol{V}^{(i)} \\oslash \\boldsymbol{a}^{T} \\boldsymbol{V}^{(i)}, \\forall \\boldsymbol{X}$. ## Appendix C. Laplace Attention Function\n\n![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-21.jpg?height=469&width=1493&top_left_y=750&top_left_x=311)\n\nFigure 5: Laplace vs. $\\operatorname{ReLU}^{2}$. To approximate the squared ReLU function with the Laplace function in (16), we need to select proper coefficients $\\mu$ and $\\sigma$. We derive the values of $\\mu$ and $\\sigma$ by solving the following two equations at $x=\\sqrt{2}$ :\n\n$$\n\\begin{aligned}\n& f_{\\text {relu } 2}(\\sqrt{2})=f_{\\text {laplace }}(\\sqrt{2}) \\\\\n& f_{\\text {relu } 2}^{\\prime}(\\sqrt{2})=f_{\\text {laplace }}^{\\prime}(\\sqrt{2})\n\\end{aligned}\n$$\n\nThe Eq. (27) delivers $\\mu=\\sqrt{1 / 2}$ and Eq. 28 subsequently provides $\\sigma=\\sqrt{1 / 4 \\pi}$. Figure 5 visualizes the two functions. ## C. 1 Stability: Laplace vs. Squared ReLU\n\nBesides performance improvements, we also investigate the stability of the two attention functions. We conduct experiments on the LRA Pathfinder task with Mega models with the two functions. Figure 5 presents the accuracy on the validation set across training epochs. We observe that Laplace is much more stable than $\\operatorname{ReLU}^{2}$. ## Appendix D. Experimental Details\n\n## D. 1 Long Range Arena (LRA)\n\nFor all tasks, we closely follow Tay et al. (2020) for details such as data preprocessing, data split, etc. The hyper-parameters of MEga models on these tasks are listed in Table 8. Table 8: Hyper-parameters of MEGA models on LRA and raw speech classification tasks. BSZ is batch size, LR is learning rate and WD is weight decay. BN, LN and SN refer to Batch Normalization, Layer Normalization and Scale Normalization. | Task | Depth | $d_{\\text {model }}$ | $d_{\\text {FFN }}$ | $z$ | $v$ | $h$ | Attn-FN | Norm | Pre-norm | BSZ | LR | Dropout | WD | Epochs |\n| :--- | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| ListOps | 6 | 80 | 160 | 64 | 160 | 16 | softmax | LN | False | 64 | 0.001 | 0.1 | 0.01 | 60 |\n| Text | 4 | 128 | 256 | 64 | 256 | 16 | softmax | SN | False | 50 | 0.004 | 0.1 | 0.01 | 50 |\n| Retrieval | 6 | 128 | 256 | 64 | 256 | 16 | softmax | SN | False | 64 | 0.003 | 0.1 | 0.04 | 40 |\n| Image | 8 | 160 | 320 | 96 | 320 | 16 | laplace | BN | True | 50 | 0.01 | 0.0 | 0.02 | 200 |\n| Pathfinder | 6 | 128 | 256 | 64 | 256 | 16 | laplace | BN | True | 128 | 0.01 | 0.0 | 0.01 | 200 |\n| Path-X | 4 | 64 | 128 | 32 | 128 | 16 | laplace | BN | True | 128 | 0.01 | 0.0 | 0.01 | 100 |\n| SC-Raw (base) | 6 | 60 | 120 | 30 | 120 | 16 | laplace | BN | True | 20 | 0.01 | 0.0 | 0.01 | 200 |\n| SC-Raw (big) | 6 | 72 | 144 | 36 | 144 | 16 | laplace | BN | True | 20 | 0.008 | 0.0 | 0.01 | 200 |\n\n## D. 2 Raw Speech Classification\n\nFollowing Gu et al. (2022a), we perform speech classification on the SC10 subset of the Speech Commands dataset (Warden, 2018), which is a 10 -class classification task. The chunk size of MEgA-chunk is 1000.",
    "mega-29": "Other hyper-parameters are listed in Table 8. ## D. 3 Language Modeling\n\nTraining details We use the data of WikiText-103 and enwik8 and their splits provided by Dai et al. (2019). At training time, we split the training data into segments; each segment contains $m$ consecutive chunks, where the chunk size is the effective attention length. $m$ is a random integer variable uniformly sampled from $[c l, c h]$. We use $[c l, c h]=[2,6]$ for WikiText-103 and $[c l, c h]=[2,4]$ for enwik8. Other training hyperparameters including optimizer, learning rate scheduler and architecture are presented in Table 9. Length extrapolation at inference time We employ MEgA-chunk (\u00a73.5) for training and set the attention chunk size to be 1024 and 2048 for WikiText-103 and enwik8 respectively. To use a longer Mega attention length at inference time than the one used at training time (i.e. 1024 or 2048), we apply rotary positional embedding ( Su et al., 2021) to the attention sublayer. At test time, we split the test data into $K$ segments and sequentially process each segment by $m$ chunks, i.e. the maximum context length of each segment is \\#test tokens In Table 5, we report test results that use longer chunk sizes (attention lengths) of 2048 and 4096 for WikiText-103 and enwik8 respectively. MEGA can naturally extrapolate at inference time to sequences longer than those seen during training due to the recurrent design of the EMA layer. That design enables the inputs of each chunk to access the historic context through EMA as illustrated in Figure 3. On the other hand, due to the use of rotary positional embeddings, attention can be performed on longer chunk sizes at test time than those seen during training. We hope these two types of length extrapolation are clear to readers. We provide the ablation studies on these two types of length extrapolation below,\n\n![](https://cdn.mathpix.com/cropped/2024_09_12_4e2f7f37acb16cad0f07g-23.jpg?height=469&width=1476&top_left_y=354&top_left_x=313)\n\nFigure 6: Ablation studies of using different context lengths and attention lengths on WikiText-103. i.e. extrapolation to longer context by increasing input sequence lengths and extrapolation to longer attention lengths by increasing the chunk size. Ablations on context lengths First, we fix the chunk size to be 2048 and vary $K$ within $[100,75,50,25,15,10,5]$ corresponding to maximum context tokens of $[2.5 \\mathrm{~K}, 3.3 \\mathrm{~K}, 4.9 \\mathrm{~K}, 9.8 \\mathrm{~K}$, $16 \\mathrm{~K}, 25 \\mathrm{~K}, 49 \\mathrm{~K}]$. We plot the test PPL as we increase the context length in the left of Figure 6. Although at training time, the maximum context length the model has seen is 6144, MEgA can extrapolate to longer context lengths. The plot shows that PPL decreases as the context length is increased and the improvements saturate when the context length is longer than 25K.",
    "mega-30": "This is consistent with the observations in Press et al. (2021). Ablations on attention chunk sizes Next, we fix the context length to be 25 K and increase the chunk size from 512 to 3072 . As shown in the right side of Figure 6, MEgA consistently improves as we increase the attention length although it only uses an attention length of 1024 during training. This contradicts with the findings in Alibi (Press et al., 2021), which finds that rotary embeddings don't generalize to longer lengths and result in higher PPL. Table 9: Hyper-parameters of models for language modeling. |  | WikiText-103 | enwik8 |\n| :--- | :---: | :---: |\n| Batch Size $\\times$ GPUs | $6144 \\times 24$ | $8192 \\times 8$ |\n| Optimizer | AdamW | AdamW |\n| Learning Rate | 0.005 | 0.005 |\n| Adam- $\\beta$ | $(0.9,0.98)$ | $(0.9,0.98)$ |\n| Learning Rate Decay | linear | linear |\n| Weight Decay | 0.1 | 0.1 |\n| Dropout | 0.3 | 0.1 |\n| Attention Dropout | 0.1 | 0.0 |\n| FFN Hidden Dropout | 0.1 | 0.0 |\n| Gradient Clipping | 1.0 | 1.0 |\n| Warmup steps | 24 K | 24 K |\n| Total updates | 400 K | 400 K |\n| Decoder Layers | 16 | 12 |\n| Model size | 1024 | 512 |\n| FFN Hidden size | 1536 | 1024 |\n| Shared Repr. size $(z)$ | 256 | 128 |\n| Value Seq. size $(v)$ | 1536 | 1024 |\n| EMA dimension $(h)$ | 16 | 16 |\n| Chunk size | 1024 | 2048 |\n| Total Parameters | 252 M | 39 M |\n\n## D. 4 Machine Translation\n\nThe WMT 2016 English-German dataset contains 4.5M parallel sentence pairs for training. We following the standard setting (Ott et al., 2018), using Newstest2013 as the validation set and Newstest2014 as the test set. The dataset is pre-processed following (Ma, 2020), using the scripts from FairSeq package (Ott et al., 2019). ${ }^{6}$ We share the source and target vocabularies within the language pair, with 32 K byte pair encoding (BPE) types (Sennrich et al., 2016). The hyper-parameters of Transformer and MEgA models are listed in Table 10. Table 10: Hyper-parameters of models for machine translation. |  | XFM-Base | MEGA-Base |\n| :--- | :---: | :---: |\n| Batch Size $\\times$ GPUs | $8192 \\times 8$ | $8192 \\times 8$ |\n| Optimizer | AdamW | AdamW |\n| Learning Rate | 0.0005 | 0.001 |\n| Adam- $\\beta$ | $(0.9,0.98)$ | $(0.9,0.98)$ |\n| Learning Rate Decay | inv. sqrt | linear |\n| Weight Decay | $1 e-4$ | 0.05 |\n| Dropout | 0.1 | 0.15 |\n| Attention Dropout | 0.1 | 0.1 |\n| FFN Hidden Dropout | 0.1 | 0.1 |\n| Gradient Clipping | 1.0 | 1.0 |\n| Label Smoothing | 0.1 | 0.1 |\n| Warmup steps | 4 K | 4 K |\n| Total updates | 500 K | 500 K |\n| Encoder Layers | 6 | 6 |\n| Decoder Layers | 6 | 6 |\n| Model dimension | 512 | 512 |\n| FFN Hidden dimension | 2048 | 1024 |\n| Shared Repr. dimension $(z)$ | - | 128 |\n| Value Seq. dimension $(v)$ | - | 1024 |\n| EMA dimension $(h)$ | - | 16 |\n| Total Parameters | 65 M | 67 M |\n\n6. https://github.com/pytorch/fairseq\n\n## D. 5 Image Classification\n\nHyper-parameters are listed in Table 11. We closely follow Touvron et al. (2021) by reusing most of the their hyper-parameters. Table 11: Ingredients and hyper-parameters of DeiT and MEga. |  | DeiT-B | MEGA |\n| :--- | :---: | :---: |\n| Batch size | 1024 | 1024 |\n| Optimizer | AdamW | AdamW |\n| learning rate | 0.001 | 0.002 |\n| Learning rate decay | cosine | cosine |\n| Weight decay | 0.05 | 0.05 |\n| Epochs | 300 | 300 |\n| Warmup epochs | 5 | 20 |\n| Label smoothing | 0.1 | 0.1 |\n| Dropout | $\\boldsymbol{x}$ | $\\boldsymbol{x}$ |\n| Stoch. Depth | 0.1 | 0.2 |\n| Repeated Aug | 3 | 3 |\n| Gradient Clip. | $\\boldsymbol{x}$ | 1.0 |\n| Rand Augment | $9 / 0.5$ | $9 / 0.5$ |\n| Mixup prob. | 0.8 | 0.8 |\n| Cutmix prob. | 1.0 | 1.0 |\n| Erasing prob. | 0.25 | 0.25 |\n| Num. Layers | 12 | 12 |\n| Model size | 768 | 768 |\n| FFN Hidden size | 3072 | 1536 |\n| Shared Repr. size $(z)$ | - | 256 |\n| Value Seq. size $(v)$ | - | 1536 |\n| Total Parameters | 86 M | 90 M |\n\n\n[^0]:    2. Keys and values are split in the same way.",
    "mega-31": "[^1]:    3. The S4-v2 used larger model sizes and better-tuned hyper-parameters than S4-v1. Note that our MEgA has similar model size with S4-v1 on each task. We have also experimented with SRU++ (Lei, 2021) on Pathfinder but failed to converge on this dataset after tuning hyperparameters.",
    "mega-32": "[^2]:    5.",
    "mega-33": "signature: nrefs:1|case:mixed|eff:no|tok:13a|smooth:exp|version:1.5.1\n"
}