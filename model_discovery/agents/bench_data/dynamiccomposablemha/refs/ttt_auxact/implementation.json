{
    "implementation": {
        "review": null,
        "root": "TTT",
        "proposal": "Self-attention performs well in long context but has quadratic complexity. Existing RNN layers have linear complexity, but their performance in long context is limited by the expressive power of their hidden state. We propose a new class of sequence modeling layers with linear complexity and an expressive hidden state. The key idea is to make the hidden state a machine learning model itself, and the update rule a step of self-supervised learning. Since the hidden state is updated by training even on test sequences, our layers are called Test-Time Training (TTT) layers. We consider two instantiations: TTT-Linear and TTT-MLP, whose hidden state is a linear model and a two-layer MLP respectively. We evaluate our instantiations at the scale of 125M to 1.3B parameters, comparing with a strong Transformer and Mamba, a modern RNN. Both TTT-Linear and TTT-MLP match or exceed the baselines. Similar to Transformer, they can keep reducing perplexity by conditioning on more tokens, while Mamba cannot after 16k context. With preliminary systems optimization, TTT-Linear is already faster than Transformer at 8k context and matches Mamba in wall-clock time. TTT-MLP still faces challenges in memory I/O, but shows larger potential in long context, pointing to a promising direction for future research.",
        "units": {
            "TTT": {
                "review": null,
                "requirements": null,
                "reuse_from": null,
                "desc": "\n",
                "gautests": {
                    "test_ttt": "@gau_test\ndef test_TTT_test_ttt(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    ttt = TTT(embed_dim, block_loc, kwarg_all, device=device, dtype=dtype,\n        **kwarg_all)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    Z = {}\n    y, Z_ = ttt(x, **Z)\n    assert y.shape == (1, 100, 128)\n"
                },
                "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nlogger = logging.get_logger(__name__)\n\n\nclass TTT(GAUBase):\n    \"\"\"\n    Problem Statement\nThis paper addresses the challenge of long context in recurrent neural networks (RNNs). While RNNs offer linear computational complexity, their performance suffers in long sequences due to the limited expressive power of their fixed-size hidden states. This limitation contrasts with Transformers, which excel in long-context scenarios but have quadratic complexity.\n\nMain Claims\nThe paper proposes a new class of sequence modeling layers called Test-Time Training (TTT) layers that offer both linear complexity and expressive hidden states.\nThe key idea is to make the hidden state a machine learning model itself, where the update rule is a step of self-supervised learning. This allows for continuous training of the hidden state even on test sequences.\nThe paper introduces two instantiations of TTT layers: TTT-Linear, with a linear model as the hidden state, and TTT-MLP, with a two-layer multi-layer perceptron (MLP) as the hidden state.\nBoth TTT-Linear and TTT-MLP demonstrate competitive performance compared to strong Transformer and Mamba (a modern RNN) baselines across various model sizes.\nUnlike Mamba, both TTT layers show a continuous decrease in perplexity as they condition on more tokens in long sequences.\nTTT-Linear, with preliminary systems optimization, is faster than Transformers at 8k context and matches Mamba in wall-clock time.\nMethodology\nThe paper introduces TTT layers, which use a self-supervised learning approach to update the hidden state. The update rule is effectively a gradient step on a self-supervised loss function, allowing for \"training\" of the hidden state at test time. Two implementations are explored: TTT-Linear, where the hidden state is a linear model, and TTT-MLP, where the hidden state is a two-layer MLP. The paper also proposes mini-batch TTT and a dual form to improve hardware efficiency and speed up computations.\n\nKey Results\nIn short-context (2k and 8k tokens) experiments on the Pile dataset, both TTT-Linear and TTT-MLP demonstrate performance comparable to or exceeding Mamba and Transformer baselines.\nIn long-context (1k to 32k tokens) experiments on the Books3 subset of the Pile, both TTT-Linear and TTT-MLP outperform Mamba, especially at longer context lengths.\nTTT-Linear with the Mamba backbone outperforms both Mamba and Transformers with the Transformer backbone across various model sizes.\nWith preliminary systems optimization, TTT-Linear is already faster than Transformers at 8k context and matches Mamba in wall-clock time.\nTTT-MLP shows potential for even better performance in long-context scenarios but currently faces challenges in memory I/O.\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.hidden_size = embed_dim\n        kwarg_all['num_attention_heads'] = max(4, embed_dim // 64)\n        self.seq_modeling_block = ButterflyLinear(embed_dim=self.embed_dim,\n            block_loc=self.block_loc, kwarg_all=self.kwarg_all, **self.\n            factory_kwargs, **self.kwarg_all)\n        kwarg_all['intermediate_size'] = int(embed_dim * 2.5)\n        self.mlp = SwiGluMLP(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.conv = Conv(embed_dim=self.embed_dim, block_loc=self.block_loc,\n            kwarg_all=self.kwarg_all, **self.factory_kwargs, **self.kwarg_all)\n        self.seq_norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.ffn_norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n\n    def _forward(self, X, **Z):\n        hidden_states = X\n        position_ids = torch.arange(0, X.shape[1], dtype=torch.long, device\n            =X.device).unsqueeze(0)\n        residual = hidden_states\n        hidden_states = self.conv(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        residual = hidden_states\n        hidden_states = self.seq_norm(hidden_states, **Z)[0]\n        Z['position_ids'] = position_ids\n        hidden_states = self.seq_modeling_block(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        residual = hidden_states\n        hidden_states = self.ffn_norm(hidden_states, **Z)[0]\n        hidden_states = self.mlp(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        return hidden_states\n\n\nCHILDREN_DECLARATIONS = [UnitDecl(unitname='TTTLinear', requirements='',\n    inputs=['X'], outputs=['Y']), UnitDecl(unitname='SwiGluMLP',\n    requirements='', inputs=['X'], outputs=['Y']), UnitDecl(unitname=\n    'RMSNorm', requirements='', inputs=['X'], outputs=['Y']), UnitDecl(\n    unitname='Conv', requirements='', inputs=['X'], outputs=['Y'])]\n",
                "rating": null,
                "spec": "{\"unitname\":\"TTT\",\"document\":\"\\nProblem Statement\\nThis paper addresses the challenge of long context in recurrent neural networks (RNNs). While RNNs offer linear computational complexity, their performance suffers in long sequences due to the limited expressive power of their fixed-size hidden states. This limitation contrasts with Transformers, which excel in long-context scenarios but have quadratic complexity.\\n\\nMain Claims\\nThe paper proposes a new class of sequence modeling layers called Test-Time Training (TTT) layers that offer both linear complexity and expressive hidden states.\\nThe key idea is to make the hidden state a machine learning model itself, where the update rule is a step of self-supervised learning. This allows for continuous training of the hidden state even on test sequences.\\nThe paper introduces two instantiations of TTT layers: TTT-Linear, with a linear model as the hidden state, and TTT-MLP, with a two-layer multi-layer perceptron (MLP) as the hidden state.\\nBoth TTT-Linear and TTT-MLP demonstrate competitive performance compared to strong Transformer and Mamba (a modern RNN) baselines across various model sizes.\\nUnlike Mamba, both TTT layers show a continuous decrease in perplexity as they condition on more tokens in long sequences.\\nTTT-Linear, with preliminary systems optimization, is faster than Transformers at 8k context and matches Mamba in wall-clock time.\\nMethodology\\nThe paper introduces TTT layers, which use a self-supervised learning approach to update the hidden state. The update rule is effectively a gradient step on a self-supervised loss function, allowing for \\\"training\\\" of the hidden state at test time. Two implementations are explored: TTT-Linear, where the hidden state is a linear model, and TTT-MLP, where the hidden state is a two-layer MLP. The paper also proposes mini-batch TTT and a dual form to improve hardware efficiency and speed up computations.\\n\\nKey Results\\nIn short-context (2k and 8k tokens) experiments on the Pile dataset, both TTT-Linear and TTT-MLP demonstrate performance comparable to or exceeding Mamba and Transformer baselines.\\nIn long-context (1k to 32k tokens) experiments on the Books3 subset of the Pile, both TTT-Linear and TTT-MLP outperform Mamba, especially at longer context lengths.\\nTTT-Linear with the Mamba backbone outperforms both Mamba and Transformers with the Transformer backbone across various model sizes.\\nWith preliminary systems optimization, TTT-Linear is already faster than Transformers at 8k context and matches Mamba in wall-clock time.\\nTTT-MLP shows potential for even better performance in long-context scenarios but currently faces challenges in memory I/O.\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                "children": [
                    "ButterflyLinear",
                    "SwiGluMLP",
                    "RMSNorm",
                    "Conv"
                ],
                "suggestions": null,
                "args": {},
                "design_traces": null
            },
            "RotaryEmbedding": {
                "review": null,
                "requirements": null,
                "reuse_from": null,
                "desc": "\n",
                "gautests": {
                    "test_rotaryembedding": "@gau_test\ndef test_RotaryEmbedding_test_rotaryembedding(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    rotaryembedding = RotaryEmbedding(embed_dim, block_loc, kwarg_all,\n        device=device, dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = rotaryembedding(x)\n    assert y.shape == (1, 100, 128)\n"
                },
                "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nlogger = logging.get_logger(__name__)\n\n\nclass RotaryEmbedding(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, dim=None, max_position_embeddings=16, base\n        =10000, scaling_factor=1.0, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.scaling_factor = scaling_factor\n        self.dim = dim if dim is not None else embed_dim // 4\n        self.max_position_embeddings = max_position_embeddings\n        self.base = base\n        inv_freq = 1.0 / self.base ** (torch.arange(0, self.dim, 2, dtype=\n            torch.int64).float().to(device) / self.dim)\n        self.register_buffer('inv_freq', inv_freq, persistent=False)\n\n    @torch.no_grad()\n    def _forward(self, X, input, position_ids, **Z):\n        inv_freq_expanded = self.inv_freq[None, :, None].float().expand(\n            position_ids.shape[0], -1, 1)\n        inv_freq_expanded = self.inv_freq[None, :, None].float().expand(\n            position_ids.shape[0], -1, 1)\n        position_ids_expanded = position_ids[:, None, :].float()\n        device_type = input.device.type\n        device_type = device_type if isinstance(device_type, str\n            ) and device_type != 'mps' else 'cpu'\n        with torch.autocast(device_type=device_type, enabled=False):\n            freqs = (inv_freq_expanded.float() @ position_ids_expanded.float()\n                ).transpose(1, 2)\n            emb = torch.cat((freqs, freqs), dim=-1)\n            cos = emb.cos()\n            sin = emb.sin()\n        Z['cos'] = cos.to(**self.factory_kwargs)\n        Z['sin'] = sin.to(**self.factory_kwargs)\n        return X, Z\n\n\nCHILDREN_DECLARATIONS = []\n",
                "rating": null,
                "spec": "{\"unitname\":\"RotaryEmbedding\",\"document\":\"\\nRotaryEmbedding\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                "children": [],
                "suggestions": null,
                "args": {
                    "scaling_factor": 1.0,
                    "dim": null,
                    "base": 10000,
                    "max_position_embeddings": 16
                },
                "design_traces": null
            },
            "RMSNorm": {
                "review": null,
                "requirements": null,
                "reuse_from": null,
                "desc": "\n",
                "gautests": {
                    "test_rmsnorm": "@gau_test\ndef test_RMSNorm_test_rmsnorm(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    rmsnorm = RMSNorm(embed_dim, block_loc, kwarg_all, device=device, dtype\n        =dtype, **kwarg_all)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    Z = {}\n    y, Z_ = rmsnorm(x, **Z)\n    assert y.shape == (1, 100, 128)\n"
                },
                "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch import Tensor\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\n\n\nclass RMSNorm(GAUBase):\n    \"\"\"\n    Root Mean Square Layer Normalization (RMSNorm).\n\n    This layer applies a variant of layer normalization that uses only the root mean square\n    statistics, without centering. It's computationally more efficient than standard\n    layer normalization and has been shown to be effective in various NLP tasks.\n\n    Args:\n        embed_dim (int): The size of the input feature dimension.\n        block_loc (tuple): The location of this block in the model architecture.\n        kwarg_all (dict): Additional keyword arguments passed to the parent class.\n        device (torch.device, optional): The device on which to allocate the module's parameters.\n        dtype (torch.dtype, optional): The dtype of the module's parameters.\n        eps (float, optional): A small constant added to the denominator for numerical stability.\n            Default: 1e-5.\n\n    Attributes:\n        weight (nn.Parameter): Learnable scale parameter of shape (embed_dim,).\n        variance_epsilon (float): The epsilon value used in the normalization formula.\n\n    Shape:\n        - Input: (*, embed_dim)\n        - Output: (*, embed_dim) (same shape as input)\n\n    Examples:\n        >>> rmsnorm = RMSNorm(128, (0, 6), {})\n        >>> x = torch.randn(1, 100, 128)\n        >>> output = rmsnorm(x)\n        >>> print(output.shape)\n        torch.Size([1, 100, 128])\n\n    References:\n        - Paper: \"Root Mean Square Layer Normalization\" by Biao Zhang and Rico Sennrich\n          https://arxiv.org/abs/1910.07467\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, eps=1e-05, **kwargs):\n        \"\"\"If group_size is not None, we do GroupNorm with each group having group_size elements.\n        group_size=None is equivalent to group_size=hidden_size (i.e. there's only 1 group).\n        \"\"\"\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.weight = nn.Parameter(torch.ones(embed_dim, **self.factory_kwargs)\n            )\n        self.variance_epsilon = eps\n\n    def _forward(self, X, **Z):\n        input_dtype = X.dtype\n        X = X.to(torch.float32)\n        variance = X.pow(2).mean(-1, keepdim=True)\n        X = X * torch.rsqrt(variance + self.variance_epsilon)\n        return self.weight * X.to(input_dtype)\n\n\nCHILDREN_DECLARATIONS = []\n",
                "rating": null,
                "spec": "{\"unitname\":\"RMSNorm\",\"document\":\"\\n    Root Mean Square Layer Normalization (RMSNorm).\\n\\n    This layer applies a variant of layer normalization that uses only the root mean square\\n    statistics, without centering. It's computationally more efficient than standard\\n    layer normalization and has been shown to be effective in various NLP tasks.\\n\\n    Args:\\n        embed_dim (int): The size of the input feature dimension.\\n        block_loc (tuple): The location of this block in the model architecture.\\n        kwarg_all (dict): Additional keyword arguments passed to the parent class.\\n        device (torch.device, optional): The device on which to allocate the module's parameters.\\n        dtype (torch.dtype, optional): The dtype of the module's parameters.\\n        eps (float, optional): A small constant added to the denominator for numerical stability.\\n            Default: 1e-5.\\n\\n    Attributes:\\n        weight (nn.Parameter): Learnable scale parameter of shape (embed_dim,).\\n        variance_epsilon (float): The epsilon value used in the normalization formula.\\n\\n    Shape:\\n        - Input: (*, embed_dim)\\n        - Output: (*, embed_dim) (same shape as input)\\n\\n    Examples:\\n        >>> rmsnorm = RMSNorm(128, (0, 6), {})\\n        >>> x = torch.randn(1, 100, 128)\\n        >>> output = rmsnorm(x)\\n        >>> print(output.shape)\\n        torch.Size([1, 100, 128])\\n\\n    References:\\n        - Paper: \\\"Root Mean Square Layer Normalization\\\" by Biao Zhang and Rico Sennrich\\n          https://arxiv.org/abs/1910.07467\\n    \",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                "children": [],
                "suggestions": null,
                "args": {
                    "eps": 1e-05
                },
                "design_traces": null
            },
            "Conv": {
                "review": null,
                "requirements": null,
                "reuse_from": null,
                "desc": "\n",
                "gautests": {
                    "test_conv": "@gau_test\ndef test_Conv_test_conv(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    conv = Conv(embed_dim, block_loc, kwarg_all, device=device, dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = conv(x)\n    assert y.shape == (1, 100, 128)\n"
                },
                "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nfrom torch.utils._pytree import tree_map\nfrom transformers.utils import logging\nfrom transformers.activations import ACT2FN\ntry:\n    from causal_conv1d import causal_conv1d_fn, causal_conv1d_update\nexcept:\n    causal_conv1d_update, causal_conv1d_fn = None, None\nlogger = logging.get_logger(__name__)\n\n\nclass Conv(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, conv_kernel=4, rms_norm_eps=1e-06, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        kwarg_all['eps'] = rms_norm_eps\n        self.norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.conv = nn.Conv1d(embed_dim, embed_dim, bias=True, kernel_size=\n            conv_kernel, groups=embed_dim, padding=conv_kernel - 1, **self.\n            factory_kwargs)\n\n    def __call__(self, X, **Z):\n        hidden_states = X\n        seq_len = hidden_states.shape[1]\n        hidden_states = self.norm(hidden_states, **Z)[0]\n        hidden_states = hidden_states.transpose(1, 2)\n        if causal_conv1d_fn is None:\n            hidden_states = self.conv(hidden_states)[..., :seq_len]\n        else:\n            conv_weights = self.conv.weight.view(self.conv.weight.size(0),\n                self.conv.weight.size(2))\n            hidden_states = causal_conv1d_fn(hidden_states, conv_weights,\n                self.conv.bias, activation=None)\n        hidden_states = hidden_states.transpose(1, 2)\n        return hidden_states\n\n\nCHILDREN_DECLARATIONS = [UnitDecl(unitname='RMSNorm', requirements='',\n    inputs=['X'], outputs=['Y'])]\n",
                "rating": null,
                "spec": "{\"unitname\":\"Conv\",\"document\":\"\\nConv\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                "children": [
                    "RMSNorm"
                ],
                "suggestions": null,
                "args": {
                    "conv_kernel": 4,
                    "rms_norm_eps": 1e-06
                },
                "design_traces": null
            },
            "ButterflyLinear": {
                "review": "# Comprehensive Review of ButterflyLinear Implementation\n\n```rating 4.2```\n\n## Strengths\n\n1. **Architectural Design**\n- Clean implementation of butterfly factorization\n- Proper handling of device and dtype consistency\n- Maintains input/output dimensions correctly\n\n2. **Code Quality**\n- Well-documented with comprehensive docstrings\n- Clear error handling for dimension validation\n- Proper use of PyTorch modules and utilities\n\n3. **Memory Efficiency**\n- Efficient parameter sharing through butterfly structure\n- No unnecessary memory allocations\n- Good use of in-place operations\n\n## Areas for Improvement\n\n1. **Performance Optimization**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., use_checkpoint=True):\n        # ... existing initialization code ...\n        self.use_checkpoint = use_checkpoint\n        \n    @torch.jit.script\n    def _butterfly_forward(self, x: torch.Tensor) -> torch.Tensor:\n        out = x\n        for butterfly in self.butterflies:\n            out = butterfly(out)\n        return out\n        \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        if self.use_checkpoint and self.training:\n            return torch.utils.checkpoint.checkpoint(\n                self._butterfly_forward, X, preserve_rng_state=False\n            )\n        return self._butterfly_forward(X)\n```\n\n2. **Numerical Stability**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., eps=1e-6, scale_factor=0.02):\n        # ... existing initialization code ...\n        self.eps = eps\n        self.scale_factor = scale_factor\n        \n        # Initialize butterfly matrices with controlled scaling\n        for butterfly in self.butterflies:\n            nn.init.normal_(butterfly.weight, std=scale_factor/math.sqrt(embed_dim))\n            \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        out = X\n        for i, butterfly in enumerate(self.butterflies):\n            out = butterfly(out)\n            if i < len(self.butterflies) - 1:  # Skip normalization for last layer\n                # Add layer normalization between butterfly transforms\n                var = out.var(dim=-1, keepdim=True, unbiased=False)\n                out = out * torch.rsqrt(var + self.eps)\n        return out\n```\n\n3. **Gradient Flow**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., residual_scale=0.1):\n        # ... existing initialization code ...\n        self.residual_scale = residual_scale\n        \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        out = X\n        for butterfly in self.butterflies:\n            # Add residual connections\n            butterfly_out = butterfly(out)\n            out = out + self.residual_scale * butterfly_out\n        return out\n```\n\n## Innovation Assessment\n\n### Strengths\n1. Novel application of butterfly factorization for efficient linear transformations\n2. Memory-efficient design suitable for large models\n3. Good balance between efficiency and expressiveness\n\n### Potential Impact\n1. Reduced computational complexity for large models\n2. Better memory efficiency in transformer architectures\n3. Potential for improved training stability\n\n### Integration Considerations\n1. Seamless integration with existing transformer blocks\n2. Compatible with various optimization techniques\n3. Scalable to different model sizes\n\n## Recommendations\n\n1. **Add Comprehensive Testing**\n```python\n@gau_test\ndef test_butterfly_linear_comprehensive(device=None, dtype=None):\n    \"\"\"Comprehensive test suite for ButterflyLinear.\"\"\"\n    embed_dim = 128\n    factors = 3\n    batch_size = 4\n    seq_len = 16\n    \n    model = ButterflyLinear(\n        embed_dim=embed_dim,\n        block_loc=(0,0),\n        kwarg_all={},\n        device=device,\n        dtype=dtype,\n        factors=factors\n    )\n    \n    # Test basic functionality\n    x = torch.randn(batch_size, seq_len, embed_dim, device=device, dtype=dtype)\n    y = model(x)\n    assert y.shape == x.shape\n    \n    # Test gradient flow\n    if x.requires_grad:\n        loss = y.sum()\n        loss.backward()\n        for p in model.parameters():\n            assert p.grad is not None\n            \n    # Test device consistency\n    assert y.device == x.device\n    assert y.dtype == x.dtype\n    \n    # Test numerical stability\n    assert not torch.isnan(y).any()\n    assert not torch.isinf(y).any()\n```\n\n2. **Add Performance Monitoring**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., profile=False):\n        # ... existing initialization code ...\n        self.profile = profile\n        self.forward_times = []\n        \n    def _forward(self, X, **Z):\n        if self.profile:\n            start = torch.cuda.Event(enable_timing=True)\n            end = torch.cuda.Event(enable_timing=True)\n            start.record()\n            \n        out = super()._forward(X, **Z)\n        \n        if self.profile:\n            end.record()\n            torch.cuda.synchronize()\n            self.forward_times.append(start.elapsed_time(end))\n            \n        return out\n```\n\n3. **Documentation Improvements**\nAdd detailed documentation about:\n- Performance characteristics\n- Memory usage patterns\n- Integration guidelines\n- Initialization considerations\n\n4. **Future Directions**\nConsider implementing:\n- Adaptive factorization based on input patterns\n- Sparse butterfly patterns for larger models\n- Quantization-friendly variants\n- Dynamic factor adjustment during training\n\n## Additional Notes\n\n1. **Memory Optimization**\n- Consider using torch.cuda.amp for mixed precision training\n- Implement gradient checkpointing for very deep networks\n- Use parameter sharing across butterfly layers where appropriate\n\n2. **Training Stability**\n- Add gradient clipping\n- Implement warm-up periods for learning rates\n- Consider layer-wise learning rate decay\n\n3. **Integration Tips**\n- Provide examples of integration with different architectures\n- Document best practices for initialization\n- Include performance benchmarks\n\nThe implementation shows strong potential and is well-executed. Focus on the suggested optimizations to further improve performance and stability. The code is ready for production use but could benefit from the additional features outlined above.",
                "requirements": "N/A",
                "reuse_from": null,
                "desc": null,
                "gautests": {
                    "test_ButterflyLinear": "@gau_test\ndef test_ButterflyLinear_test_ButterflyLinear(device=None, dtype=None) ->None:\n    \"\"\"\n    Unit test for ButterflyLinear GAU.\n    \n    Args:\n        device (torch.device, optional): The device to run the test on.\n        dtype (torch.dtype, optional): The data type to use for the test tensors.\n    \n    Raises:\n        AssertionError: If any of the assertions fail.\n    \"\"\"\n    embed_dim = 16\n    factors = 2\n    block_loc = 0, 0\n    kwarg_all = {}\n    batch_size = 4\n    seq_len = 10\n    model = ButterflyLinear(embed_dim=embed_dim, block_loc=block_loc,\n        kwarg_all=kwarg_all, device=device, dtype=dtype, factors=factors)\n    model.eval()\n    X = torch.randn(batch_size, seq_len, embed_dim, device=device, dtype=dtype)\n    with torch.no_grad():\n        Y = model(X)\n    assert Y.shape == (batch_size, seq_len, embed_dim\n        ), f'Expected output shape {batch_size, seq_len, embed_dim}, got {Y.shape}'\n    assert len(model.butterflies\n        ) == factors, f'Expected {factors} butterfly layers, got {len(model.butterflies)}'\n    for i, butterfly in enumerate(model.butterflies):\n        expected_in_dim = embed_dim\n        expected_out_dim = embed_dim\n        assert butterfly.in_features == expected_in_dim, f'Butterfly {i} expected in_features {expected_in_dim}, got {butterfly.in_features}'\n        assert butterfly.out_features == expected_out_dim, f'Butterfly {i} expected out_features {expected_out_dim}, got {butterfly.out_features}'\n    assert Y.device == X.device, f'Device mismatch: input on {X.device}, output on {Y.device}'\n    assert Y.dtype == X.dtype, f'Dtype mismatch: input dtype {X.dtype}, output dtype {Y.dtype}'\n"
                },
                "code": "import torch\nimport torch.nn as nn\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nimport torch.nn.functional as F\n\n\nclass ButterflyLinear(GAUBase):\n    \"\"\"\n    ButterflyLinear: Efficient Linear Transformation using Butterfly Factorization.\n    \n    ButterflyLinear decomposes the weight matrix into a product of sparse, structured\n    butterfly matrices, significantly reducing computational overhead and memory usage.\n    \n    **Code Example:**\n    \n    .. code-block:: python\n    \n        # Example usage of ButterflyLinear\n        butterfly = ButterflyLinear(embed_dim=128, block_loc=(0, 0), kwarg_all={}, factors=2)\n        x = torch.randn(32, 10, 128)  # (batch_size, seq_len, embed_dim)\n        y = butterfly(x)\n        print(y.shape)  # Output: torch.Size([32, 10, 128])\n    \n    Args:\n        embed_dim (int): The dimension of the input and output embeddings.\n        block_loc (tuple): The location of this block within the network, \n                           specified as (layer_idx, n_block).\n        kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\n        device (torch.device, optional): The device on which to allocate the module's parameters.\n        dtype (torch.dtype, optional): The data type of the module's parameters.\n        factors (int, optional): The number of butterfly factors to decompose the weight matrix.\n                                 Must satisfy embed_dim divisible by 2**factors. Default is 2.\n        **kwargs: Additional optional arguments.\n    \n    Attributes:\n        factors (int): Number of butterfly factors.\n        butterflies (nn.ModuleList): List of butterfly linear layers.\n    \n    Shape:\n        - Input: (batch_size, seq_len, embed_dim)\n        - Output: (batch_size, seq_len, embed_dim)\n    \n    Example:\n        >>> butterfly = ButterflyLinear(embed_dim=64, block_loc=(1, 0), kwarg_all={}, factors=3)\n        >>> x = torch.randn(10, 20, 64)  # (batch_size, seq_len, embed_dim)\n        >>> y = butterfly(x)\n        >>> print(y.shape)\n        torch.Size([10, 20, 64])\n    \n    References:\n        1. Dao, T., et al. (2019). Learning Fast Algorithms for Linear Transforms Using Butterfly Factorizations. ICML 2019.\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, factors: int=2, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        \"\"\"\n        Initializes the ButterflyLinear GAU.\n\n        Args:\n            embed_dim (int): The dimension of the input and output embeddings.\n            block_loc (tuple): The location of this block within the network, \n                               specified as (layer_idx, n_block).\n            kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\n            device (torch.device, optional): The device on which to allocate the module's parameters.\n            dtype (torch.dtype, optional): The data type of the module's parameters.\n            factors (int, optional): The number of butterfly factors to decompose the weight matrix.\n                                     Must satisfy embed_dim divisible by 2**factors. Default is 2.\n            **kwargs: Additional optional arguments.\n\n        Raises:\n            ValueError: If embed_dim is not divisible by 2**factors.\n        \"\"\"\n        if embed_dim % 2 ** factors != 0:\n            raise ValueError(\n                f'embed_dim ({embed_dim}) must be divisible by 2^{factors} = {2 ** factors} for ButterflyLinear.'\n                )\n        self.factors = factors\n        self.butterflies = nn.ModuleList([nn.Linear(embed_dim, embed_dim,\n            bias=False, device=device, dtype=dtype) for _ in range(factors)])\n\n    def _forward(self, X, **Z):\n        \"\"\"\n        Forward pass of the ButterflyLinear GAU.\n\n        Args:\n            X (torch.Tensor): Input tensor of shape (batch_size, seq_len, embed_dim).\n            **Z: Additional keyword arguments (unused).\n\n        Returns:\n            torch.Tensor: Output tensor of shape (batch_size, seq_len, embed_dim).\n        \"\"\"\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters\n            ()).dtype)\n        out = X\n        for butterfly in self.butterflies:\n            out = butterfly(out)\n        return out\n",
                "rating": 4.2,
                "spec": "{\"unitname\":\"ButterflyLinear\",\"document\":\"ButterflyLinear: Efficient Linear Transformation using Butterfly Factorization.\\n\\nButterflyLinear decomposes the weight matrix into a product of sparse, structured\\nbutterfly matrices, significantly reducing computational overhead and memory usage.\\n\\n**Code Example:**\\n\\n.. code-block:: python\\n\\n    # Example usage of ButterflyLinear\\n    butterfly = ButterflyLinear(embed_dim=128, block_loc=(0, 0), kwarg_all={}, factors=2)\\n    x = torch.randn(32, 10, 128)  # (batch_size, seq_len, embed_dim)\\n    y = butterfly(x)\\n    print(y.shape)  # Output: torch.Size([32, 10, 128])\\n\\nArgs:\\n    embed_dim (int): The dimension of the input and output embeddings.\\n    block_loc (tuple): The location of this block within the network, \\n                       specified as (layer_idx, n_block).\\n    kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\\n    device (torch.device, optional): The device on which to allocate the module's parameters.\\n    dtype (torch.dtype, optional): The data type of the module's parameters.\\n    factors (int, optional): The number of butterfly factors to decompose the weight matrix.\\n                             Must satisfy embed_dim divisible by 2**factors. Default is 2.\\n    **kwargs: Additional optional arguments.\\n\\nAttributes:\\n    factors (int): Number of butterfly factors.\\n    butterflies (nn.ModuleList): List of butterfly linear layers.\\n\\nShape:\\n    - Input: (batch_size, seq_len, embed_dim)\\n    - Output: (batch_size, seq_len, embed_dim)\\n\\nExample:\\n    >>> butterfly = ButterflyLinear(embed_dim=64, block_loc=(1, 0), kwarg_all={}, factors=3)\\n    >>> x = torch.randn(10, 20, 64)  # (batch_size, seq_len, embed_dim)\\n    >>> y = butterfly(x)\\n    >>> print(y.shape)\\n    torch.Size([10, 20, 64])\\n\\nReferences:\\n    1. Dao, T., et al. (2019). Learning Fast Algorithms for Linear Transforms Using Butterfly Factorizations. ICML 2019.\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                "children": [],
                "suggestions": null,
                "args": {
                    "factors": 2
                },
                "design_traces": null
            },
            "SwiGluMLP": {
                "review": null,
                "requirements": null,
                "reuse_from": null,
                "desc": "\n",
                "gautests": {
                    "test_swiglumlp": "@gau_test\ndef test_SwiGluMLP_test_swiglumlp(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    swiglumlp = SwiGluMLP(embed_dim, block_loc, kwarg_all, device=device,\n        dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = swiglumlp(x)\n    assert y.shape == (1, 100, 128)\n"
                },
                "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nfrom transformers.activations import ACT2FN\nlogger = logging.get_logger(__name__)\n\n\nclass SwiGluMLP(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, intermediate_size=None, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.hidden_size = embed_dim\n        self.intermediate_size = (intermediate_size if intermediate_size is not\n            None else int(embed_dim * 2.5))\n        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size,\n            bias=False, **self.factory_kwargs)\n        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size,\n            bias=False, **self.factory_kwargs)\n        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size,\n            bias=False, **self.factory_kwargs)\n        self.act_fn = ACT2FN['silu']\n\n    def _forward(self, X, **Z):\n        down_proj = self.down_proj(self.act_fn(self.gate_proj(X)) * self.\n            up_proj(X))\n        return down_proj\n\n\nCHILDREN_DECLARATIONS = []\n",
                "rating": null,
                "spec": "{\"unitname\":\"SwiGluMLP\",\"document\":\"\\nSwiGluMLP\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                "children": [],
                "suggestions": null,
                "args": {
                    "intermediate_size": null
                },
                "design_traces": null
            }
        },
        "rating": null,
        "declares": {
            "ButterflyLinear": "{\"unitname\":\"ButterflyLinear\",\"requirements\":\"N/A\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}"
        },
        "proposal_traces": [],
        "suggestions": null,
        "name": "ttt_auxact"
    },
    "status": "unfinished",
    "history": [
        {
            "tree": {
                "review": null,
                "root": "TTT",
                "proposal": "Self-attention performs well in long context but has quadratic complexity. Existing RNN layers have linear complexity, but their performance in long context is limited by the expressive power of their hidden state. We propose a new class of sequence modeling layers with linear complexity and an expressive hidden state. The key idea is to make the hidden state a machine learning model itself, and the update rule a step of self-supervised learning. Since the hidden state is updated by training even on test sequences, our layers are called Test-Time Training (TTT) layers. We consider two instantiations: TTT-Linear and TTT-MLP, whose hidden state is a linear model and a two-layer MLP respectively. We evaluate our instantiations at the scale of 125M to 1.3B parameters, comparing with a strong Transformer and Mamba, a modern RNN. Both TTT-Linear and TTT-MLP match or exceed the baselines. Similar to Transformer, they can keep reducing perplexity by conditioning on more tokens, while Mamba cannot after 16k context. With preliminary systems optimization, TTT-Linear is already faster than Transformer at 8k context and matches Mamba in wall-clock time. TTT-MLP still faces challenges in memory I/O, but shows larger potential in long context, pointing to a promising direction for future research.",
                "units": {
                    "TTT": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_ttt": "@gau_test\ndef test_TTT_test_ttt(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    ttt = TTT(embed_dim, block_loc, kwarg_all, device=device, dtype=dtype,\n        **kwarg_all)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    Z = {}\n    y, Z_ = ttt(x, **Z)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nlogger = logging.get_logger(__name__)\n\n\nclass TTT(GAUBase):\n    \"\"\"\n    Problem Statement\nThis paper addresses the challenge of long context in recurrent neural networks (RNNs). While RNNs offer linear computational complexity, their performance suffers in long sequences due to the limited expressive power of their fixed-size hidden states. This limitation contrasts with Transformers, which excel in long-context scenarios but have quadratic complexity.\n\nMain Claims\nThe paper proposes a new class of sequence modeling layers called Test-Time Training (TTT) layers that offer both linear complexity and expressive hidden states.\nThe key idea is to make the hidden state a machine learning model itself, where the update rule is a step of self-supervised learning. This allows for continuous training of the hidden state even on test sequences.\nThe paper introduces two instantiations of TTT layers: TTT-Linear, with a linear model as the hidden state, and TTT-MLP, with a two-layer multi-layer perceptron (MLP) as the hidden state.\nBoth TTT-Linear and TTT-MLP demonstrate competitive performance compared to strong Transformer and Mamba (a modern RNN) baselines across various model sizes.\nUnlike Mamba, both TTT layers show a continuous decrease in perplexity as they condition on more tokens in long sequences.\nTTT-Linear, with preliminary systems optimization, is faster than Transformers at 8k context and matches Mamba in wall-clock time.\nMethodology\nThe paper introduces TTT layers, which use a self-supervised learning approach to update the hidden state. The update rule is effectively a gradient step on a self-supervised loss function, allowing for \"training\" of the hidden state at test time. Two implementations are explored: TTT-Linear, where the hidden state is a linear model, and TTT-MLP, where the hidden state is a two-layer MLP. The paper also proposes mini-batch TTT and a dual form to improve hardware efficiency and speed up computations.\n\nKey Results\nIn short-context (2k and 8k tokens) experiments on the Pile dataset, both TTT-Linear and TTT-MLP demonstrate performance comparable to or exceeding Mamba and Transformer baselines.\nIn long-context (1k to 32k tokens) experiments on the Books3 subset of the Pile, both TTT-Linear and TTT-MLP outperform Mamba, especially at longer context lengths.\nTTT-Linear with the Mamba backbone outperforms both Mamba and Transformers with the Transformer backbone across various model sizes.\nWith preliminary systems optimization, TTT-Linear is already faster than Transformers at 8k context and matches Mamba in wall-clock time.\nTTT-MLP shows potential for even better performance in long-context scenarios but currently faces challenges in memory I/O.\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.hidden_size = embed_dim\n        kwarg_all['num_attention_heads'] = max(4, embed_dim // 64)\n        self.seq_modeling_block = ButterflyLinear(embed_dim=self.embed_dim,\n            block_loc=self.block_loc, kwarg_all=self.kwarg_all, **self.\n            factory_kwargs, **self.kwarg_all)\n        kwarg_all['intermediate_size'] = int(embed_dim * 2.5)\n        self.mlp = SwiGluMLP(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.conv = Conv(embed_dim=self.embed_dim, block_loc=self.block_loc,\n            kwarg_all=self.kwarg_all, **self.factory_kwargs, **self.kwarg_all)\n        self.seq_norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.ffn_norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n\n    def _forward(self, X, **Z):\n        hidden_states = X\n        position_ids = torch.arange(0, X.shape[1], dtype=torch.long, device\n            =X.device).unsqueeze(0)\n        residual = hidden_states\n        hidden_states = self.conv(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        residual = hidden_states\n        hidden_states = self.seq_norm(hidden_states, **Z)[0]\n        Z['position_ids'] = position_ids\n        hidden_states = self.seq_modeling_block(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        residual = hidden_states\n        hidden_states = self.ffn_norm(hidden_states, **Z)[0]\n        hidden_states = self.mlp(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        return hidden_states\n\n\nCHILDREN_DECLARATIONS = [UnitDecl(unitname='TTTLinear', requirements='',\n    inputs=['X'], outputs=['Y']), UnitDecl(unitname='SwiGluMLP',\n    requirements='', inputs=['X'], outputs=['Y']), UnitDecl(unitname=\n    'RMSNorm', requirements='', inputs=['X'], outputs=['Y']), UnitDecl(\n    unitname='Conv', requirements='', inputs=['X'], outputs=['Y'])]\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"TTT\",\"document\":\"\\nProblem Statement\\nThis paper addresses the challenge of long context in recurrent neural networks (RNNs). While RNNs offer linear computational complexity, their performance suffers in long sequences due to the limited expressive power of their fixed-size hidden states. This limitation contrasts with Transformers, which excel in long-context scenarios but have quadratic complexity.\\n\\nMain Claims\\nThe paper proposes a new class of sequence modeling layers called Test-Time Training (TTT) layers that offer both linear complexity and expressive hidden states.\\nThe key idea is to make the hidden state a machine learning model itself, where the update rule is a step of self-supervised learning. This allows for continuous training of the hidden state even on test sequences.\\nThe paper introduces two instantiations of TTT layers: TTT-Linear, with a linear model as the hidden state, and TTT-MLP, with a two-layer multi-layer perceptron (MLP) as the hidden state.\\nBoth TTT-Linear and TTT-MLP demonstrate competitive performance compared to strong Transformer and Mamba (a modern RNN) baselines across various model sizes.\\nUnlike Mamba, both TTT layers show a continuous decrease in perplexity as they condition on more tokens in long sequences.\\nTTT-Linear, with preliminary systems optimization, is faster than Transformers at 8k context and matches Mamba in wall-clock time.\\nMethodology\\nThe paper introduces TTT layers, which use a self-supervised learning approach to update the hidden state. The update rule is effectively a gradient step on a self-supervised loss function, allowing for \\\"training\\\" of the hidden state at test time. Two implementations are explored: TTT-Linear, where the hidden state is a linear model, and TTT-MLP, where the hidden state is a two-layer MLP. The paper also proposes mini-batch TTT and a dual form to improve hardware efficiency and speed up computations.\\n\\nKey Results\\nIn short-context (2k and 8k tokens) experiments on the Pile dataset, both TTT-Linear and TTT-MLP demonstrate performance comparable to or exceeding Mamba and Transformer baselines.\\nIn long-context (1k to 32k tokens) experiments on the Books3 subset of the Pile, both TTT-Linear and TTT-MLP outperform Mamba, especially at longer context lengths.\\nTTT-Linear with the Mamba backbone outperforms both Mamba and Transformers with the Transformer backbone across various model sizes.\\nWith preliminary systems optimization, TTT-Linear is already faster than Transformers at 8k context and matches Mamba in wall-clock time.\\nTTT-MLP shows potential for even better performance in long-context scenarios but currently faces challenges in memory I/O.\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [
                            "ButterflyLinear",
                            "SwiGluMLP",
                            "RMSNorm",
                            "Conv"
                        ],
                        "suggestions": null,
                        "args": {},
                        "design_traces": null
                    },
                    "RotaryEmbedding": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_rotaryembedding": "@gau_test\ndef test_RotaryEmbedding_test_rotaryembedding(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    rotaryembedding = RotaryEmbedding(embed_dim, block_loc, kwarg_all,\n        device=device, dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = rotaryembedding(x)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nlogger = logging.get_logger(__name__)\n\n\nclass RotaryEmbedding(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, dim=None, max_position_embeddings=16, base\n        =10000, scaling_factor=1.0, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.scaling_factor = scaling_factor\n        self.dim = dim if dim is not None else embed_dim // 4\n        self.max_position_embeddings = max_position_embeddings\n        self.base = base\n        inv_freq = 1.0 / self.base ** (torch.arange(0, self.dim, 2, dtype=\n            torch.int64).float().to(device) / self.dim)\n        self.register_buffer('inv_freq', inv_freq, persistent=False)\n\n    @torch.no_grad()\n    def _forward(self, X, input, position_ids, **Z):\n        inv_freq_expanded = self.inv_freq[None, :, None].float().expand(\n            position_ids.shape[0], -1, 1)\n        inv_freq_expanded = self.inv_freq[None, :, None].float().expand(\n            position_ids.shape[0], -1, 1)\n        position_ids_expanded = position_ids[:, None, :].float()\n        device_type = input.device.type\n        device_type = device_type if isinstance(device_type, str\n            ) and device_type != 'mps' else 'cpu'\n        with torch.autocast(device_type=device_type, enabled=False):\n            freqs = (inv_freq_expanded.float() @ position_ids_expanded.float()\n                ).transpose(1, 2)\n            emb = torch.cat((freqs, freqs), dim=-1)\n            cos = emb.cos()\n            sin = emb.sin()\n        Z['cos'] = cos.to(**self.factory_kwargs)\n        Z['sin'] = sin.to(**self.factory_kwargs)\n        return X, Z\n\n\nCHILDREN_DECLARATIONS = []\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"RotaryEmbedding\",\"document\":\"\\nRotaryEmbedding\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "scaling_factor": 1.0,
                            "dim": null,
                            "base": 10000,
                            "max_position_embeddings": 16
                        },
                        "design_traces": null
                    },
                    "RMSNorm": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_rmsnorm": "@gau_test\ndef test_RMSNorm_test_rmsnorm(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    rmsnorm = RMSNorm(embed_dim, block_loc, kwarg_all, device=device, dtype\n        =dtype, **kwarg_all)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    Z = {}\n    y, Z_ = rmsnorm(x, **Z)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch import Tensor\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\n\n\nclass RMSNorm(GAUBase):\n    \"\"\"\n    Root Mean Square Layer Normalization (RMSNorm).\n\n    This layer applies a variant of layer normalization that uses only the root mean square\n    statistics, without centering. It's computationally more efficient than standard\n    layer normalization and has been shown to be effective in various NLP tasks.\n\n    Args:\n        embed_dim (int): The size of the input feature dimension.\n        block_loc (tuple): The location of this block in the model architecture.\n        kwarg_all (dict): Additional keyword arguments passed to the parent class.\n        device (torch.device, optional): The device on which to allocate the module's parameters.\n        dtype (torch.dtype, optional): The dtype of the module's parameters.\n        eps (float, optional): A small constant added to the denominator for numerical stability.\n            Default: 1e-5.\n\n    Attributes:\n        weight (nn.Parameter): Learnable scale parameter of shape (embed_dim,).\n        variance_epsilon (float): The epsilon value used in the normalization formula.\n\n    Shape:\n        - Input: (*, embed_dim)\n        - Output: (*, embed_dim) (same shape as input)\n\n    Examples:\n        >>> rmsnorm = RMSNorm(128, (0, 6), {})\n        >>> x = torch.randn(1, 100, 128)\n        >>> output = rmsnorm(x)\n        >>> print(output.shape)\n        torch.Size([1, 100, 128])\n\n    References:\n        - Paper: \"Root Mean Square Layer Normalization\" by Biao Zhang and Rico Sennrich\n          https://arxiv.org/abs/1910.07467\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, eps=1e-05, **kwargs):\n        \"\"\"If group_size is not None, we do GroupNorm with each group having group_size elements.\n        group_size=None is equivalent to group_size=hidden_size (i.e. there's only 1 group).\n        \"\"\"\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.weight = nn.Parameter(torch.ones(embed_dim, **self.factory_kwargs)\n            )\n        self.variance_epsilon = eps\n\n    def _forward(self, X, **Z):\n        input_dtype = X.dtype\n        X = X.to(torch.float32)\n        variance = X.pow(2).mean(-1, keepdim=True)\n        X = X * torch.rsqrt(variance + self.variance_epsilon)\n        return self.weight * X.to(input_dtype)\n\n\nCHILDREN_DECLARATIONS = []\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"RMSNorm\",\"document\":\"\\n    Root Mean Square Layer Normalization (RMSNorm).\\n\\n    This layer applies a variant of layer normalization that uses only the root mean square\\n    statistics, without centering. It's computationally more efficient than standard\\n    layer normalization and has been shown to be effective in various NLP tasks.\\n\\n    Args:\\n        embed_dim (int): The size of the input feature dimension.\\n        block_loc (tuple): The location of this block in the model architecture.\\n        kwarg_all (dict): Additional keyword arguments passed to the parent class.\\n        device (torch.device, optional): The device on which to allocate the module's parameters.\\n        dtype (torch.dtype, optional): The dtype of the module's parameters.\\n        eps (float, optional): A small constant added to the denominator for numerical stability.\\n            Default: 1e-5.\\n\\n    Attributes:\\n        weight (nn.Parameter): Learnable scale parameter of shape (embed_dim,).\\n        variance_epsilon (float): The epsilon value used in the normalization formula.\\n\\n    Shape:\\n        - Input: (*, embed_dim)\\n        - Output: (*, embed_dim) (same shape as input)\\n\\n    Examples:\\n        >>> rmsnorm = RMSNorm(128, (0, 6), {})\\n        >>> x = torch.randn(1, 100, 128)\\n        >>> output = rmsnorm(x)\\n        >>> print(output.shape)\\n        torch.Size([1, 100, 128])\\n\\n    References:\\n        - Paper: \\\"Root Mean Square Layer Normalization\\\" by Biao Zhang and Rico Sennrich\\n          https://arxiv.org/abs/1910.07467\\n    \",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "eps": 1e-05
                        },
                        "design_traces": null
                    },
                    "Conv": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_conv": "@gau_test\ndef test_Conv_test_conv(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    conv = Conv(embed_dim, block_loc, kwarg_all, device=device, dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = conv(x)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nfrom torch.utils._pytree import tree_map\nfrom transformers.utils import logging\nfrom transformers.activations import ACT2FN\ntry:\n    from causal_conv1d import causal_conv1d_fn, causal_conv1d_update\nexcept:\n    causal_conv1d_update, causal_conv1d_fn = None, None\nlogger = logging.get_logger(__name__)\n\n\nclass Conv(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, conv_kernel=4, rms_norm_eps=1e-06, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        kwarg_all['eps'] = rms_norm_eps\n        self.norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.conv = nn.Conv1d(embed_dim, embed_dim, bias=True, kernel_size=\n            conv_kernel, groups=embed_dim, padding=conv_kernel - 1, **self.\n            factory_kwargs)\n\n    def __call__(self, X, **Z):\n        hidden_states = X\n        seq_len = hidden_states.shape[1]\n        hidden_states = self.norm(hidden_states, **Z)[0]\n        hidden_states = hidden_states.transpose(1, 2)\n        if causal_conv1d_fn is None:\n            hidden_states = self.conv(hidden_states)[..., :seq_len]\n        else:\n            conv_weights = self.conv.weight.view(self.conv.weight.size(0),\n                self.conv.weight.size(2))\n            hidden_states = causal_conv1d_fn(hidden_states, conv_weights,\n                self.conv.bias, activation=None)\n        hidden_states = hidden_states.transpose(1, 2)\n        return hidden_states\n\n\nCHILDREN_DECLARATIONS = [UnitDecl(unitname='RMSNorm', requirements='',\n    inputs=['X'], outputs=['Y'])]\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"Conv\",\"document\":\"\\nConv\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [
                            "RMSNorm"
                        ],
                        "suggestions": null,
                        "args": {
                            "conv_kernel": 4,
                            "rms_norm_eps": 1e-06
                        },
                        "design_traces": null
                    },
                    "ButterflyLinear": {
                        "review": "# Comprehensive Review of ButterflyLinear Implementation\n\n```rating 4.2```\n\n## Strengths\n\n1. **Architectural Design**\n- Clean implementation of butterfly factorization\n- Proper handling of device and dtype consistency\n- Maintains input/output dimensions correctly\n\n2. **Code Quality**\n- Well-documented with comprehensive docstrings\n- Clear error handling for dimension validation\n- Proper use of PyTorch modules and utilities\n\n3. **Memory Efficiency**\n- Efficient parameter sharing through butterfly structure\n- No unnecessary memory allocations\n- Good use of in-place operations\n\n## Areas for Improvement\n\n1. **Performance Optimization**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., use_checkpoint=True):\n        # ... existing initialization code ...\n        self.use_checkpoint = use_checkpoint\n        \n    @torch.jit.script\n    def _butterfly_forward(self, x: torch.Tensor) -> torch.Tensor:\n        out = x\n        for butterfly in self.butterflies:\n            out = butterfly(out)\n        return out\n        \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        if self.use_checkpoint and self.training:\n            return torch.utils.checkpoint.checkpoint(\n                self._butterfly_forward, X, preserve_rng_state=False\n            )\n        return self._butterfly_forward(X)\n```\n\n2. **Numerical Stability**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., eps=1e-6, scale_factor=0.02):\n        # ... existing initialization code ...\n        self.eps = eps\n        self.scale_factor = scale_factor\n        \n        # Initialize butterfly matrices with controlled scaling\n        for butterfly in self.butterflies:\n            nn.init.normal_(butterfly.weight, std=scale_factor/math.sqrt(embed_dim))\n            \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        out = X\n        for i, butterfly in enumerate(self.butterflies):\n            out = butterfly(out)\n            if i < len(self.butterflies) - 1:  # Skip normalization for last layer\n                # Add layer normalization between butterfly transforms\n                var = out.var(dim=-1, keepdim=True, unbiased=False)\n                out = out * torch.rsqrt(var + self.eps)\n        return out\n```\n\n3. **Gradient Flow**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., residual_scale=0.1):\n        # ... existing initialization code ...\n        self.residual_scale = residual_scale\n        \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        out = X\n        for butterfly in self.butterflies:\n            # Add residual connections\n            butterfly_out = butterfly(out)\n            out = out + self.residual_scale * butterfly_out\n        return out\n```\n\n## Innovation Assessment\n\n### Strengths\n1. Novel application of butterfly factorization for efficient linear transformations\n2. Memory-efficient design suitable for large models\n3. Good balance between efficiency and expressiveness\n\n### Potential Impact\n1. Reduced computational complexity for large models\n2. Better memory efficiency in transformer architectures\n3. Potential for improved training stability\n\n### Integration Considerations\n1. Seamless integration with existing transformer blocks\n2. Compatible with various optimization techniques\n3. Scalable to different model sizes\n\n## Recommendations\n\n1. **Add Comprehensive Testing**\n```python\n@gau_test\ndef test_butterfly_linear_comprehensive(device=None, dtype=None):\n    \"\"\"Comprehensive test suite for ButterflyLinear.\"\"\"\n    embed_dim = 128\n    factors = 3\n    batch_size = 4\n    seq_len = 16\n    \n    model = ButterflyLinear(\n        embed_dim=embed_dim,\n        block_loc=(0,0),\n        kwarg_all={},\n        device=device,\n        dtype=dtype,\n        factors=factors\n    )\n    \n    # Test basic functionality\n    x = torch.randn(batch_size, seq_len, embed_dim, device=device, dtype=dtype)\n    y = model(x)\n    assert y.shape == x.shape\n    \n    # Test gradient flow\n    if x.requires_grad:\n        loss = y.sum()\n        loss.backward()\n        for p in model.parameters():\n            assert p.grad is not None\n            \n    # Test device consistency\n    assert y.device == x.device\n    assert y.dtype == x.dtype\n    \n    # Test numerical stability\n    assert not torch.isnan(y).any()\n    assert not torch.isinf(y).any()\n```\n\n2. **Add Performance Monitoring**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., profile=False):\n        # ... existing initialization code ...\n        self.profile = profile\n        self.forward_times = []\n        \n    def _forward(self, X, **Z):\n        if self.profile:\n            start = torch.cuda.Event(enable_timing=True)\n            end = torch.cuda.Event(enable_timing=True)\n            start.record()\n            \n        out = super()._forward(X, **Z)\n        \n        if self.profile:\n            end.record()\n            torch.cuda.synchronize()\n            self.forward_times.append(start.elapsed_time(end))\n            \n        return out\n```\n\n3. **Documentation Improvements**\nAdd detailed documentation about:\n- Performance characteristics\n- Memory usage patterns\n- Integration guidelines\n- Initialization considerations\n\n4. **Future Directions**\nConsider implementing:\n- Adaptive factorization based on input patterns\n- Sparse butterfly patterns for larger models\n- Quantization-friendly variants\n- Dynamic factor adjustment during training\n\n## Additional Notes\n\n1. **Memory Optimization**\n- Consider using torch.cuda.amp for mixed precision training\n- Implement gradient checkpointing for very deep networks\n- Use parameter sharing across butterfly layers where appropriate\n\n2. **Training Stability**\n- Add gradient clipping\n- Implement warm-up periods for learning rates\n- Consider layer-wise learning rate decay\n\n3. **Integration Tips**\n- Provide examples of integration with different architectures\n- Document best practices for initialization\n- Include performance benchmarks\n\nThe implementation shows strong potential and is well-executed. Focus on the suggested optimizations to further improve performance and stability. The code is ready for production use but could benefit from the additional features outlined above.",
                        "requirements": "N/A",
                        "reuse_from": null,
                        "desc": null,
                        "gautests": {
                            "test_ButterflyLinear": "@gau_test\ndef test_ButterflyLinear_test_ButterflyLinear(device=None, dtype=None) ->None:\n    \"\"\"\n    Unit test for ButterflyLinear GAU.\n    \n    Args:\n        device (torch.device, optional): The device to run the test on.\n        dtype (torch.dtype, optional): The data type to use for the test tensors.\n    \n    Raises:\n        AssertionError: If any of the assertions fail.\n    \"\"\"\n    embed_dim = 16\n    factors = 2\n    block_loc = 0, 0\n    kwarg_all = {}\n    batch_size = 4\n    seq_len = 10\n    model = ButterflyLinear(embed_dim=embed_dim, block_loc=block_loc,\n        kwarg_all=kwarg_all, device=device, dtype=dtype, factors=factors)\n    model.eval()\n    X = torch.randn(batch_size, seq_len, embed_dim, device=device, dtype=dtype)\n    with torch.no_grad():\n        Y = model(X)\n    assert Y.shape == (batch_size, seq_len, embed_dim\n        ), f'Expected output shape {batch_size, seq_len, embed_dim}, got {Y.shape}'\n    assert len(model.butterflies\n        ) == factors, f'Expected {factors} butterfly layers, got {len(model.butterflies)}'\n    for i, butterfly in enumerate(model.butterflies):\n        expected_in_dim = embed_dim\n        expected_out_dim = embed_dim\n        assert butterfly.in_features == expected_in_dim, f'Butterfly {i} expected in_features {expected_in_dim}, got {butterfly.in_features}'\n        assert butterfly.out_features == expected_out_dim, f'Butterfly {i} expected out_features {expected_out_dim}, got {butterfly.out_features}'\n    assert Y.device == X.device, f'Device mismatch: input on {X.device}, output on {Y.device}'\n    assert Y.dtype == X.dtype, f'Dtype mismatch: input dtype {X.dtype}, output dtype {Y.dtype}'\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nimport torch.nn.functional as F\n\n\nclass ButterflyLinear(GAUBase):\n    \"\"\"\n    ButterflyLinear: Efficient Linear Transformation using Butterfly Factorization.\n    \n    ButterflyLinear decomposes the weight matrix into a product of sparse, structured\n    butterfly matrices, significantly reducing computational overhead and memory usage.\n    \n    **Code Example:**\n    \n    .. code-block:: python\n    \n        # Example usage of ButterflyLinear\n        butterfly = ButterflyLinear(embed_dim=128, block_loc=(0, 0), kwarg_all={}, factors=2)\n        x = torch.randn(32, 10, 128)  # (batch_size, seq_len, embed_dim)\n        y = butterfly(x)\n        print(y.shape)  # Output: torch.Size([32, 10, 128])\n    \n    Args:\n        embed_dim (int): The dimension of the input and output embeddings.\n        block_loc (tuple): The location of this block within the network, \n                           specified as (layer_idx, n_block).\n        kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\n        device (torch.device, optional): The device on which to allocate the module's parameters.\n        dtype (torch.dtype, optional): The data type of the module's parameters.\n        factors (int, optional): The number of butterfly factors to decompose the weight matrix.\n                                 Must satisfy embed_dim divisible by 2**factors. Default is 2.\n        **kwargs: Additional optional arguments.\n    \n    Attributes:\n        factors (int): Number of butterfly factors.\n        butterflies (nn.ModuleList): List of butterfly linear layers.\n    \n    Shape:\n        - Input: (batch_size, seq_len, embed_dim)\n        - Output: (batch_size, seq_len, embed_dim)\n    \n    Example:\n        >>> butterfly = ButterflyLinear(embed_dim=64, block_loc=(1, 0), kwarg_all={}, factors=3)\n        >>> x = torch.randn(10, 20, 64)  # (batch_size, seq_len, embed_dim)\n        >>> y = butterfly(x)\n        >>> print(y.shape)\n        torch.Size([10, 20, 64])\n    \n    References:\n        1. Dao, T., et al. (2019). Learning Fast Algorithms for Linear Transforms Using Butterfly Factorizations. ICML 2019.\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, factors: int=2, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        \"\"\"\n        Initializes the ButterflyLinear GAU.\n\n        Args:\n            embed_dim (int): The dimension of the input and output embeddings.\n            block_loc (tuple): The location of this block within the network, \n                               specified as (layer_idx, n_block).\n            kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\n            device (torch.device, optional): The device on which to allocate the module's parameters.\n            dtype (torch.dtype, optional): The data type of the module's parameters.\n            factors (int, optional): The number of butterfly factors to decompose the weight matrix.\n                                     Must satisfy embed_dim divisible by 2**factors. Default is 2.\n            **kwargs: Additional optional arguments.\n\n        Raises:\n            ValueError: If embed_dim is not divisible by 2**factors.\n        \"\"\"\n        if embed_dim % 2 ** factors != 0:\n            raise ValueError(\n                f'embed_dim ({embed_dim}) must be divisible by 2^{factors} = {2 ** factors} for ButterflyLinear.'\n                )\n        self.factors = factors\n        self.butterflies = nn.ModuleList([nn.Linear(embed_dim, embed_dim,\n            bias=False, device=device, dtype=dtype) for _ in range(factors)])\n\n    def _forward(self, X, **Z):\n        \"\"\"\n        Forward pass of the ButterflyLinear GAU.\n\n        Args:\n            X (torch.Tensor): Input tensor of shape (batch_size, seq_len, embed_dim).\n            **Z: Additional keyword arguments (unused).\n\n        Returns:\n            torch.Tensor: Output tensor of shape (batch_size, seq_len, embed_dim).\n        \"\"\"\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters\n            ()).dtype)\n        out = X\n        for butterfly in self.butterflies:\n            out = butterfly(out)\n        return out\n",
                        "rating": 4.2,
                        "spec": "{\"unitname\":\"ButterflyLinear\",\"document\":\"ButterflyLinear: Efficient Linear Transformation using Butterfly Factorization.\\n\\nButterflyLinear decomposes the weight matrix into a product of sparse, structured\\nbutterfly matrices, significantly reducing computational overhead and memory usage.\\n\\n**Code Example:**\\n\\n.. code-block:: python\\n\\n    # Example usage of ButterflyLinear\\n    butterfly = ButterflyLinear(embed_dim=128, block_loc=(0, 0), kwarg_all={}, factors=2)\\n    x = torch.randn(32, 10, 128)  # (batch_size, seq_len, embed_dim)\\n    y = butterfly(x)\\n    print(y.shape)  # Output: torch.Size([32, 10, 128])\\n\\nArgs:\\n    embed_dim (int): The dimension of the input and output embeddings.\\n    block_loc (tuple): The location of this block within the network, \\n                       specified as (layer_idx, n_block).\\n    kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\\n    device (torch.device, optional): The device on which to allocate the module's parameters.\\n    dtype (torch.dtype, optional): The data type of the module's parameters.\\n    factors (int, optional): The number of butterfly factors to decompose the weight matrix.\\n                             Must satisfy embed_dim divisible by 2**factors. Default is 2.\\n    **kwargs: Additional optional arguments.\\n\\nAttributes:\\n    factors (int): Number of butterfly factors.\\n    butterflies (nn.ModuleList): List of butterfly linear layers.\\n\\nShape:\\n    - Input: (batch_size, seq_len, embed_dim)\\n    - Output: (batch_size, seq_len, embed_dim)\\n\\nExample:\\n    >>> butterfly = ButterflyLinear(embed_dim=64, block_loc=(1, 0), kwarg_all={}, factors=3)\\n    >>> x = torch.randn(10, 20, 64)  # (batch_size, seq_len, embed_dim)\\n    >>> y = butterfly(x)\\n    >>> print(y.shape)\\n    torch.Size([10, 20, 64])\\n\\nReferences:\\n    1. Dao, T., et al. (2019). Learning Fast Algorithms for Linear Transforms Using Butterfly Factorizations. ICML 2019.\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "factors": 2
                        },
                        "design_traces": null
                    },
                    "SwiGluMLP": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_swiglumlp": "@gau_test\ndef test_SwiGluMLP_test_swiglumlp(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    swiglumlp = SwiGluMLP(embed_dim, block_loc, kwarg_all, device=device,\n        dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = swiglumlp(x)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nfrom transformers.activations import ACT2FN\nlogger = logging.get_logger(__name__)\n\n\nclass SwiGluMLP(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, intermediate_size=None, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.hidden_size = embed_dim\n        self.intermediate_size = (intermediate_size if intermediate_size is not\n            None else int(embed_dim * 2.5))\n        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size,\n            bias=False, **self.factory_kwargs)\n        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size,\n            bias=False, **self.factory_kwargs)\n        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size,\n            bias=False, **self.factory_kwargs)\n        self.act_fn = ACT2FN['silu']\n\n    def _forward(self, X, **Z):\n        down_proj = self.down_proj(self.act_fn(self.gate_proj(X)) * self.\n            up_proj(X))\n        return down_proj\n\n\nCHILDREN_DECLARATIONS = []\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"SwiGluMLP\",\"document\":\"\\nSwiGluMLP\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "intermediate_size": null
                        },
                        "design_traces": null
                    }
                },
                "rating": null,
                "declares": {
                    "ButterflyLinear": "{\"unitname\":\"ButterflyLinear\",\"requirements\":\"N/A\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}"
                },
                "proposal_traces": [],
                "suggestions": null,
                "name": "ttt_auxact"
            },
            "user_input": "",
            "status": "unfinished",
            "design_cfg": {
                "max_attemps": {
                    "post_refinement": 0,
                    "max_search_rounds": 3,
                    "implementation_debug": 7,
                    "design_proposal": 10
                },
                "threshold": {
                    "proposal_rating": 4.0,
                    "implementation_rating": 3.0
                },
                "use_unlimited_prompt": true,
                "mutation_no_tree": true,
                "agent_types": {
                    "DESIGN_PROPOSER": "hybrid",
                    "IMPLEMENTATION_PLANNER": "hybrid",
                    "IMPLEMENTATION_CODER": "hybrid",
                    "PROPOSAL_REVIEWER": "hybrid",
                    "IMPLEMENTATION_OBSERVER": "hybrid",
                    "SEARCH_ASSISTANT": "None"
                },
                "running_mode": "Proposal + Implementation",
                "unittest_pass_required": false,
                "crossover_no_ref": true,
                "scratch_no_tree": true,
                "_agent_types": {
                    "DESIGN_PROPOSER": "claude3.5_sonnet",
                    "IMPLEMENTATION_PLANNER": "claude3.5_sonnet",
                    "IMPLEMENTATION_CODER": "o1_mini",
                    "PROPOSAL_REVIEWER": "claude3.5_sonnet",
                    "IMPLEMENTATION_OBSERVER": "claude3.5_sonnet",
                    "SEARCH_ASSISTANT": "None"
                },
                "termination": {
                    "max_debug_budget": 0,
                    "max_failed_rounds": 3,
                    "max_total_budget": 0
                },
                "agent_weights": {
                    "DESIGN_PROPOSER": [
                        0.05,
                        0.0,
                        0.6000000000000001,
                        0.2,
                        0.15
                    ],
                    "IMPLEMENTATION_PLANNER": [
                        0.05000000000000002,
                        0.0,
                        0.44999999999999996,
                        0.3,
                        0.20000000000000007
                    ],
                    "IMPLEMENTATION_CODER": [
                        0.0,
                        0.0,
                        0.3,
                        0.4999999999999996,
                        0.2
                    ],
                    "PROPOSAL_REVIEWER": [
                        0.10000000000000002,
                        0.0,
                        0.5499999999999999,
                        0.2,
                        0.15000000000000002
                    ],
                    "IMPLEMENTATION_OBSERVER": [
                        0.05,
                        0.0,
                        0.15000000000000002,
                        0.15000000000000002,
                        0.6499999999999999,
                        0.0
                    ]
                },
                "num_samples": {
                    "implementation": 1,
                    "rerank_method": "rating",
                    "proposal": 1
                },
                "search_settings": {
                    "proposal_search": true,
                    "proposal_review_search": true,
                    "search_for_papers_num": 10
                },
                "max_attempts": {
                    "post_refinement": 0,
                    "max_search_rounds": 4,
                    "implementation_debug": 5,
                    "design_proposal": 5
                }
            },
            "costs": {
                "DESIGN_PROPOSER": 0.0,
                "IMPLEMENTATION_PLANNER": 0.102903,
                "IMPLEMENTATION_CODER": 0.568791,
                "PROPOSAL_REVIEWER": 0.0,
                "IMPLEMENTATION_OBSERVER": 0.700041,
                "SEARCH_ASSISTANT": 0
            }
        },
        {
            "tree": {
                "review": null,
                "root": "TTT",
                "proposal": "Self-attention performs well in long context but has quadratic complexity. Existing RNN layers have linear complexity, but their performance in long context is limited by the expressive power of their hidden state. We propose a new class of sequence modeling layers with linear complexity and an expressive hidden state. The key idea is to make the hidden state a machine learning model itself, and the update rule a step of self-supervised learning. Since the hidden state is updated by training even on test sequences, our layers are called Test-Time Training (TTT) layers. We consider two instantiations: TTT-Linear and TTT-MLP, whose hidden state is a linear model and a two-layer MLP respectively. We evaluate our instantiations at the scale of 125M to 1.3B parameters, comparing with a strong Transformer and Mamba, a modern RNN. Both TTT-Linear and TTT-MLP match or exceed the baselines. Similar to Transformer, they can keep reducing perplexity by conditioning on more tokens, while Mamba cannot after 16k context. With preliminary systems optimization, TTT-Linear is already faster than Transformer at 8k context and matches Mamba in wall-clock time. TTT-MLP still faces challenges in memory I/O, but shows larger potential in long context, pointing to a promising direction for future research.",
                "units": {
                    "TTT": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_ttt": "@gau_test\ndef test_TTT_test_ttt(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    ttt = TTT(embed_dim, block_loc, kwarg_all, device=device, dtype=dtype,\n        **kwarg_all)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    Z = {}\n    y, Z_ = ttt(x, **Z)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nlogger = logging.get_logger(__name__)\n\n\nclass TTT(GAUBase):\n    \"\"\"\n    Problem Statement\nThis paper addresses the challenge of long context in recurrent neural networks (RNNs). While RNNs offer linear computational complexity, their performance suffers in long sequences due to the limited expressive power of their fixed-size hidden states. This limitation contrasts with Transformers, which excel in long-context scenarios but have quadratic complexity.\n\nMain Claims\nThe paper proposes a new class of sequence modeling layers called Test-Time Training (TTT) layers that offer both linear complexity and expressive hidden states.\nThe key idea is to make the hidden state a machine learning model itself, where the update rule is a step of self-supervised learning. This allows for continuous training of the hidden state even on test sequences.\nThe paper introduces two instantiations of TTT layers: TTT-Linear, with a linear model as the hidden state, and TTT-MLP, with a two-layer multi-layer perceptron (MLP) as the hidden state.\nBoth TTT-Linear and TTT-MLP demonstrate competitive performance compared to strong Transformer and Mamba (a modern RNN) baselines across various model sizes.\nUnlike Mamba, both TTT layers show a continuous decrease in perplexity as they condition on more tokens in long sequences.\nTTT-Linear, with preliminary systems optimization, is faster than Transformers at 8k context and matches Mamba in wall-clock time.\nMethodology\nThe paper introduces TTT layers, which use a self-supervised learning approach to update the hidden state. The update rule is effectively a gradient step on a self-supervised loss function, allowing for \"training\" of the hidden state at test time. Two implementations are explored: TTT-Linear, where the hidden state is a linear model, and TTT-MLP, where the hidden state is a two-layer MLP. The paper also proposes mini-batch TTT and a dual form to improve hardware efficiency and speed up computations.\n\nKey Results\nIn short-context (2k and 8k tokens) experiments on the Pile dataset, both TTT-Linear and TTT-MLP demonstrate performance comparable to or exceeding Mamba and Transformer baselines.\nIn long-context (1k to 32k tokens) experiments on the Books3 subset of the Pile, both TTT-Linear and TTT-MLP outperform Mamba, especially at longer context lengths.\nTTT-Linear with the Mamba backbone outperforms both Mamba and Transformers with the Transformer backbone across various model sizes.\nWith preliminary systems optimization, TTT-Linear is already faster than Transformers at 8k context and matches Mamba in wall-clock time.\nTTT-MLP shows potential for even better performance in long-context scenarios but currently faces challenges in memory I/O.\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.hidden_size = embed_dim\n        kwarg_all['num_attention_heads'] = max(4, embed_dim // 64)\n        self.seq_modeling_block = ButterflyLinear(embed_dim=self.embed_dim,\n            block_loc=self.block_loc, kwarg_all=self.kwarg_all, **self.\n            factory_kwargs, **self.kwarg_all)\n        kwarg_all['intermediate_size'] = int(embed_dim * 2.5)\n        self.mlp = SwiGluMLP(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.conv = Conv(embed_dim=self.embed_dim, block_loc=self.block_loc,\n            kwarg_all=self.kwarg_all, **self.factory_kwargs, **self.kwarg_all)\n        self.seq_norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.ffn_norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n\n    def _forward(self, X, **Z):\n        hidden_states = X\n        position_ids = torch.arange(0, X.shape[1], dtype=torch.long, device\n            =X.device).unsqueeze(0)\n        residual = hidden_states\n        hidden_states = self.conv(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        residual = hidden_states\n        hidden_states = self.seq_norm(hidden_states, **Z)[0]\n        Z['position_ids'] = position_ids\n        hidden_states = self.seq_modeling_block(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        residual = hidden_states\n        hidden_states = self.ffn_norm(hidden_states, **Z)[0]\n        hidden_states = self.mlp(hidden_states, **Z)[0]\n        hidden_states = residual + hidden_states\n        return hidden_states\n\n\nCHILDREN_DECLARATIONS = [UnitDecl(unitname='TTTLinear', requirements='',\n    inputs=['X'], outputs=['Y']), UnitDecl(unitname='SwiGluMLP',\n    requirements='', inputs=['X'], outputs=['Y']), UnitDecl(unitname=\n    'RMSNorm', requirements='', inputs=['X'], outputs=['Y']), UnitDecl(\n    unitname='Conv', requirements='', inputs=['X'], outputs=['Y'])]\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"TTT\",\"document\":\"\\nProblem Statement\\nThis paper addresses the challenge of long context in recurrent neural networks (RNNs). While RNNs offer linear computational complexity, their performance suffers in long sequences due to the limited expressive power of their fixed-size hidden states. This limitation contrasts with Transformers, which excel in long-context scenarios but have quadratic complexity.\\n\\nMain Claims\\nThe paper proposes a new class of sequence modeling layers called Test-Time Training (TTT) layers that offer both linear complexity and expressive hidden states.\\nThe key idea is to make the hidden state a machine learning model itself, where the update rule is a step of self-supervised learning. This allows for continuous training of the hidden state even on test sequences.\\nThe paper introduces two instantiations of TTT layers: TTT-Linear, with a linear model as the hidden state, and TTT-MLP, with a two-layer multi-layer perceptron (MLP) as the hidden state.\\nBoth TTT-Linear and TTT-MLP demonstrate competitive performance compared to strong Transformer and Mamba (a modern RNN) baselines across various model sizes.\\nUnlike Mamba, both TTT layers show a continuous decrease in perplexity as they condition on more tokens in long sequences.\\nTTT-Linear, with preliminary systems optimization, is faster than Transformers at 8k context and matches Mamba in wall-clock time.\\nMethodology\\nThe paper introduces TTT layers, which use a self-supervised learning approach to update the hidden state. The update rule is effectively a gradient step on a self-supervised loss function, allowing for \\\"training\\\" of the hidden state at test time. Two implementations are explored: TTT-Linear, where the hidden state is a linear model, and TTT-MLP, where the hidden state is a two-layer MLP. The paper also proposes mini-batch TTT and a dual form to improve hardware efficiency and speed up computations.\\n\\nKey Results\\nIn short-context (2k and 8k tokens) experiments on the Pile dataset, both TTT-Linear and TTT-MLP demonstrate performance comparable to or exceeding Mamba and Transformer baselines.\\nIn long-context (1k to 32k tokens) experiments on the Books3 subset of the Pile, both TTT-Linear and TTT-MLP outperform Mamba, especially at longer context lengths.\\nTTT-Linear with the Mamba backbone outperforms both Mamba and Transformers with the Transformer backbone across various model sizes.\\nWith preliminary systems optimization, TTT-Linear is already faster than Transformers at 8k context and matches Mamba in wall-clock time.\\nTTT-MLP shows potential for even better performance in long-context scenarios but currently faces challenges in memory I/O.\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [
                            "ButterflyLinear",
                            "SwiGluMLP",
                            "RMSNorm",
                            "Conv"
                        ],
                        "suggestions": null,
                        "args": {},
                        "design_traces": null
                    },
                    "RMSNorm": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_rmsnorm": "@gau_test\ndef test_RMSNorm_test_rmsnorm(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    rmsnorm = RMSNorm(embed_dim, block_loc, kwarg_all, device=device, dtype\n        =dtype, **kwarg_all)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    Z = {}\n    y, Z_ = rmsnorm(x, **Z)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch import Tensor\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\n\n\nclass RMSNorm(GAUBase):\n    \"\"\"\n    Root Mean Square Layer Normalization (RMSNorm).\n\n    This layer applies a variant of layer normalization that uses only the root mean square\n    statistics, without centering. It's computationally more efficient than standard\n    layer normalization and has been shown to be effective in various NLP tasks.\n\n    Args:\n        embed_dim (int): The size of the input feature dimension.\n        block_loc (tuple): The location of this block in the model architecture.\n        kwarg_all (dict): Additional keyword arguments passed to the parent class.\n        device (torch.device, optional): The device on which to allocate the module's parameters.\n        dtype (torch.dtype, optional): The dtype of the module's parameters.\n        eps (float, optional): A small constant added to the denominator for numerical stability.\n            Default: 1e-5.\n\n    Attributes:\n        weight (nn.Parameter): Learnable scale parameter of shape (embed_dim,).\n        variance_epsilon (float): The epsilon value used in the normalization formula.\n\n    Shape:\n        - Input: (*, embed_dim)\n        - Output: (*, embed_dim) (same shape as input)\n\n    Examples:\n        >>> rmsnorm = RMSNorm(128, (0, 6), {})\n        >>> x = torch.randn(1, 100, 128)\n        >>> output = rmsnorm(x)\n        >>> print(output.shape)\n        torch.Size([1, 100, 128])\n\n    References:\n        - Paper: \"Root Mean Square Layer Normalization\" by Biao Zhang and Rico Sennrich\n          https://arxiv.org/abs/1910.07467\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, eps=1e-05, **kwargs):\n        \"\"\"If group_size is not None, we do GroupNorm with each group having group_size elements.\n        group_size=None is equivalent to group_size=hidden_size (i.e. there's only 1 group).\n        \"\"\"\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.weight = nn.Parameter(torch.ones(embed_dim, **self.factory_kwargs)\n            )\n        self.variance_epsilon = eps\n\n    def _forward(self, X, **Z):\n        input_dtype = X.dtype\n        X = X.to(torch.float32)\n        variance = X.pow(2).mean(-1, keepdim=True)\n        X = X * torch.rsqrt(variance + self.variance_epsilon)\n        return self.weight * X.to(input_dtype)\n\n\nCHILDREN_DECLARATIONS = []\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"RMSNorm\",\"document\":\"\\n    Root Mean Square Layer Normalization (RMSNorm).\\n\\n    This layer applies a variant of layer normalization that uses only the root mean square\\n    statistics, without centering. It's computationally more efficient than standard\\n    layer normalization and has been shown to be effective in various NLP tasks.\\n\\n    Args:\\n        embed_dim (int): The size of the input feature dimension.\\n        block_loc (tuple): The location of this block in the model architecture.\\n        kwarg_all (dict): Additional keyword arguments passed to the parent class.\\n        device (torch.device, optional): The device on which to allocate the module's parameters.\\n        dtype (torch.dtype, optional): The dtype of the module's parameters.\\n        eps (float, optional): A small constant added to the denominator for numerical stability.\\n            Default: 1e-5.\\n\\n    Attributes:\\n        weight (nn.Parameter): Learnable scale parameter of shape (embed_dim,).\\n        variance_epsilon (float): The epsilon value used in the normalization formula.\\n\\n    Shape:\\n        - Input: (*, embed_dim)\\n        - Output: (*, embed_dim) (same shape as input)\\n\\n    Examples:\\n        >>> rmsnorm = RMSNorm(128, (0, 6), {})\\n        >>> x = torch.randn(1, 100, 128)\\n        >>> output = rmsnorm(x)\\n        >>> print(output.shape)\\n        torch.Size([1, 100, 128])\\n\\n    References:\\n        - Paper: \\\"Root Mean Square Layer Normalization\\\" by Biao Zhang and Rico Sennrich\\n          https://arxiv.org/abs/1910.07467\\n    \",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "eps": 1e-05
                        },
                        "design_traces": null
                    },
                    "Conv": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_conv": "@gau_test\ndef test_Conv_test_conv(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    conv = Conv(embed_dim, block_loc, kwarg_all, device=device, dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = conv(x)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nfrom torch.utils._pytree import tree_map\nfrom transformers.utils import logging\nfrom transformers.activations import ACT2FN\ntry:\n    from causal_conv1d import causal_conv1d_fn, causal_conv1d_update\nexcept:\n    causal_conv1d_update, causal_conv1d_fn = None, None\nlogger = logging.get_logger(__name__)\n\n\nclass Conv(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, conv_kernel=4, rms_norm_eps=1e-06, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        kwarg_all['eps'] = rms_norm_eps\n        self.norm = RMSNorm(embed_dim=self.embed_dim, block_loc=self.\n            block_loc, kwarg_all=self.kwarg_all, **self.factory_kwargs, **\n            self.kwarg_all)\n        self.conv = nn.Conv1d(embed_dim, embed_dim, bias=True, kernel_size=\n            conv_kernel, groups=embed_dim, padding=conv_kernel - 1, **self.\n            factory_kwargs)\n\n    def __call__(self, X, **Z):\n        hidden_states = X\n        seq_len = hidden_states.shape[1]\n        hidden_states = self.norm(hidden_states, **Z)[0]\n        hidden_states = hidden_states.transpose(1, 2)\n        if causal_conv1d_fn is None:\n            hidden_states = self.conv(hidden_states)[..., :seq_len]\n        else:\n            conv_weights = self.conv.weight.view(self.conv.weight.size(0),\n                self.conv.weight.size(2))\n            hidden_states = causal_conv1d_fn(hidden_states, conv_weights,\n                self.conv.bias, activation=None)\n        hidden_states = hidden_states.transpose(1, 2)\n        return hidden_states\n\n\nCHILDREN_DECLARATIONS = [UnitDecl(unitname='RMSNorm', requirements='',\n    inputs=['X'], outputs=['Y'])]\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"Conv\",\"document\":\"\\nConv\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [
                            "RMSNorm"
                        ],
                        "suggestions": null,
                        "args": {
                            "conv_kernel": 4,
                            "rms_norm_eps": 1e-06
                        },
                        "design_traces": null
                    },
                    "ButterflyLinear": {
                        "review": "# Comprehensive Review of ButterflyLinear Implementation\n\n```rating 4.2```\n\n## Strengths\n\n1. **Architectural Design**\n- Clean implementation of butterfly factorization\n- Proper handling of device and dtype consistency\n- Maintains input/output dimensions correctly\n\n2. **Code Quality**\n- Well-documented with comprehensive docstrings\n- Clear error handling for dimension validation\n- Proper use of PyTorch modules and utilities\n\n3. **Memory Efficiency**\n- Efficient parameter sharing through butterfly structure\n- No unnecessary memory allocations\n- Good use of in-place operations\n\n## Areas for Improvement\n\n1. **Performance Optimization**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., use_checkpoint=True):\n        # ... existing initialization code ...\n        self.use_checkpoint = use_checkpoint\n        \n    @torch.jit.script\n    def _butterfly_forward(self, x: torch.Tensor) -> torch.Tensor:\n        out = x\n        for butterfly in self.butterflies:\n            out = butterfly(out)\n        return out\n        \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        if self.use_checkpoint and self.training:\n            return torch.utils.checkpoint.checkpoint(\n                self._butterfly_forward, X, preserve_rng_state=False\n            )\n        return self._butterfly_forward(X)\n```\n\n2. **Numerical Stability**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., eps=1e-6, scale_factor=0.02):\n        # ... existing initialization code ...\n        self.eps = eps\n        self.scale_factor = scale_factor\n        \n        # Initialize butterfly matrices with controlled scaling\n        for butterfly in self.butterflies:\n            nn.init.normal_(butterfly.weight, std=scale_factor/math.sqrt(embed_dim))\n            \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        out = X\n        for i, butterfly in enumerate(self.butterflies):\n            out = butterfly(out)\n            if i < len(self.butterflies) - 1:  # Skip normalization for last layer\n                # Add layer normalization between butterfly transforms\n                var = out.var(dim=-1, keepdim=True, unbiased=False)\n                out = out * torch.rsqrt(var + self.eps)\n        return out\n```\n\n3. **Gradient Flow**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., residual_scale=0.1):\n        # ... existing initialization code ...\n        self.residual_scale = residual_scale\n        \n    def _forward(self, X, **Z):\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters()).dtype)\n        out = X\n        for butterfly in self.butterflies:\n            # Add residual connections\n            butterfly_out = butterfly(out)\n            out = out + self.residual_scale * butterfly_out\n        return out\n```\n\n## Innovation Assessment\n\n### Strengths\n1. Novel application of butterfly factorization for efficient linear transformations\n2. Memory-efficient design suitable for large models\n3. Good balance between efficiency and expressiveness\n\n### Potential Impact\n1. Reduced computational complexity for large models\n2. Better memory efficiency in transformer architectures\n3. Potential for improved training stability\n\n### Integration Considerations\n1. Seamless integration with existing transformer blocks\n2. Compatible with various optimization techniques\n3. Scalable to different model sizes\n\n## Recommendations\n\n1. **Add Comprehensive Testing**\n```python\n@gau_test\ndef test_butterfly_linear_comprehensive(device=None, dtype=None):\n    \"\"\"Comprehensive test suite for ButterflyLinear.\"\"\"\n    embed_dim = 128\n    factors = 3\n    batch_size = 4\n    seq_len = 16\n    \n    model = ButterflyLinear(\n        embed_dim=embed_dim,\n        block_loc=(0,0),\n        kwarg_all={},\n        device=device,\n        dtype=dtype,\n        factors=factors\n    )\n    \n    # Test basic functionality\n    x = torch.randn(batch_size, seq_len, embed_dim, device=device, dtype=dtype)\n    y = model(x)\n    assert y.shape == x.shape\n    \n    # Test gradient flow\n    if x.requires_grad:\n        loss = y.sum()\n        loss.backward()\n        for p in model.parameters():\n            assert p.grad is not None\n            \n    # Test device consistency\n    assert y.device == x.device\n    assert y.dtype == x.dtype\n    \n    # Test numerical stability\n    assert not torch.isnan(y).any()\n    assert not torch.isinf(y).any()\n```\n\n2. **Add Performance Monitoring**\n```python\nclass ButterflyLinear(GAUBase):\n    def __init__(self, ..., profile=False):\n        # ... existing initialization code ...\n        self.profile = profile\n        self.forward_times = []\n        \n    def _forward(self, X, **Z):\n        if self.profile:\n            start = torch.cuda.Event(enable_timing=True)\n            end = torch.cuda.Event(enable_timing=True)\n            start.record()\n            \n        out = super()._forward(X, **Z)\n        \n        if self.profile:\n            end.record()\n            torch.cuda.synchronize()\n            self.forward_times.append(start.elapsed_time(end))\n            \n        return out\n```\n\n3. **Documentation Improvements**\nAdd detailed documentation about:\n- Performance characteristics\n- Memory usage patterns\n- Integration guidelines\n- Initialization considerations\n\n4. **Future Directions**\nConsider implementing:\n- Adaptive factorization based on input patterns\n- Sparse butterfly patterns for larger models\n- Quantization-friendly variants\n- Dynamic factor adjustment during training\n\n## Additional Notes\n\n1. **Memory Optimization**\n- Consider using torch.cuda.amp for mixed precision training\n- Implement gradient checkpointing for very deep networks\n- Use parameter sharing across butterfly layers where appropriate\n\n2. **Training Stability**\n- Add gradient clipping\n- Implement warm-up periods for learning rates\n- Consider layer-wise learning rate decay\n\n3. **Integration Tips**\n- Provide examples of integration with different architectures\n- Document best practices for initialization\n- Include performance benchmarks\n\nThe implementation shows strong potential and is well-executed. Focus on the suggested optimizations to further improve performance and stability. The code is ready for production use but could benefit from the additional features outlined above.",
                        "requirements": "N/A",
                        "reuse_from": null,
                        "desc": null,
                        "gautests": {
                            "test_ButterflyLinear": "@gau_test\ndef test_ButterflyLinear_test_ButterflyLinear(device=None, dtype=None) ->None:\n    \"\"\"\n    Unit test for ButterflyLinear GAU.\n    \n    Args:\n        device (torch.device, optional): The device to run the test on.\n        dtype (torch.dtype, optional): The data type to use for the test tensors.\n    \n    Raises:\n        AssertionError: If any of the assertions fail.\n    \"\"\"\n    embed_dim = 16\n    factors = 2\n    block_loc = 0, 0\n    kwarg_all = {}\n    batch_size = 4\n    seq_len = 10\n    model = ButterflyLinear(embed_dim=embed_dim, block_loc=block_loc,\n        kwarg_all=kwarg_all, device=device, dtype=dtype, factors=factors)\n    model.eval()\n    X = torch.randn(batch_size, seq_len, embed_dim, device=device, dtype=dtype)\n    with torch.no_grad():\n        Y = model(X)\n    assert Y.shape == (batch_size, seq_len, embed_dim\n        ), f'Expected output shape {batch_size, seq_len, embed_dim}, got {Y.shape}'\n    assert len(model.butterflies\n        ) == factors, f'Expected {factors} butterfly layers, got {len(model.butterflies)}'\n    for i, butterfly in enumerate(model.butterflies):\n        expected_in_dim = embed_dim\n        expected_out_dim = embed_dim\n        assert butterfly.in_features == expected_in_dim, f'Butterfly {i} expected in_features {expected_in_dim}, got {butterfly.in_features}'\n        assert butterfly.out_features == expected_out_dim, f'Butterfly {i} expected out_features {expected_out_dim}, got {butterfly.out_features}'\n    assert Y.device == X.device, f'Device mismatch: input on {X.device}, output on {Y.device}'\n    assert Y.dtype == X.dtype, f'Dtype mismatch: input dtype {X.dtype}, output dtype {Y.dtype}'\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nimport torch.nn.functional as F\n\n\nclass ButterflyLinear(GAUBase):\n    \"\"\"\n    ButterflyLinear: Efficient Linear Transformation using Butterfly Factorization.\n    \n    ButterflyLinear decomposes the weight matrix into a product of sparse, structured\n    butterfly matrices, significantly reducing computational overhead and memory usage.\n    \n    **Code Example:**\n    \n    .. code-block:: python\n    \n        # Example usage of ButterflyLinear\n        butterfly = ButterflyLinear(embed_dim=128, block_loc=(0, 0), kwarg_all={}, factors=2)\n        x = torch.randn(32, 10, 128)  # (batch_size, seq_len, embed_dim)\n        y = butterfly(x)\n        print(y.shape)  # Output: torch.Size([32, 10, 128])\n    \n    Args:\n        embed_dim (int): The dimension of the input and output embeddings.\n        block_loc (tuple): The location of this block within the network, \n                           specified as (layer_idx, n_block).\n        kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\n        device (torch.device, optional): The device on which to allocate the module's parameters.\n        dtype (torch.dtype, optional): The data type of the module's parameters.\n        factors (int, optional): The number of butterfly factors to decompose the weight matrix.\n                                 Must satisfy embed_dim divisible by 2**factors. Default is 2.\n        **kwargs: Additional optional arguments.\n    \n    Attributes:\n        factors (int): Number of butterfly factors.\n        butterflies (nn.ModuleList): List of butterfly linear layers.\n    \n    Shape:\n        - Input: (batch_size, seq_len, embed_dim)\n        - Output: (batch_size, seq_len, embed_dim)\n    \n    Example:\n        >>> butterfly = ButterflyLinear(embed_dim=64, block_loc=(1, 0), kwarg_all={}, factors=3)\n        >>> x = torch.randn(10, 20, 64)  # (batch_size, seq_len, embed_dim)\n        >>> y = butterfly(x)\n        >>> print(y.shape)\n        torch.Size([10, 20, 64])\n    \n    References:\n        1. Dao, T., et al. (2019). Learning Fast Algorithms for Linear Transforms Using Butterfly Factorizations. ICML 2019.\n    \"\"\"\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, factors: int=2, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        \"\"\"\n        Initializes the ButterflyLinear GAU.\n\n        Args:\n            embed_dim (int): The dimension of the input and output embeddings.\n            block_loc (tuple): The location of this block within the network, \n                               specified as (layer_idx, n_block).\n            kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\n            device (torch.device, optional): The device on which to allocate the module's parameters.\n            dtype (torch.dtype, optional): The data type of the module's parameters.\n            factors (int, optional): The number of butterfly factors to decompose the weight matrix.\n                                     Must satisfy embed_dim divisible by 2**factors. Default is 2.\n            **kwargs: Additional optional arguments.\n\n        Raises:\n            ValueError: If embed_dim is not divisible by 2**factors.\n        \"\"\"\n        if embed_dim % 2 ** factors != 0:\n            raise ValueError(\n                f'embed_dim ({embed_dim}) must be divisible by 2^{factors} = {2 ** factors} for ButterflyLinear.'\n                )\n        self.factors = factors\n        self.butterflies = nn.ModuleList([nn.Linear(embed_dim, embed_dim,\n            bias=False, device=device, dtype=dtype) for _ in range(factors)])\n\n    def _forward(self, X, **Z):\n        \"\"\"\n        Forward pass of the ButterflyLinear GAU.\n\n        Args:\n            X (torch.Tensor): Input tensor of shape (batch_size, seq_len, embed_dim).\n            **Z: Additional keyword arguments (unused).\n\n        Returns:\n            torch.Tensor: Output tensor of shape (batch_size, seq_len, embed_dim).\n        \"\"\"\n        X = X.to(next(self.parameters()).device, dtype=next(self.parameters\n            ()).dtype)\n        out = X\n        for butterfly in self.butterflies:\n            out = butterfly(out)\n        return out\n",
                        "rating": 4.2,
                        "spec": "{\"unitname\":\"ButterflyLinear\",\"document\":\"ButterflyLinear: Efficient Linear Transformation using Butterfly Factorization.\\n\\nButterflyLinear decomposes the weight matrix into a product of sparse, structured\\nbutterfly matrices, significantly reducing computational overhead and memory usage.\\n\\n**Code Example:**\\n\\n.. code-block:: python\\n\\n    # Example usage of ButterflyLinear\\n    butterfly = ButterflyLinear(embed_dim=128, block_loc=(0, 0), kwarg_all={}, factors=2)\\n    x = torch.randn(32, 10, 128)  # (batch_size, seq_len, embed_dim)\\n    y = butterfly(x)\\n    print(y.shape)  # Output: torch.Size([32, 10, 128])\\n\\nArgs:\\n    embed_dim (int): The dimension of the input and output embeddings.\\n    block_loc (tuple): The location of this block within the network, \\n                       specified as (layer_idx, n_block).\\n    kwarg_all (dict): Dictionary of all keyword arguments, used to initialize child units.\\n    device (torch.device, optional): The device on which to allocate the module's parameters.\\n    dtype (torch.dtype, optional): The data type of the module's parameters.\\n    factors (int, optional): The number of butterfly factors to decompose the weight matrix.\\n                             Must satisfy embed_dim divisible by 2**factors. Default is 2.\\n    **kwargs: Additional optional arguments.\\n\\nAttributes:\\n    factors (int): Number of butterfly factors.\\n    butterflies (nn.ModuleList): List of butterfly linear layers.\\n\\nShape:\\n    - Input: (batch_size, seq_len, embed_dim)\\n    - Output: (batch_size, seq_len, embed_dim)\\n\\nExample:\\n    >>> butterfly = ButterflyLinear(embed_dim=64, block_loc=(1, 0), kwarg_all={}, factors=3)\\n    >>> x = torch.randn(10, 20, 64)  # (batch_size, seq_len, embed_dim)\\n    >>> y = butterfly(x)\\n    >>> print(y.shape)\\n    torch.Size([10, 20, 64])\\n\\nReferences:\\n    1. Dao, T., et al. (2019). Learning Fast Algorithms for Linear Transforms Using Butterfly Factorizations. ICML 2019.\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "factors": 2
                        },
                        "design_traces": null
                    },
                    "SwiGluMLP": {
                        "review": null,
                        "requirements": null,
                        "reuse_from": null,
                        "desc": "\n",
                        "gautests": {
                            "test_swiglumlp": "@gau_test\ndef test_SwiGluMLP_test_swiglumlp(device=None, dtype=None):\n    embed_dim = 128\n    block_loc = 0, 6\n    kwarg_all = {}\n    swiglumlp = SwiGluMLP(embed_dim, block_loc, kwarg_all, device=device,\n        dtype=dtype)\n    x = torch.randn(1, 100, 128).to(device=device, dtype=dtype)\n    y = swiglumlp(x)\n    assert y.shape == (1, 100, 128)\n"
                        },
                        "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom model_discovery.model.utils.modules import GAUBase, gau_test, UnitDecl\nfrom typing import Any, Dict, Optional, Tuple, Union\nimport torch.nn.functional as F\nfrom transformers.utils import logging\nfrom transformers.activations import ACT2FN\nlogger = logging.get_logger(__name__)\n\n\nclass SwiGluMLP(GAUBase):\n\n    def __init__(self, embed_dim: int, block_loc: tuple, kwarg_all: dict,\n        device=None, dtype=None, intermediate_size=None, **kwargs):\n        self.factory_kwargs = {'device': device, 'dtype': dtype}\n        super().__init__(embed_dim, block_loc, kwarg_all)\n        self.hidden_size = embed_dim\n        self.intermediate_size = (intermediate_size if intermediate_size is not\n            None else int(embed_dim * 2.5))\n        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size,\n            bias=False, **self.factory_kwargs)\n        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size,\n            bias=False, **self.factory_kwargs)\n        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size,\n            bias=False, **self.factory_kwargs)\n        self.act_fn = ACT2FN['silu']\n\n    def _forward(self, X, **Z):\n        down_proj = self.down_proj(self.act_fn(self.gate_proj(X)) * self.\n            up_proj(X))\n        return down_proj\n\n\nCHILDREN_DECLARATIONS = []\n",
                        "rating": null,
                        "spec": "{\"unitname\":\"SwiGluMLP\",\"document\":\"\\nSwiGluMLP\\n\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}",
                        "children": [],
                        "suggestions": null,
                        "args": {
                            "intermediate_size": null
                        },
                        "design_traces": null
                    }
                },
                "rating": null,
                "declares": {
                    "ButterflyLinear": "{\"unitname\":\"ButterflyLinear\",\"requirements\":\"N/A\",\"inputs\":[\"X\"],\"outputs\":[\"Y\"]}"
                },
                "proposal_traces": [],
                "suggestions": null,
                "name": "ttt_auxact"
            },
            "user_input": "",
            "status": "implemented",
            "design_cfg": {
                "max_attemps": {
                    "post_refinement": 0,
                    "max_search_rounds": 3,
                    "implementation_debug": 7,
                    "design_proposal": 10
                },
                "threshold": {
                    "proposal_rating": 4.0,
                    "implementation_rating": 3.0
                },
                "use_unlimited_prompt": true,
                "mutation_no_tree": true,
                "agent_types": {
                    "DESIGN_PROPOSER": "hybrid",
                    "IMPLEMENTATION_PLANNER": "hybrid",
                    "IMPLEMENTATION_CODER": "hybrid",
                    "PROPOSAL_REVIEWER": "hybrid",
                    "IMPLEMENTATION_OBSERVER": "hybrid",
                    "SEARCH_ASSISTANT": "None"
                },
                "running_mode": "Proposal + Implementation",
                "unittest_pass_required": false,
                "crossover_no_ref": true,
                "scratch_no_tree": true,
                "_agent_types": {
                    "DESIGN_PROPOSER": "claude3.5_sonnet",
                    "IMPLEMENTATION_PLANNER": "claude3.5_sonnet",
                    "IMPLEMENTATION_CODER": "o1_mini",
                    "PROPOSAL_REVIEWER": "claude3.5_sonnet",
                    "IMPLEMENTATION_OBSERVER": "claude3.5_sonnet",
                    "SEARCH_ASSISTANT": "None"
                },
                "termination": {
                    "max_debug_budget": 0,
                    "max_failed_rounds": 3,
                    "max_total_budget": 0
                },
                "agent_weights": {
                    "DESIGN_PROPOSER": [
                        0.05,
                        0.0,
                        0.6000000000000001,
                        0.2,
                        0.15
                    ],
                    "IMPLEMENTATION_PLANNER": [
                        0.05000000000000002,
                        0.0,
                        0.44999999999999996,
                        0.3,
                        0.20000000000000007
                    ],
                    "IMPLEMENTATION_CODER": [
                        0.0,
                        0.0,
                        0.3,
                        0.4999999999999996,
                        0.2
                    ],
                    "PROPOSAL_REVIEWER": [
                        0.10000000000000002,
                        0.0,
                        0.5499999999999999,
                        0.2,
                        0.15000000000000002
                    ],
                    "IMPLEMENTATION_OBSERVER": [
                        0.05,
                        0.0,
                        0.15000000000000002,
                        0.15000000000000002,
                        0.6499999999999999,
                        0.0
                    ]
                },
                "num_samples": {
                    "implementation": 1,
                    "rerank_method": "rating",
                    "proposal": 1
                },
                "search_settings": {
                    "proposal_search": true,
                    "proposal_review_search": true,
                    "search_for_papers_num": 10
                },
                "max_attempts": {
                    "post_refinement": 0,
                    "max_search_rounds": 4,
                    "implementation_debug": 5,
                    "design_proposal": 5
                }
            },
            "costs": {
                "DESIGN_PROPOSER": 0.0,
                "IMPLEMENTATION_PLANNER": 0.102903,
                "IMPLEMENTATION_CODER": 0.568791,
                "PROPOSAL_REVIEWER": 0.0,
                "IMPLEMENTATION_OBSERVER": 0.700041,
                "SEARCH_ASSISTANT": 0
            }
        }
    ]
}